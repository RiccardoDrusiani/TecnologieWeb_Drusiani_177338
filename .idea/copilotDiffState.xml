<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/apps/Concessionaria/forms.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/apps/Concessionaria/forms.py" />
              <option name="originalContent" value="from django import forms&#10;from django.contrib.auth import authenticate&#10;from django.contrib.auth.models import User&#10;from django.core.exceptions import ValidationError&#10;&#10;from .models import Concessionaria&#10;&#10;class ConcessionariaLoginForm(forms.Form):&#10;    email = forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}))&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}))&#10;&#10;    def clean(self):&#10;        cleaned_data = super().clean()&#10;        email = cleaned_data.get('email')&#10;        password = cleaned_data.get('password')&#10;        if email and password:&#10;            user = authenticate(email=email, password=password)&#10;            if user is None:&#10;                raise forms.ValidationError('Email o password non validi')&#10;            cleaned_data['user'] = user&#10;        return cleaned_data&#10;&#10;    def get_user(self):&#10;        return self.cleaned_data.get('user', None)&#10;&#10;class ConcessionariaForm(forms.ModelForm):&#10;    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;    username = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;&#10;    class Meta:&#10;        model = Concessionaria&#10;        fields = ['username', 'email', 'password', 'partita_iva', 'codice_fiscale']&#10;        widgets = {&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;    def save(self, commit=True):&#10;        user = User.objects.create_user(&#10;            username=self.cleaned_data['username'],&#10;            email=self.cleaned_data['email'],&#10;            password=self.cleaned_data['password']&#10;        )&#10;        concessionaria = super().save(commit=False)&#10;        concessionaria.user = user&#10;        if commit:&#10;            concessionaria.save()&#10;        return concessionaria&#10;&#10;class ConcessionariaUpdateForm(forms.ModelForm):&#10;    class Meta:&#10;        model = Concessionaria&#10;        fields = ['partita_iva', 'codice_fiscale']&#10;        widgets = {&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;class ConcessionariaCreateForm(forms.ModelForm):&#10;    password = forms.CharField(widget=forms.PasswordInput, label=&quot;Password&quot;)&#10;    conferma_password = forms.CharField(widget=forms.PasswordInput, label=&quot;Conferma Password&quot;)&#10;    partita_iva = forms.CharField(max_length=11, label=&quot;Partita IVA&quot;)&#10;    codice_fiscale = forms.CharField(max_length=16, label=&quot;Codice Fiscale&quot;)&#10;&#10;    class Meta:&#10;        model = User&#10;        fields = ['username', 'email', 'password']&#10;&#10;    def clean(self):&#10;        cleaned_data = super().clean()&#10;        password = cleaned_data.get('password')&#10;        conferma_password = cleaned_data.get('conferma_password')&#10;        if password != conferma_password:&#10;            raise ValidationError(&quot;Le password non corrispondono.&quot;)&#10;        return cleaned_data&#10;&#10;    def clean_username(self):&#10;        username = self.cleaned_data.get('username')&#10;        if User.objects.filter(username=username).exists():&#10;            raise ValidationError(&quot;Il nome utente è già in uso. Scegli un altro nome utente.&quot;)&#10;        return username&#10;&#10;    def save(self, commit=True):&#10;        user = super().save(commit=True)&#10;        Concessionaria.objects.create(&#10;            user=user,&#10;            partita_iva=self.cleaned_data['partita_iva'],&#10;            codice_fiscale=self.cleaned_data['codice_fiscale']&#10;        )&#10;        return user&#10;" />
              <option name="updatedContent" value="from django import forms&#13;&#10;from django.contrib.auth import authenticate&#13;&#10;from django.contrib.auth.models import User&#13;&#10;from django.core.exceptions import ValidationError&#13;&#10;&#13;&#10;from .models import Concessionaria&#13;&#10;&#13;&#10;class ConcessionariaLoginForm(forms.Form):&#13;&#10;    email = forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;&#13;&#10;    def clean(self):&#13;&#10;        cleaned_data = super().clean()&#13;&#10;        email = cleaned_data.get('email')&#13;&#10;        password = cleaned_data.get('password')&#13;&#10;        if email and password:&#13;&#10;            user = authenticate(email=email, password=password)&#13;&#10;            if user is None:&#13;&#10;                raise forms.ValidationError('Email o password non validi')&#13;&#10;            cleaned_data['user'] = user&#13;&#10;        return cleaned_data&#13;&#10;&#13;&#10;    def get_user(self):&#13;&#10;        return self.cleaned_data.get('user', None)&#13;&#10;&#13;&#10;class ConcessionariaForm(forms.ModelForm):&#13;&#10;    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;    username = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;&#13;&#10;    class Meta:&#13;&#10;        model = Concessionaria&#13;&#10;        fields = ['username', 'email', 'password', 'partita_iva', 'codice_fiscale']&#13;&#10;        widgets = {&#13;&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;    def save(self, commit=True):&#13;&#10;        user = User.objects.create_user(&#13;&#10;            username=self.cleaned_data['username'],&#13;&#10;            email=self.cleaned_data['email'],&#13;&#10;            password=self.cleaned_data['password']&#13;&#10;        )&#13;&#10;        concessionaria = super().save(commit=False)&#13;&#10;        concessionaria.user = user&#13;&#10;        if commit:&#13;&#10;            concessionaria.save()&#13;&#10;        return concessionaria&#13;&#10;&#13;&#10;class ConcessionariaUpdateForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = Concessionaria&#13;&#10;        fields = ['partita_iva', 'codice_fiscale']&#13;&#10;        widgets = {&#13;&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class ConcessionariaCreateForm(forms.ModelForm):&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput, label=&quot;Password&quot;)&#13;&#10;    conferma_password = forms.CharField(widget=forms.PasswordInput, label=&quot;Conferma Password&quot;)&#13;&#10;    partita_iva = forms.CharField(max_length=11, label=&quot;Partita IVA&quot;)&#13;&#10;    codice_fiscale = forms.CharField(max_length=16, label=&quot;Codice Fiscale&quot;)&#13;&#10;&#13;&#10;    class Meta:&#13;&#10;        model = User&#13;&#10;        fields = ['username', 'email', 'password']&#13;&#10;&#13;&#10;    def clean(self):&#13;&#10;        cleaned_data = super().clean()&#13;&#10;        password = cleaned_data.get('password')&#13;&#10;        conferma_password = cleaned_data.get('conferma_password')&#13;&#10;        if password != conferma_password:&#13;&#10;            raise ValidationError(&quot;Le password non corrispondono.&quot;)&#13;&#10;        return cleaned_data&#13;&#10;&#13;&#10;    def save(self, commit=True):&#13;&#10;        user = super().save(commit=True)  # Salva l'oggetto User prima&#13;&#10;&#13;&#10;        # Creazione del modello Concessionaria&#13;&#10;        Concessionaria.objects.create(&#13;&#10;            user=user,&#13;&#10;            partita_iva=self.cleaned_data['partita_iva'],&#13;&#10;            codice_fiscale=self.cleaned_data['codice_fiscale']&#13;&#10;        )&#13;&#10;        return user" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/add_auto_form.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/add_auto_form.html" />
              <option name="updatedContent" value="{# Template parziale per il form di aggiunta auto #}&#10;{% for field in form %}&#10;  &lt;div class=&quot;mb-3&quot;&gt;&#10;    {{ field.label_tag }}&#10;    {{ field }}&#10;    {% if field.help_text %}&lt;small class=&quot;form-text text-muted&quot;&gt;{{ field.help_text }}&lt;/small&gt;{% endif %}&#10;    {% for error in field.errors %}&#10;      &lt;div class=&quot;text-danger small&quot;&gt;{{ error }}&lt;/div&gt;&#10;    {% endfor %}&#10;  &lt;/div&gt;&#10;{% endfor %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_confirm_delete.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_confirm_delete.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Drusi/Progetto_TecWeb/Autosaloon_Modena/apps/Auto/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Drusi/Progetto_TecWeb/Autosaloon_Modena/apps/Auto/views.py" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/Utente/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/Utente/views.py" />
              <option name="updatedContent" value="# ...existing code...&#10;class SegnalazioneCreateView(CreateView):&#10;    form_class = SegnalazioneForm&#10;    template_name = 'Auto/auto_detail.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def dispatch(self, request, *args, **kwargs):&#10;        # ...existing code...&#10;        return super().dispatch(request, *args, **kwargs)&#10;&#10;    def get_context_data(self, **kwargs):&#10;        context = super().get_context_data(**kwargs)&#10;        commento_id = self.request.GET.get('commento_id') or self.request.POST.get('commento_id')&#10;        auto = None&#10;        if commento_id:&#10;            try:&#10;                commento = Commento.objects.get(id=commento_id)&#10;                auto = commento.auto&#10;            except Commento.DoesNotExist:&#10;                auto = None&#10;        context['auto'] = auto&#10;        return context&#10;&#10;    def form_valid(self, form):&#10;        commento_id = self.request.GET.get('commento_id') or self.request.POST.get('commento_id')&#10;        auto = None&#10;        if not commento_id:&#10;            messages.error(self.request, &quot;Segnalazione non valida: commento mancante.&quot;)&#10;            return redirect(self.success_url)&#10;        try:&#10;            commento = Commento.objects.get(id=commento_id)&#10;            segnalato = commento.user&#10;            auto = commento.auto&#10;            # Solo utenti normali possono essere segnalati&#10;            if hasattr(segnalato, 'concessionaria_profile'):&#10;                messages.error(self.request, &quot;Non puoi segnalare una concessionaria.&quot;)&#10;                return redirect(auto.get_absolute_url() if auto else self.success_url)&#10;            # Salva la segnalazione&#10;            segnalazione = form.save(commit=False)&#10;            segnalazione.segnalatore = self.request.user&#10;            segnalazione.segnalato = segnalato&#10;            segnalazione.motivo = form.cleaned_data['motivo']&#10;            segnalazione.save()&#10;            # Gestione ban&#10;            ban_profile, _ = UserModelBan.objects.get_or_create(user=segnalato)&#10;            ban_profile.segnalazioni = (ban_profile.segnalazioni or 0) + 1&#10;            if ban_profile.segnalazioni &gt;= 5:&#10;                now = timezone.now()&#10;                # Ban incrementale&#10;                if ban_profile.qnt_ban:&#10;                    ban_hours = 2 * (2 ** (ban_profile.qnt_ban - 1))&#10;                else:&#10;                    ban_hours = 2&#10;                ban_profile.data_inizio_ban = now&#10;                ban_profile.data_fine_ban = now + timezone.timedelta(hours=ban_hours)&#10;                ban_profile.qnt_ban = (ban_profile.qnt_ban or 0) + 1&#10;                ban_profile.segnalazioni = 0&#10;                messages.error(self.request, f&quot;Utente bannato per {ban_hours} ore!&quot;)&#10;            ban_profile.save()&#10;            messages.success(self.request, &quot;Segnalazione inviata correttamente.&quot;)&#10;        except Commento.DoesNotExist:&#10;            messages.error(self.request, &quot;Commento non trovato.&quot;)&#10;        return redirect(auto.get_absolute_url() if auto else self.success_url)&#10;&#10;    def form_invalid(self, form):&#10;        messages.error(self.request, &quot;Errore nell'invio della segnalazione.&quot;)&#10;        commento_id = self.request.GET.get('commento_id') or self.request.POST.get('commento_id')&#10;        auto = None&#10;        if commento_id:&#10;            try:&#10;                commento = Commento.objects.get(id=commento_id)&#10;                auto = commento.auto&#10;            except Commento.DoesNotExist:&#10;                auto = None&#10;        return redirect(auto.get_absolute_url() if auto else self.success_url)&#10;# ...existing code...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Auto/user_autos.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Auto/user_autos.html" />
              <option name="originalContent" value="&#10;&#10;&#10;" />
              <option name="updatedContent" value="{% extends 'base.html' %}&#10;&#10;{% block content %}&#10;&#10;                    &lt;a href=&quot;{% url 'Auto:edit_auto' auto.pk %}&quot; class=&quot;btn btn-primary btn-sm&quot;&gt;Modifica&lt;/a&gt;&#10;                    &lt;form method=&quot;post&quot; action=&quot;{% url 'Auto:delete_auto' auto.pk %}&quot; style=&quot;display:inline;&quot;&gt;&#10;                        {% csrf_token %}&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-danger btn-sm delete-auto-btn&quot;&gt;Elimina&lt;/button&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&lt;/div&gt;&#10;&#10;{% include 'Autosalone/confirm_delete_popup.html' %}&#10;&lt;script&gt;&#10;document.addEventListener('DOMContentLoaded', function() {&#10;    let formToDelete = null;&#10;    document.querySelectorAll('.delete-auto-btn').forEach(function(btn) {&#10;        btn.addEventListener('click', function(e) {&#10;            e.preventDefault();&#10;            formToDelete = btn.closest('form');&#10;            var modal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));&#10;            var confirmBtn = document.getElementById('confirmDeleteBtn');&#10;            confirmBtn.onclick = function() {&#10;                if(formToDelete) formToDelete.submit();&#10;                modal.hide();&#10;            };&#10;            modal.show();&#10;        });&#10;    });&#10;});&#10;&lt;/script&gt;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Autosalone/confirm_delete_popup.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Autosalone/confirm_delete_popup.html" />
              <option name="updatedContent" value="&lt;!-- Popup di conferma eliminazione generico e riutilizzabile --&gt;&#10;&lt;div class=&quot;modal fade&quot; id=&quot;confirmDeleteModal&quot; tabindex=&quot;-1&quot; aria-labelledby=&quot;confirmDeleteModalLabel&quot; aria-hidden=&quot;true&quot;&gt;&#10;  &lt;div class=&quot;modal-dialog modal-dialog-centered&quot;&gt;&#10;    &lt;div class=&quot;modal-content&quot;&gt;&#10;      &lt;div class=&quot;modal-header&quot;&gt;&#10;        &lt;h5 class=&quot;modal-title&quot; id=&quot;confirmDeleteModalLabel&quot;&gt;Conferma eliminazione&lt;/h5&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;modal&quot; aria-label=&quot;Chiudi&quot;&gt;&lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;modal-body&quot;&gt;&#10;        Sei sicuro di voler eliminare questo elemento? Questa azione non può essere annullata.&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;modal-footer&quot;&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-bs-dismiss=&quot;modal&quot;&gt;Annulla&lt;/button&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot; id=&quot;confirmDeleteBtn&quot;&gt;Elimina&lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Autosalone/home.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Autosalone/home.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Autosalone/navbar_concessionaria.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Autosalone/navbar_concessionaria.html" />
              <option name="updatedContent" value="&lt;nav class=&quot;d-flex align-items-center&quot; style=&quot;gap: 24px; flex-wrap: nowrap;&quot;&gt;&#10;    &lt;a href=&quot;{% url 'Auto:user_autos' %}&quot; class=&quot;btn btn-outline-light btn-sm d-flex flex-column align-items-center justify-content-center&quot; style=&quot;width:70px; height:70px; border-radius:16px;&quot;&gt;&#10;        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;32&quot; height=&quot;32&quot; fill=&quot;#fff&quot; class=&quot;bi bi-car-front&quot; viewBox=&quot;0 0 16 16&quot;&gt;&#10;            &lt;path d=&quot;M4 9a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm10 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z&quot;/&gt;&#10;            &lt;path d=&quot;M16 8.5v-1c0-.966-.784-1.75-1.75-1.75h-.805l-.547-2.186A2.5 2.5 0 0 0 10.464 1H5.536a2.5 2.5 0 0 0-2.434 3.564l-.547 2.186h-.805A1.75 1.75 0 0 0 0 7.5v1c0 .456.154.877.414 1.215A2.5 2.5 0 0 0 2 13.5V14a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1v-1h6v1a1 1 0 0 0 1 1h1a1 1 0 0 0 1-1v-.5a2.5 2.5 0 0 0 1.586-3.785A1.75 1.75 0 0 0 16 8.5zM5.536 2h4.928a1.5 1.5 0 0 1 1.46 1.964l-.5 2H4.58l-.5-2A1.5 1.5 0 0 1 5.536 2zM1 7.5c0-.414.336-.75.75-.75h12.5c.414 0 .75.336.75.75v1a.75.75 0 0 1-.75.75H1.75A.75.75 0 0 1 1 8.5v-1zm1.5 5A1.5 1.5 0 0 1 1.5 11h13a1.5 1.5 0 0 1-1.5 1.5h-10z&quot;/&gt;&#10;        &lt;/svg&gt;&#10;        &lt;span style=&quot;font-size:0.85rem; color: #fff;&quot;&gt;Le mie Auto&lt;/span&gt;&#10;    &lt;/a&gt;&#10;    &lt;span style=&quot;width:16px;&quot;&gt;&lt;/span&gt;&#10;    &lt;a href=&quot;#&quot; class=&quot;btn btn-outline-light btn-sm d-flex flex-column align-items-center justify-content-center&quot; style=&quot;width:70px; height:70px; border-radius:16px;&quot;&gt;&#10;        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;32&quot; height=&quot;32&quot; fill=&quot;#fff&quot; class=&quot;bi bi-key&quot; viewBox=&quot;0 0 16 16&quot;&gt;&#10;            &lt;path d=&quot;M3 8a5 5 0 1 1 9.584 2.5H15a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-1v1a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-1H8.5A5 5 0 0 1 3 8zm5-4a4 4 0 1 0 0 8 4 4 0 0 0 0-8z&quot;/&gt;&#10;        &lt;/svg&gt;&#10;        &lt;span style=&quot;font-size:0.85rem; color: #fff;&quot;&gt;Auto Affittate&lt;/span&gt;&#10;    &lt;/a&gt;&#10;    &lt;span style=&quot;width:16px;&quot;&gt;&lt;/span&gt;&#10;    &lt;a href=&quot;{% url 'Concessionaria:impostazioni_concessionaria' %}&quot; class=&quot;btn btn-outline-light btn-sm d-flex flex-column align-items-center justify-content-center&quot; style=&quot;width:70px; height:70px; border-radius:16px;&quot;&gt;&#10;        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;32&quot; height=&quot;32&quot; fill=&quot;#fff&quot; class=&quot;bi bi-gear&quot; viewBox=&quot;0 0 16 16&quot;&gt;&#10;            &lt;path d=&quot;M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z&quot;/&gt;&#10;            &lt;path d=&quot;M9.796 1.343c-.527-1.013-1.065-1.013-1.592 0l-.094.187a1.58 1.58 0 0 1-2.252.708l-.16-.093c-1.022-.577-1.516-.077-1.04.926l.094.187a1.58 1.58 0 0 1-.708 2.252l-.093.16c-.577 1.022-.077 1.516.926 1.04l.187-.094a1.58 1.58 0 0 1 2.252.708l.16.093c1.022.577 1.516.077 1.04-.926l-.094-.187a1.58 1.58 0 0 1 .708-2.252l.093-.16c.577-1.022.077-1.516-.926-1.04l-.187.094a1.58 1.58 0 0 1-2.252-.708l-.16-.093z&quot;/&gt;&#10;        &lt;/svg&gt;&#10;        &lt;span style=&quot;font-size:0.85rem; color: #fff;&quot;&gt;Impostazioni&lt;/span&gt;&#10;    &lt;/a&gt;&#10;&lt;/nav&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Autosalone/navbar_utente.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Autosalone/navbar_utente.html" />
              <option name="updatedContent" value="&lt;nav class=&quot;d-flex align-items-center&quot; style=&quot;gap: 24px; flex-wrap: nowrap;&quot;&gt;&#10;    &lt;a href=&quot;{% url 'Utente:prenotazioni_utente' %}&quot; class=&quot;btn btn-outline-light btn-sm d-flex flex-column align-items-center justify-content-center&quot; style=&quot;width:70px; height:70px; border-radius:16px;&quot;&gt;&#10;        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;32&quot; height=&quot;32&quot; fill=&quot;#fff&quot; class=&quot;bi bi-calendar-check&quot; viewBox=&quot;0 0 16 16&quot;&gt;&#10;            &lt;path d=&quot;M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 3v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1zm3.854 6.854a.5.5 0 0 1-.708-.708l2-2a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L7 8.707V11.5a.5.5 0 0 1-1 0V8.707l-1.146 1.147z&quot;/&gt;&#10;        &lt;/svg&gt;&#10;        &lt;span style=&quot;font-size:0.85rem; color: #fff;&quot;&gt;Prenotazioni&lt;/span&gt;&#10;    &lt;/a&gt;&#10;    &lt;span style=&quot;width:16px;&quot;&gt;&lt;/span&gt;&#10;    &lt;a href=&quot;{% url 'Utente:profilo_utente' %}&quot; class=&quot;btn btn-outline-light btn-sm d-flex flex-column align-items-center justify-content-center&quot; style=&quot;width:70px; height:70px; border-radius:16px;&quot;&gt;&#10;        &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;32&quot; height=&quot;32&quot; fill=&quot;#fff&quot; class=&quot;bi bi-person&quot; viewBox=&quot;0 0 16 16&quot;&gt;&#10;            &lt;path d=&quot;M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm4-3a4 4 0 1 1-8 0 4 4 0 0 1 8 0z&quot;/&gt;&#10;            &lt;path d=&quot;M2 13s-1 0-1-1 1-4 7-4 7 3 7 4-1 1-1 1H2zm13-1c0-1-4-4-7-4s-7 3-7 4a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1z&quot;/&gt;&#10;        &lt;/svg&gt;&#10;        &lt;span style=&quot;font-size:0.85rem; color: #fff;&quot;&gt;Profilo&lt;/span&gt;&#10;    &lt;/a&gt;&#10;&lt;/nav&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Utente/impostazioni_utente_template.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Utente/impostazioni_utente_template.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/base.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/base.html" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>