<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/Autosaloon_Modena/settings.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/Autosaloon_Modena/settings.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Django settings for Autosaloon_Modena project.&#10;&#10;Generated by 'django-admin startproject' using Django 5.1.3.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/5.1/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/5.1/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;from pathlib import Path&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = 'django-insecure-4!34hlju3!853arjxj2kdux&amp;kw89=q0pt8crocxqp-#@pa!#me'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'apps.Autosalone.apps.AutosaloneConfig',&#10;    'apps.Utente.apps.UtenteConfig',&#10;    'apps.Concessionaria.apps.ConcessionariaConfig',&#10;    'apps.Auto.apps.AutoConfig',&#10;    'django_registration',&#10;    'django_celery_results',&#10;    'django_celery_beat',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'Autosaloon_Modena.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [BASE_DIR / 'templates'],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'Autosaloon_Modena.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/5.1/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': BASE_DIR / 'db.sqlite3',&#10;    }&#10;}&#10;&#10;&#10;AUTHENTICATION_BACKENDS = [&#10;    'django.contrib.auth.backends.ModelBackend',  # Per il modello User&#10;    'apps.Concessionaria.backends.ConcessionariaBackend',    # Per il modello Concessionaria&#10;]&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/5.1/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/5.1/howto/static-files/&#10;&#10;STATIC_URL = 'static/'&#10;STATICFILES_DIRS = [BASE_DIR / 'static']&#10;&#10;MEDIA_URL = '/media/'&#10;MEDIA_ROOT = BASE_DIR / 'media'&#10;&#10;&#10;# Default primary key field type&#10;# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field&#10;&#10;DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'&#10;&#10;# django-registration settings&#10;# ACCOUNT_ACTIVATION_DAYS = 7  # giorni per attivare l'account via email&#10;REGISTRATION_AUTO_LOGIN = True  # login automatico dopo la registrazione&#10;LOGIN_REDIRECT_URL = '/'&#10;LOGOUT_REDIRECT_URL = '/'&#10;&#10;CELERY_BROKER_URL = 'redis://localhost:6379/0'&#10;CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'&#10;CELERY_BEAT_SCHEDULE = {&#10;    'check_auto_disponibilita_ogni_ora': {&#10;    'check_auto_disponibilita_ogni_ora': {&#10;    'check_auto_disponibilita_ogni_ora': {&#10;    'check_auto_disponibilita_ogni_ora': {&#10;    'check_auto_disponibilita_ogni_ora': {&#10;    'check_auto_disponibilita_ogni_ora': {&#10;    'check_auto_disponibilita_ogni_ora': {&#10;    'check_auto_disponibilita_ogni_ora': {&#10;        'schedule': 6.0,  # ogni 6 secondi&#10;&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Django settings for Autosaloon_Modena project.&#10;&#10;Generated by 'django-admin startproject' using Django 5.1.3.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/5.1/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/5.1/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;from pathlib import Path&#10;from celery.schedules import crontab&#10;&#10;# Build paths inside the project like this: BASE_DIR / 'subdir'.&#10;BASE_DIR = Path(__file__).resolve().parent.parent&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = 'django-insecure-4!34hlju3!853arjxj2kdux&amp;kw89=q0pt8crocxqp-#@pa!#me'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'apps.Autosalone.apps.AutosaloneConfig',&#10;    'apps.Utente.apps.UtenteConfig',&#10;    'apps.Concessionaria.apps.ConcessionariaConfig',&#10;    'apps.Auto.apps.AutoConfig',&#10;    'django_registration',&#10;    'django_celery_results',&#10;    'django_celery_beat',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'Autosaloon_Modena.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [BASE_DIR / 'templates'],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'Autosaloon_Modena.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/5.1/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': BASE_DIR / 'db.sqlite3',&#10;    }&#10;}&#10;&#10;&#10;AUTHENTICATION_BACKENDS = [&#10;    'django.contrib.auth.backends.ModelBackend',  # Per il modello User&#10;    'apps.Concessionaria.backends.ConcessionariaBackend',    # Per il modello Concessionaria&#10;]&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/5.1/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/5.1/howto/static-files/&#10;&#10;STATIC_URL = 'static/'&#10;STATICFILES_DIRS = [BASE_DIR / 'static']&#10;&#10;MEDIA_URL = '/media/'&#10;MEDIA_ROOT = BASE_DIR / 'media'&#10;&#10;&#10;# Default primary key field type&#10;# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field&#10;&#10;DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'&#10;&#10;# django-registration settings&#10;# ACCOUNT_ACTIVATION_DAYS = 7  # giorni per attivare l'account via email&#10;REGISTRATION_AUTO_LOGIN = True  # login automatico dopo la registrazione&#10;LOGIN_REDIRECT_URL = '/'&#10;LOGOUT_REDIRECT_URL = '/'&#10;&#10;CELERY_BROKER_URL = 'redis://localhost:6379/0'&#10;CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'&#10;CELERY_BEAT_SCHEDULE = {&#10;    'check_auto_disponibilita_ogni_minuto': {&#10;        'task': 'apps.Auto.tasks.check_auto_disponibilita_task',&#10;        'schedule': crontab(minute='*/1'),  # ogni minuto&#10;    },&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/apps/Concessionaria/forms.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/apps/Concessionaria/forms.py" />
              <option name="originalContent" value="from django import forms&#10;from django.contrib.auth import authenticate&#10;from django.contrib.auth.models import User&#10;from django.core.exceptions import ValidationError&#10;&#10;from .models import Concessionaria&#10;&#10;class ConcessionariaLoginForm(forms.Form):&#10;    email = forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}))&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}))&#10;&#10;    def clean(self):&#10;        cleaned_data = super().clean()&#10;        email = cleaned_data.get('email')&#10;        password = cleaned_data.get('password')&#10;        if email and password:&#10;            user = authenticate(email=email, password=password)&#10;            if user is None:&#10;                raise forms.ValidationError('Email o password non validi')&#10;            cleaned_data['user'] = user&#10;        return cleaned_data&#10;&#10;    def get_user(self):&#10;        return self.cleaned_data.get('user', None)&#10;&#10;class ConcessionariaForm(forms.ModelForm):&#10;    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;    username = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;&#10;    class Meta:&#10;        model = Concessionaria&#10;        fields = ['username', 'email', 'password', 'partita_iva', 'codice_fiscale']&#10;        widgets = {&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;    def save(self, commit=True):&#10;        user = User.objects.create_user(&#10;            username=self.cleaned_data['username'],&#10;            email=self.cleaned_data['email'],&#10;            password=self.cleaned_data['password']&#10;        )&#10;        concessionaria = super().save(commit=False)&#10;        concessionaria.user = user&#10;        if commit:&#10;            concessionaria.save()&#10;        return concessionaria&#10;&#10;class ConcessionariaUpdateForm(forms.ModelForm):&#10;    class Meta:&#10;        model = Concessionaria&#10;        fields = ['partita_iva', 'codice_fiscale']&#10;        widgets = {&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;class ConcessionariaCreateForm(forms.ModelForm):&#10;    password = forms.CharField(widget=forms.PasswordInput, label=&quot;Password&quot;)&#10;    conferma_password = forms.CharField(widget=forms.PasswordInput, label=&quot;Conferma Password&quot;)&#10;    partita_iva = forms.CharField(max_length=11, label=&quot;Partita IVA&quot;)&#10;    codice_fiscale = forms.CharField(max_length=16, label=&quot;Codice Fiscale&quot;)&#10;&#10;    class Meta:&#10;        model = User&#10;        fields = ['username', 'email', 'password']&#10;&#10;    def clean(self):&#10;        cleaned_data = super().clean()&#10;        password = cleaned_data.get('password')&#10;        conferma_password = cleaned_data.get('conferma_password')&#10;        if password != conferma_password:&#10;            raise ValidationError(&quot;Le password non corrispondono.&quot;)&#10;        return cleaned_data&#10;&#10;    def clean_username(self):&#10;        username = self.cleaned_data.get('username')&#10;        if User.objects.filter(username=username).exists():&#10;            raise ValidationError(&quot;Il nome utente è già in uso. Scegli un altro nome utente.&quot;)&#10;        return username&#10;&#10;    def save(self, commit=True):&#10;        user = super().save(commit=True)&#10;        Concessionaria.objects.create(&#10;            user=user,&#10;            partita_iva=self.cleaned_data['partita_iva'],&#10;            codice_fiscale=self.cleaned_data['codice_fiscale']&#10;        )&#10;        return user&#10;" />
              <option name="updatedContent" value="from django import forms&#13;&#10;from django.contrib.auth import authenticate&#13;&#10;from django.contrib.auth.models import User&#13;&#10;from django.core.exceptions import ValidationError&#13;&#10;&#13;&#10;from .models import Concessionaria&#13;&#10;&#13;&#10;class ConcessionariaLoginForm(forms.Form):&#13;&#10;    email = forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;&#13;&#10;    def clean(self):&#13;&#10;        cleaned_data = super().clean()&#13;&#10;        email = cleaned_data.get('email')&#13;&#10;        password = cleaned_data.get('password')&#13;&#10;        if email and password:&#13;&#10;            user = authenticate(email=email, password=password)&#13;&#10;            if user is None:&#13;&#10;                raise forms.ValidationError('Email o password non validi')&#13;&#10;            cleaned_data['user'] = user&#13;&#10;        return cleaned_data&#13;&#10;&#13;&#10;    def get_user(self):&#13;&#10;        return self.cleaned_data.get('user', None)&#13;&#10;&#13;&#10;class ConcessionariaForm(forms.ModelForm):&#13;&#10;    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;    username = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;&#13;&#10;    class Meta:&#13;&#10;        model = Concessionaria&#13;&#10;        fields = ['username', 'email', 'password', 'partita_iva', 'codice_fiscale']&#13;&#10;        widgets = {&#13;&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;    def save(self, commit=True):&#13;&#10;        user = User.objects.create_user(&#13;&#10;            username=self.cleaned_data['username'],&#13;&#10;            email=self.cleaned_data['email'],&#13;&#10;            password=self.cleaned_data['password']&#13;&#10;        )&#13;&#10;        concessionaria = super().save(commit=False)&#13;&#10;        concessionaria.user = user&#13;&#10;        if commit:&#13;&#10;            concessionaria.save()&#13;&#10;        return concessionaria&#13;&#10;&#13;&#10;class ConcessionariaUpdateForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = Concessionaria&#13;&#10;        fields = ['partita_iva', 'codice_fiscale']&#13;&#10;        widgets = {&#13;&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class ConcessionariaCreateForm(forms.ModelForm):&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput, label=&quot;Password&quot;)&#13;&#10;    conferma_password = forms.CharField(widget=forms.PasswordInput, label=&quot;Conferma Password&quot;)&#13;&#10;    partita_iva = forms.CharField(max_length=11, label=&quot;Partita IVA&quot;)&#13;&#10;    codice_fiscale = forms.CharField(max_length=16, label=&quot;Codice Fiscale&quot;)&#13;&#10;&#13;&#10;    class Meta:&#13;&#10;        model = User&#13;&#10;        fields = ['username', 'email', 'password']&#13;&#10;&#13;&#10;    def clean(self):&#13;&#10;        cleaned_data = super().clean()&#13;&#10;        password = cleaned_data.get('password')&#13;&#10;        conferma_password = cleaned_data.get('conferma_password')&#13;&#10;        if password != conferma_password:&#13;&#10;            raise ValidationError(&quot;Le password non corrispondono.&quot;)&#13;&#10;        return cleaned_data&#13;&#10;&#13;&#10;    def save(self, commit=True):&#13;&#10;        user = super().save(commit=True)  # Salva l'oggetto User prima&#13;&#10;&#13;&#10;        # Creazione del modello Concessionaria&#13;&#10;        Concessionaria.objects.create(&#13;&#10;            user=user,&#13;&#10;            partita_iva=self.cleaned_data['partita_iva'],&#13;&#10;            codice_fiscale=self.cleaned_data['codice_fiscale']&#13;&#10;        )&#13;&#10;        return user" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/apps/Utente/form.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/apps/Utente/form.py" />
              <option name="originalContent" value="from django import forms&#10;from django.contrib.auth.models import User&#10;from .models import UserExtendModel&#10;from apps.Auto.models import Commento, Risposta&#10;&#10;class UserCreateForm(forms.ModelForm):&#10;    class Meta:&#10;        model = User&#10;        fields = ['username', 'email', 'password', 'first_name', 'last_name']&#10;        widgets = {&#10;            'username': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'password': forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'first_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'last_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;class UserExtendForm(forms.ModelForm):&#10;    class Meta:&#10;        model = UserExtendModel&#10;        fields = ['data_nascita', 'indirizzo', 'telefono', 'immagine_profilo']&#10;        widgets = {&#10;            'data_nascita': forms.DateInput(attrs={'class': 'form-control', 'type': 'date', 'placeholder': ''}),&#10;            'indirizzo': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'telefono': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'immagine_profilo': forms.ClearableFileInput(attrs={'class': 'form-control'}),&#10;        }&#10;&#10;class UserUpdateForm(forms.ModelForm):&#10;    class Meta:&#10;        model = User&#10;        fields = ['email', 'first_name', 'last_name']&#10;        widgets = {&#10;            'email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'first_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'last_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;class UserDeleteForm(forms.Form):&#10;    confirm = forms.BooleanField(label='Conferma eliminazione utente', widget=forms.CheckboxInput(attrs={'class': 'form-check-input'}))&#10;&#10;# Placeholder per Commento, Risposta, Segnalazione&#10;class CommentoForm(forms.ModelForm):&#10;    class Meta:&#10;        model = Commento&#10;        fields = ['testo']&#10;        widgets = {&#10;            'testo': forms.Textarea(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;class RispostaForm(forms.ModelForm):&#10;    class Meta:&#10;        model = Risposta&#10;        fields = ['testo']&#10;        widgets = {&#10;            'testo': forms.Textarea(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;class SegnalazioneForm(forms.Form):&#10;    motivo = forms.CharField(widget=forms.Textarea(attrs={'class': 'form-control', 'placeholder': ''}))&#10;" />
              <option name="updatedContent" value="from django import forms&#13;&#10;from django.contrib.auth.models import User&#13;&#10;from .models import UserExtendModel, Segnalazione&#13;&#10;from apps.Auto.models import Commento, Risposta&#13;&#10;&#13;&#10;class UserCreateForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = User&#13;&#10;        fields = ['username', 'email', 'password', 'first_name', 'last_name']&#13;&#10;        widgets = {&#13;&#10;            'username': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'password': forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'first_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'last_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class UserExtendForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = UserExtendModel&#13;&#10;        fields = ['data_nascita', 'indirizzo', 'telefono', 'immagine_profilo']&#13;&#10;        widgets = {&#13;&#10;            'data_nascita': forms.DateInput(attrs={'class': 'form-control', 'type': 'date', 'placeholder': ''}),&#13;&#10;            'indirizzo': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'telefono': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'immagine_profilo': forms.ClearableFileInput(attrs={'class': 'form-control'}),&#13;&#10;        }&#13;&#10;&#13;&#10;class UserUpdateForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = User&#13;&#10;        fields = ['email', 'first_name', 'last_name']&#13;&#10;        widgets = {&#13;&#10;            'email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'first_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'last_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class UserDeleteForm(forms.Form):&#13;&#10;    confirm = forms.BooleanField(label='Conferma eliminazione utente', widget=forms.CheckboxInput(attrs={'class': 'form-check-input'}))&#13;&#10;&#13;&#10;# Placeholder per Commento, Risposta, Segnalazione&#13;&#10;class CommentoForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = Commento&#13;&#10;        fields = ['testo']&#13;&#10;        widgets = {&#13;&#10;            'testo': forms.Textarea(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class RispostaForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = Risposta&#13;&#10;        fields = ['testo']&#13;&#10;        widgets = {&#13;&#10;            'testo': forms.Textarea(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class SegnalazioneForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = Segnalazione&#13;&#10;        fields = ['motivo']&#13;&#10;        widgets = {&#13;&#10;            'motivo': forms.Textarea(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class UserFullUpdateForm(forms.ModelForm):&#13;&#10;    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    first_name = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    last_name = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    data_nascita = forms.DateField(required=False, widget=forms.DateInput(attrs={'class': 'form-control', 'type': 'date', 'placeholder': ''}))&#13;&#10;    indirizzo = forms.CharField(required=False, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    telefono = forms.CharField(required=False, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    immagine_profilo = forms.ImageField(required=False, widget=forms.ClearableFileInput(attrs={'class': 'form-control'}))&#13;&#10;&#13;&#10;    class Meta:&#13;&#10;        model = UserExtendModel&#13;&#10;        fields = ['email', 'first_name', 'last_name', 'data_nascita', 'indirizzo', 'telefono', 'immagine_profilo']&#13;&#10;&#13;&#10;    def __init__(self, *args, **kwargs):&#13;&#10;        instance = kwargs.get('instance')&#13;&#10;        initial = kwargs.get('initial', {})&#13;&#10;        if instance:&#13;&#10;            initial.update({&#13;&#10;                'email': instance.user.email,&#13;&#10;                'first_name': instance.user.first_name,&#13;&#10;                'last_name': instance.user.last_name,&#13;&#10;                'data_nascita': instance.data_nascita,&#13;&#10;                'indirizzo': instance.indirizzo,&#13;&#10;                'telefono': instance.telefono,&#13;&#10;                'immagine_profilo': instance.immagine_profilo,&#13;&#10;            })&#13;&#10;            kwargs['initial'] = initial&#13;&#10;        super().__init__(*args, **kwargs)&#13;&#10;&#13;&#10;    def save(self, commit=True):&#13;&#10;        user_extend = super().save(commit=False)&#13;&#10;        user = user_extend.user&#13;&#10;        user.email = self.cleaned_data['email']&#13;&#10;        user.first_name = self.cleaned_data['first_name']&#13;&#10;        user.last_name = self.cleaned_data['last_name']&#13;&#10;        if commit:&#13;&#10;            user.save()&#13;&#10;            user_extend.save()&#13;&#10;            if self.cleaned_data.get('immagine_profilo'):&#13;&#10;                user_extend.immagine_profilo = self.cleaned_data['immagine_profilo']&#13;&#10;                user_extend.save()&#13;&#10;        return user_extend" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/apps/Utente/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/apps/Utente/views.py" />
              <option name="originalContent" value="from django.shortcuts import render, redirect&#10;from django.views.generic import CreateView, UpdateView, DeleteView&#10;from django.contrib.auth.models import User, Group&#10;from django.urls import reverse_lazy&#10;from django.contrib.auth import login, authenticate&#10;from django.contrib.auth.views import LogoutView, LoginView&#10;from django.contrib import messages&#10;from .models import UserExtendModel, Segnalazione&#10;from .form import UserCreateForm, UserExtendForm, UserUpdateForm, UserDeleteForm, CommentoForm, RispostaForm, SegnalazioneForm, UserFullUpdateForm&#10;from ..Auto.models import Commento, Risposta, Auto, AutoVendita, AutoAffitto&#10;from django.http import JsonResponse&#10;from django.contrib.auth.decorators import login_required&#10;from django.contrib.auth import logout&#10;from apps.Utente.models import UserModelBan&#10;from django.utils import timezone&#10;from django.utils.decorators import method_decorator&#10;&#10;from ..decorator import user_is_banned, ban_check&#10;&#10;&#10;# Creazione utente base + profilo esteso&#10;class UserCreateView(CreateView):&#10;    model = User&#10;    form_class = UserCreateForm&#10;    template_name = 'Utente/registration_form.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        user = form.save(commit=False)&#10;        user.set_password(form.cleaned_data['password'])&#10;        user.save()&#10;&#10;        # Assegna l'utente al gruppo &quot;Utente&quot;&#10;        group, created = Group.objects.get_or_create(name='utente')&#10;        user.groups.add(group)&#10;&#10;        UserExtendModel.objects.create(user=user)&#10;        # Autenticazione e login automatico dopo la registrazione&#10;        user = authenticate(username=form.cleaned_data['username'], password=form.cleaned_data['password'])&#10;        if user is not None:&#10;            login(self.request, user)&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        messages.error(self.request, &quot;Errore durante la registrazione. Controlla i dati inseriti.&quot;)&#10;        return super().form_invalid(form)&#10;&#10;# Modifica utente base + esteso&#10;class UserUpdateView(UpdateView):&#10;    model = UserExtendModel&#10;    form_class = UserFullUpdateForm&#10;    template_name = 'Utente/update_user.html'&#10;    success_url = reverse_lazy('home')&#10;    slug_field = 'slug'&#10;    slug_url_kwarg = 'slug'&#10;&#10;    def form_valid(self, form):&#10;        form.save()&#10;        messages.success(self.request, &quot;Profilo aggiornato correttamente.&quot;)&#10;        return redirect(self.success_url)&#10;&#10;    def form_invalid(self, form):&#10;        messages.error(self.request, &quot;Errore durante la modifica del profilo. Controlla i dati inseriti.&quot;)&#10;        return super().form_invalid(form)&#10;&#10;# Eliminazione utente&#10;class UserDeleteView(DeleteView):&#10;    model = UserExtendModel&#10;    template_name = 'Utente/delete_user.html'&#10;    success_url = reverse_lazy('home')&#10;    slug_field = 'slug'&#10;    slug_url_kwarg = 'slug'&#10;&#10;    def delete(self, request, *args, **kwargs):&#10;        self.object = self.get_object()&#10;        user = self.object.user&#10;        # Elimina tutte le auto associate all'utente&#10;        Auto.objects.filter(user_auto=user).delete()&#10;        # Elimina l'utente (che elimina anche UserExtendModel per on_delete=models.CASCADE)&#10;        user.delete()&#10;        logout(request)&#10;        request.session.flush()&#10;        return redirect(self.success_url)&#10;&#10;    def post(self, request, *args, **kwargs):&#10;        return self.delete(request, *args, **kwargs)&#10;&#10;# Creazione commento&#10;class CommentoCreateView(CreateView):&#10;    model = Commento&#10;    form_class = CommentoForm&#10;    template_name = 'Utente/create_commento.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        auto_id = self.request.POST.get('auto_id')&#10;        auto = None&#10;        if auto_id:&#10;            auto = Auto.objects.get(pk=auto_id)&#10;        commento = form.save(commit=False)&#10;        commento.user = self.request.user&#10;        commento.auto = auto&#10;        commento.save()&#10;        return redirect(auto.get_absolute_url() if auto else self.success_url)&#10;&#10;    def get_form(self, form_class=None):&#10;        form = super().get_form(form_class)&#10;        form.fields['testo'].widget.attrs['placeholder'] = 'Scrivi un commento...'&#10;        return form&#10;&#10;# Creazione risposta&#10;class RispostaCreateView(CreateView):&#10;    model = Risposta&#10;    form_class = RispostaForm&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        commento_id = self.request.GET.get('commento_id') or self.request.POST.get('commento_id')&#10;        commento = Commento.objects.get(pk=commento_id)&#10;        risposta = form.save(commit=False)&#10;        risposta.user = self.request.user&#10;        risposta.commento = commento&#10;        risposta.save()&#10;        auto = commento.auto&#10;        if self.request.headers.get('x-requested-with') == 'XMLHttpRequest':&#10;            return JsonResponse({&#10;                'success': True,&#10;                'testo': risposta.testo,&#10;                'username': risposta.user.username,&#10;                'data_creazione': risposta.data_creazione.strftime('%d/%m/%Y %H:%M'),&#10;            })&#10;        return redirect(auto.get_absolute_url())&#10;&#10;    def form_invalid(self, form):&#10;        if self.request.headers.get('x-requested-with') == 'XMLHttpRequest':&#10;            return JsonResponse({'success': False, 'error': 'Dati non validi.'})&#10;        return super().form_invalid(form)&#10;&#10;    def get_form(self, form_class=None):&#10;        form = super().get_form(form_class)&#10;        form.fields['testo'].widget.attrs['placeholder'] = 'Scrivi una risposta...'&#10;        return form&#10;&#10;    def get(self, request, *args, **kwargs):&#10;        return redirect('home')&#10;&#10;# Creazione segnalazione&#10;@login_required&#10;@method_decorator(user_is_banned, name='dispatch')&#10;class SegnalazioneCreateView(CreateView):&#10;    model = Segnalazione&#10;    form_class = SegnalazioneForm&#10;    template_name = 'Utente/conferma_segnalazione.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def get(self, request, *args, **kwargs):&#10;        commento_id = request.GET.get('commento_id')&#10;        if not commento_id:&#10;            messages.error(request, &quot;Segnalazione non valida: commento mancante.&quot;)&#10;            return redirect(self.success_url)&#10;        try:&#10;            commento = Commento.objects.get(id=commento_id)&#10;        except Commento.DoesNotExist:&#10;            messages.error(request, &quot;Commento non trovato.&quot;)&#10;            return redirect(self.success_url)&#10;        # Mostra una pagina di conferma con il commento da segnalare&#10;        form = self.form_class(initial={'commento': commento})&#10;        return render(request, self.template_name, {'form': form, 'commento': commento})&#10;&#10;    def post(self, request, *args, **kwargs):&#10;        commento_id = request.POST.get('commento_id')&#10;        if not commento_id:&#10;            messages.error(request, &quot;Segnalazione non valida: commento mancante.&quot;)&#10;            return redirect(self.success_url)&#10;        try:&#10;            commento = Commento.objects.get(id=commento_id)&#10;            segnalato = commento.user&#10;            if hasattr(segnalato, 'concessionaria_profile'):&#10;                messages.error(request, &quot;Non puoi segnalare una concessionaria.&quot;)&#10;                return redirect(self.success_url)&#10;            form = self.form_class(request.POST)&#10;            if form.is_valid():&#10;                segnalazione = form.save(commit=False)&#10;                segnalazione.commento = commento&#10;                segnalazione.segnalatore_id = request.user.id&#10;                segnalazione.segnalato_id = segnalato.id&#10;                segnalazione.data_segnalazione = timezone.now()&#10;                segnalazione.save()&#10;                # Incrementa il contatore di segnalazioni per l'utente segnalato&#10;                try:&#10;                    user_ban_profile = segnalato.user_ban_profile&#10;                    user_ban_profile.segnalazioni += 1&#10;                    user_ban_profile.save()&#10;                except UserModelBan.DoesNotExist:&#10;                    UserModelBan.objects.create(user=segnalato, segnalazioni=1, qnt_ban=0)&#10;                messages.success(request, &quot;Segnalazione inviata correttamente.&quot;)&#10;                return redirect(self.success_url)&#10;            else:&#10;                return render(request, self.template_name, {'form': form, 'commento': commento})&#10;        except Commento.DoesNotExist:&#10;            messages.error(request, &quot;Commento non trovato.&quot;)&#10;            return redirect(self.success_url)&#10;&#10;&#10;# View per il logout utente&#10;class UserLogoutView(LogoutView):&#10;    next_page = 'home'&#10;&#10;# Login utente&#10;class UserLoginView(LoginView):&#10;    template_name = 'Utente/login.html'&#10;    success_url = reverse_lazy('home')&#10;    error_url = reverse_lazy('login')&#10;&#10;    def form_invalid(self, form):&#10;        messages.error(self.request, &quot;Email o password non validi.&quot;)&#10;        return redirect('login')&#10;&#10;@login_required&#10;def impostazioni_utente(request):&#10;    try:&#10;        user_profile = request.user.user_extend_profile&#10;    except UserExtendModel.DoesNotExist:&#10;        user_profile = UserExtendModel.objects.create(user=request.user)&#10;&#10;    if request.method == 'POST':&#10;        form = UserFullUpdateForm(request.POST, request.FILES, instance=user_profile)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, &quot;Profilo aggiornato correttamente.&quot;)&#10;            return redirect('Utente:impostazioni_utente')&#10;        else:&#10;            messages.error(request, &quot;Errore durante la modifica del profilo. Controlla i dati inseriti.&quot;)&#10;    else:&#10;        form = UserFullUpdateForm(instance=user_profile)&#10;&#10;    return render(request, 'Utente/impostazioni_utente_template.html', {&#10;        'form': form,&#10;        'user': request.user,&#10;        'user_extend_profile': user_profile,&#10;    })&#10;" />
              <option name="updatedContent" value="from django.shortcuts import render, redirect&#10;from django.views.generic import CreateView, UpdateView, DeleteView&#10;from django.contrib.auth.models import User, Group&#10;from django.urls import reverse_lazy&#10;from django.contrib.auth import login, authenticate&#10;from django.contrib.auth.views import LogoutView, LoginView&#10;from django.contrib import messages&#10;from .models import UserExtendModel, Segnalazione, UserModelBan&#10;from .form import UserCreateForm, UserExtendForm, UserUpdateForm, UserDeleteForm, CommentoForm, RispostaForm, SegnalazioneForm, UserFullUpdateForm&#10;from ..Auto.models import Commento, Risposta, Auto, AutoVendita, AutoAffitto&#10;from django.http import JsonResponse&#10;from django.contrib.auth.decorators import login_required&#10;from django.contrib.auth import logout&#10;from django.utils import timezone&#10;from django.utils.decorators import method_decorator&#10;&#10;from .decorator import user_is_banned&#10;&#10;&#10;# Creazione utente base + profilo esteso&#10;class UserCreateView(CreateView):&#10;    model = User&#10;    form_class = UserCreateForm&#10;    template_name = 'Utente/registration_form.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        user = form.save(commit=False)&#10;        user.set_password(form.cleaned_data['password'])&#10;        user.save()&#10;&#10;        # Assegna l'utente al gruppo &quot;Utente&quot;&#10;        group, created = Group.objects.get_or_create(name='utente')&#10;        user.groups.add(group)&#10;&#10;        UserExtendModel.objects.create(user=user)&#10;        # Autenticazione e login automatico dopo la registrazione&#10;        user = authenticate(username=form.cleaned_data['username'], password=form.cleaned_data['password'])&#10;        if user is not None:&#10;            login(self.request, user)&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        messages.error(self.request, &quot;Errore durante la registrazione. Controlla i dati inseriti.&quot;)&#10;        return super().form_invalid(form)&#10;&#10;# Modifica utente base + esteso&#10;class UserUpdateView(UpdateView):&#10;    model = UserExtendModel&#10;    form_class = UserFullUpdateForm&#10;    template_name = 'Utente/update_user.html'&#10;    success_url = reverse_lazy('home')&#10;    slug_field = 'slug'&#10;    slug_url_kwarg = 'slug'&#10;&#10;    def form_valid(self, form):&#10;        form.save()&#10;        messages.success(self.request, &quot;Profilo aggiornato correttamente.&quot;)&#10;        return redirect(self.success_url)&#10;&#10;    def form_invalid(self, form):&#10;        messages.error(self.request, &quot;Errore durante la modifica del profilo. Controlla i dati inseriti.&quot;)&#10;        return super().form_invalid(form)&#10;&#10;# Eliminazione utente&#10;class UserDeleteView(DeleteView):&#10;    model = UserExtendModel&#10;    template_name = 'Utente/delete_user.html'&#10;    success_url = reverse_lazy('home')&#10;    slug_field = 'slug'&#10;    slug_url_kwarg = 'slug'&#10;&#10;    def delete(self, request, *args, **kwargs):&#10;        self.object = self.get_object()&#10;        user = self.object.user&#10;        # Elimina tutte le auto associate all'utente&#10;        Auto.objects.filter(user_auto=user).delete()&#10;        # Elimina l'utente (che elimina anche UserExtendModel per on_delete=models.CASCADE)&#10;        user.delete()&#10;        logout(request)&#10;        request.session.flush()&#10;        return redirect(self.success_url)&#10;&#10;    def post(self, request, *args, **kwargs):&#10;        return self.delete(request, *args, **kwargs)&#10;&#10;# Creazione commento&#10;class CommentoCreateView(CreateView):&#10;    model = Commento&#10;    form_class = CommentoForm&#10;    template_name = 'Utente/create_commento.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        auto_id = self.request.POST.get('auto_id')&#10;        auto = None&#10;        if auto_id:&#10;            auto = Auto.objects.get(pk=auto_id)&#10;        commento = form.save(commit=False)&#10;        commento.user = self.request.user&#10;        commento.auto = auto&#10;        commento.save()&#10;        return redirect(auto.get_absolute_url() if auto else self.success_url)&#10;&#10;    def get_form(self, form_class=None):&#10;        form = super().get_form(form_class)&#10;        form.fields['testo'].widget.attrs['placeholder'] = 'Scrivi un commento...'&#10;        return form&#10;&#10;# Creazione risposta&#10;class RispostaCreateView(CreateView):&#10;    model = Risposta&#10;    form_class = RispostaForm&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        commento_id = self.request.GET.get('commento_id') or self.request.POST.get('commento_id')&#10;        commento = Commento.objects.get(pk=commento_id)&#10;        risposta = form.save(commit=False)&#10;        risposta.user = self.request.user&#10;        risposta.commento = commento&#10;        risposta.save()&#10;        auto = commento.auto&#10;        if self.request.headers.get('x-requested-with') == 'XMLHttpRequest':&#10;            return JsonResponse({&#10;                'success': True,&#10;                'testo': risposta.testo,&#10;                'username': risposta.user.username,&#10;                'data_creazione': risposta.data_creazione.strftime('%d/%m/%Y %H:%M'),&#10;            })&#10;        return redirect(auto.get_absolute_url())&#10;&#10;    def form_invalid(self, form):&#10;        if self.request.headers.get('x-requested-with') == 'XMLHttpRequest':&#10;            return JsonResponse({'success': False, 'error': 'Dati non validi.'})&#10;        return super().form_invalid(form)&#10;&#10;    def get_form(self, form_class=None):&#10;        form = super().get_form(form_class)&#10;        form.fields['testo'].widget.attrs['placeholder'] = 'Scrivi una risposta...'&#10;        return form&#10;&#10;    def get(self, request, *args, **kwargs):&#10;        return redirect('home')&#10;&#10;# Creazione segnalazione&#10;@method_decorator(login_required, name='dispatch')&#10;@method_decorator(user_is_banned, name='dispatch')&#10;class SegnalazioneCreateView(CreateView):&#10;    model = Segnalazione&#10;    form_class = SegnalazioneForm&#10;    template_name = 'Utente/conferma_segnalazione.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def get(self, request, *args, **kwargs):&#10;        commento_id = request.GET.get('commento_id')&#10;        if not commento_id:&#10;            messages.error(request, &quot;Segnalazione non valida: commento mancante.&quot;)&#10;            return redirect(self.success_url)&#10;        try:&#10;            commento = Commento.objects.get(id=commento_id)&#10;        except Commento.DoesNotExist:&#10;            messages.error(request, &quot;Commento non trovato.&quot;)&#10;            return redirect(self.success_url)&#10;        # Mostra una pagina di conferma con il commento da segnalare&#10;        form = self.form_class(initial={'commento': commento})&#10;        return render(request, self.template_name, {'form': form, 'commento': commento})&#10;&#10;    def post(self, request, *args, **kwargs):&#10;        commento_id = request.POST.get('commento_id')&#10;        if not commento_id:&#10;            messages.error(request, &quot;Segnalazione non valida: commento mancante.&quot;)&#10;            return redirect(self.success_url)&#10;        try:&#10;            commento = Commento.objects.get(id=commento_id)&#10;            segnalato = commento.user&#10;            if hasattr(segnalato, 'concessionaria_profile'):&#10;                messages.error(request, &quot;Non puoi segnalare una concessionaria.&quot;)&#10;                return redirect(self.success_url)&#10;            form = self.form_class(request.POST)&#10;            if form.is_valid():&#10;                segnalazione = form.save(commit=False)&#10;                segnalazione.commento = commento&#10;                segnalazione.segnalatore_id = request.user.id&#10;                segnalazione.segnalato_id = segnalato.id&#10;                segnalazione.data_segnalazione = timezone.now()&#10;                segnalazione.save()&#10;                # Incrementa il contatore di segnalazioni per l'utente segnalato&#10;                try:&#10;                    user_ban_profile = segnalato.user_ban_profile&#10;                    user_ban_profile.segnalazioni += 1&#10;                    user_ban_profile.save()&#10;                except UserModelBan.DoesNotExist:&#10;                    UserModelBan.objects.create(user=segnalato, segnalazioni=1, qnt_ban=0)&#10;                messages.success(request, &quot;Segnalazione inviata correttamente.&quot;)&#10;                return redirect(self.success_url)&#10;            else:&#10;                return render(request, self.template_name, {'form': form, 'commento': commento})&#10;        except Commento.DoesNotExist:&#10;            messages.error(request, &quot;Commento non trovato.&quot;)&#10;            return redirect(self.success_url)&#10;&#10;&#10;# View per il logout utente&#10;class UserLogoutView(LogoutView):&#10;    next_page = 'home'&#10;&#10;# Login utente&#10;class UserLoginView(LoginView):&#10;    template_name = 'Utente/login.html'&#10;    success_url = reverse_lazy('home')&#10;    error_url = reverse_lazy('login')&#10;&#10;    def form_invalid(self, form):&#10;        messages.error(self.request, &quot;Email o password non validi.&quot;)&#10;        return redirect('login')&#10;&#10;@login_required&#10;def impostazioni_utente(request):&#10;    try:&#10;        user_profile = request.user.user_extend_profile&#10;    except UserExtendModel.DoesNotExist:&#10;        user_profile = UserExtendModel.objects.create(user=request.user)&#10;&#10;    if request.method == 'POST':&#10;        form = UserFullUpdateForm(request.POST, request.FILES, instance=user_profile)&#10;        if form.is_valid():&#10;            form.save()&#10;            messages.success(request, &quot;Profilo aggiornato correttamente.&quot;)&#10;            return redirect('Utente:impostazioni_utente')&#10;        else:&#10;            messages.error(request, &quot;Errore durante la modifica del profilo. Controlla i dati inseriti.&quot;)&#10;    else:&#10;        form = UserFullUpdateForm(instance=user_profile)&#10;&#10;    return render(request, 'Utente/impostazioni_utente_template.html', {&#10;        'form': form,&#10;        'user': request.user,&#10;        'user_extend_profile': user_profile,&#10;    })" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/add_auto_form.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/add_auto_form.html" />
              <option name="updatedContent" value="{# Template parziale per il form di aggiunta auto #}&#10;{% for field in form %}&#10;  &lt;div class=&quot;mb-3&quot;&gt;&#10;    {{ field.label_tag }}&#10;    {{ field }}&#10;    {% if field.help_text %}&lt;small class=&quot;form-text text-muted&quot;&gt;{{ field.help_text }}&lt;/small&gt;{% endif %}&#10;    {% for error in field.errors %}&#10;      &lt;div class=&quot;text-danger small&quot;&gt;{{ error }}&lt;/div&gt;&#10;    {% endfor %}&#10;  &lt;/div&gt;&#10;{% endfor %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_confirm_delete.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_confirm_delete.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_detail.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_detail.html" />
              <option name="originalContent" value="{% extends 'base.html' %}&#10;{% block content %}&#10;&lt;div class=&quot;container-fluid py-5&quot; style=&quot;width:100%;&quot;&gt;&#10;    &lt;div class=&quot;row justify-content-center&quot;&gt;&#10;        &lt;div class=&quot;col-12 col-xl-12 col-xxl-11&quot; style=&quot;max-width: 1200px; padding-left: 150px; padding-right: 150px; width: 100%;&quot;&gt;&#10;            {# ALERT STATO AUTO #}&#10;&#10;            {% if auto.disponibilita == 3 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente in contrattazione&lt;/div&gt;&#10;            {% elif auto.disponibilita == 4 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente in contrattazione&lt;/div&gt;&#10;            {% elif auto.disponibilita == 5 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente in contrattazione&lt;/div&gt;&#10;            {% elif auto.disponibilita == 6 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente prenotata&lt;/div&gt;&#10;            {% elif auto.disponibilita == 7 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente in affitto&lt;/div&gt;&#10;            {% endif %}&#10;            &lt;div class=&quot;card shadow-lg border-0 rounded-4&quot; style=&quot;margin-top: 20px; margin-bottom: 20px; width: 150%; margin-left: -25%;&quot;&gt;&#10;                &lt;div class=&quot;row g-0&quot;&gt;&#10;                    {% if auto.immagine %}&#10;                    &lt;div class=&quot;col-md-5 d-flex align-items-center justify-content-center p-3&quot;&gt;&#10;                        &lt;img src=&quot;{{ auto.immagine.url }}&quot; class=&quot;img-fluid rounded-4 w-100&quot; alt=&quot;{{ auto.marca }} {{ auto.modello }}&quot;&gt;&#10;                    &lt;/div&gt;&#10;                    {% endif %}&#10;                    &lt;div class=&quot;col-md-7 p-4&quot;&gt;&#10;                        &lt;h2 class=&quot;fw-bold mb-3&quot;&gt;{{ auto.marca }} {{ auto.modello }}&lt;/h2&gt;&#10;                        &lt;ul class=&quot;list-group list-group-flush mb-3&quot;&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Anno:&lt;/strong&gt; {{ auto.anno }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Cilindrata:&lt;/strong&gt; {{ auto.cilindrata }} cc&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Carburante:&lt;/strong&gt; {{ auto.get_carburante_display }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Cambio:&lt;/strong&gt; {{ auto.get_cambio_display }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Trazione:&lt;/strong&gt; {{ auto.get_trazione_display }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Chilometraggio:&lt;/strong&gt; {{ auto.chilometraggio|default:'N/A' }} km&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Disponibilità:&lt;/strong&gt; {{ auto.get_disponibilita_display }}&lt;/li&gt;&#10;                        &lt;/ul&gt;&#10;                        {% if auto.descrizione %}&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;strong&gt;Descrizione:&lt;/strong&gt;&#10;                            &lt;p&gt;{{ auto.descrizione }}&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        {% endif %}&#10;                        {# BOTTONI AZIONE #}&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;&#10;                                {% csrf_token %}&#10;                                {% if user.is_authenticated %}&#10;                                    {% if is_in_disponibilita %}&#10;                                        {% if user.id != auto.user_auto.id %}&#10;                                            &lt;a href=&quot;{% url 'Auto:acquisto_auto' auto.pk %}&quot; class=&quot;btn btn-success me-2 {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&quot; role=&quot;button&quot; aria-disabled=&quot;{% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}true{% else %}false{% endif %}&quot;&gt;Compra&lt;/a&gt;&#10;                                            {% if is_utente %}&#10;                                                &lt;a href=&quot;#&quot; data-bs-toggle=&quot;modal&quot; data-bs-target=&quot;#affittoModal&quot; class=&quot;btn btn-primary me-2 {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&quot; role=&quot;button&quot; aria-disabled=&quot;{% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}true{% else %}false{% endif %}&quot;&gt;Affitta&lt;/a&gt;&#10;                                                &lt;a href=&quot;{% url 'Auto:prenota_auto' auto.pk %}&quot; class=&quot;btn btn-warning me-2 {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&quot; role=&quot;button&quot; aria-disabled=&quot;{% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}true{% else %}false{% endif %}&quot;&gt;Prenota&lt;/a&gt;&#10;                                            {% endif %}&#10;                                            &lt;a href=&quot;{% url 'Auto:contrattazione_auto' auto.pk %}&quot; class=&quot;btn btn-info me-2 {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&quot; role=&quot;button&quot; aria-disabled=&quot;{% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}true{% else %}false{% endif %}&quot;&gt;Contratta&lt;/a&gt;&#10;                                        {% endif %}&#10;                                    {% endif %}&#10;                                {% endif %}&#10;                            &lt;/form&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {# SEZIONE COMMENTI #}&#10;            &lt;div class=&quot;card mt-4&quot; style =&quot;width: 100%;&quot;&gt;&#10;                &lt;div class=&quot;card-header&quot;&gt;&lt;strong&gt;Commenti&lt;/strong&gt;&lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot; style=&quot;width: 100%;&quot;&gt;&#10;                    {% if is_utente and not auto.user_auto == user %}&#10;                        &lt;form method=&quot;post&quot; action=&quot;{% url 'Utente:crea_commento' %}&quot;&gt;&#10;                            {% csrf_token %}&#10;                            &lt;div class=&quot;mb-3&quot;&gt;&#10;                                &lt;textarea name=&quot;testo&quot; class=&quot;form-control&quot; rows=&quot;2&quot; placeholder=&quot;Scrivi un commento...&quot;&gt;&lt;/textarea&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;input type=&quot;hidden&quot; name=&quot;auto_id&quot; value=&quot;{{ auto.pk }}&quot;&gt;&#10;                            &lt;button type=&quot;submit&quot; class=&quot;btn btn-outline-primary&quot;&gt;Invia commento&lt;/button&gt;&#10;                        &lt;/form&gt;&#10;                        &lt;hr&gt;&#10;                    {% endif %}&#10;                    {% for commento in auto.commenti.all %}&#10;                        &lt;div class=&quot;mb-3 border-bottom pb-2&quot;&gt;&#10;                            &lt;div&gt;&lt;strong&gt;{{ commento.user.username }}&lt;/strong&gt; &lt;span class=&quot;text-muted small&quot;&gt;{{ commento.data_creazione|date:'d/m/Y H:i' }}&lt;/span&gt;&lt;/div&gt;&#10;                            &lt;div&gt;{{ commento.testo }}&lt;/div&gt;&#10;                            &lt;div class=&quot;mt-2&quot;&gt;&#10;                                {% if user.is_authenticated and auto.user_auto == user %}&#10;                                    &lt;a href=&quot;#&quot; class=&quot;btn btn-sm btn-outline-secondary me-2&quot; onclick=&quot;event.stopPropagation();&quot;&gt;Rispondi&lt;/a&gt;&#10;                                {% endif %}&#10;                                {% if user.is_authenticated and not commento.user.concessionaria_profile %}&#10;                                    &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-danger&quot; onclick=&quot;apriPopupSegnalazione({{ commento.id }})&quot;&gt;Segnala&lt;/button&gt;&#10;                                {% endif %}&#10;                            &lt;/div&gt;&#10;                            &lt;!-- Pop-up segnalazione completamente nuovo --&gt;&#10;                            &lt;div id=&quot;popup-segnalazione-{{ commento.id }}&quot; class=&quot;popup-segnalazione-overlay&quot; style=&quot;display:none;&quot;&gt;&#10;                                &lt;div class=&quot;popup-segnalazione-box&quot; onclick=&quot;event.stopPropagation();&quot;&gt;&#10;                                    &lt;h5&gt;Conferma segnalazione&lt;/h5&gt;&#10;                                    &lt;p&gt;Vuoi davvero segnalare questo commento?&lt;/p&gt;&#10;                                    &lt;div class=&quot;mt-2 p-2 border rounded bg-light&quot;&gt;{{ commento.testo }}&lt;/div&gt;&#10;                                    &lt;div class=&quot;mt-3 text-end&quot;&gt;&#10;                                        &lt;button type=&quot;button&quot; onclick=&quot;chiudiPopupSegnalazione({{ commento.id }})&quot; style=&quot;margin-right:10px;&quot;&gt;Annulla&lt;/button&gt;&#10;                                        &lt;button type=&quot;button&quot; onclick=&quot;confermaSegnalazione({{ commento.id }})&quot; style=&quot;background:#dc3545;color:#fff;border:none;padding:8px 16px;border-radius:5px;&quot;&gt;Conferma segnalazione&lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            {% for risposta in commento.risposte.all %}&#10;                                &lt;div class=&quot;ms-4 mt-2 border-start ps-2&quot;&gt;&#10;                                    &lt;div&gt;&lt;strong&gt;{{ risposta.user.username }}&lt;/strong&gt; &lt;span class=&quot;text-muted small&quot;&gt;{{ risposta.data_creazione|date:'d/m/Y H:i' }}&lt;/span&gt;&lt;/div&gt;&#10;                                    &lt;div&gt;{{ risposta.testo }}&lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            {% endfor %}&#10;                            {% if user.is_authenticated and auto.user_auto == user %}&#10;                            &lt;div class=&quot;ms-4 mt-2&quot;&gt;&#10;                                &lt;form class=&quot;ajax-risposta-form&quot; data-commento-id=&quot;{{ commento.id }}&quot; method=&quot;post&quot; action=&quot;{% url 'Utente:crea_risposta' %}?commento_id={{ commento.id }}&quot; autocomplete=&quot;off&quot;&gt;&#10;                                    {% csrf_token %}&#10;                                    &lt;div class=&quot;input-group mb-2&quot;&gt;&#10;                                        &lt;textarea name=&quot;testo&quot; class=&quot;form-control&quot; rows=&quot;2&quot; placeholder=&quot;Scrivi una risposta...&quot; required style=&quot;resize: none;&quot;&gt;&lt;/textarea&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-success ms-2&quot;&gt;Rispondi&lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/form&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;script&gt;&#10;                              document.addEventListener('DOMContentLoaded', function() {&#10;                                var form = document.querySelector('.ajax-risposta-form[data-commento-id=&quot;{{ commento.id }}&quot;]');&#10;                                if(form) {&#10;                                  form.addEventListener('submit', function(e) {&#10;                                    e.preventDefault();&#10;                                    var formData = new FormData(form);&#10;                                    fetch(form.action, {&#10;                                      method: 'POST',&#10;                                      headers: {&#10;                                        'X-Requested-With': 'XMLHttpRequest',&#10;                                      },&#10;                                      body: formData&#10;                                    })&#10;                                    .then(response =&gt; response.json())&#10;                                    .then(data =&gt; {&#10;                                      if(data.success) {&#10;                                        var risposteContainer = form.parentNode.parentNode;&#10;                                        var rispostaHtml = `&lt;div class=\&quot;ms-4 mt-2 border-start ps-2\&quot;&gt;&lt;div&gt;&lt;strong&gt;${data.username}&lt;/strong&gt; &lt;span class=\&quot;text-muted small\&quot;&gt;${data.data_creazione}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;${data.testo}&lt;/div&gt;&lt;/div&gt;`;&#10;                                        risposteContainer.insertAdjacentHTML('beforeend', rispostaHtml);&#10;                                        form.reset();&#10;                                      } else {&#10;                                        alert('Errore: ' + (data.error || 'Impossibile salvare la risposta.'));&#10;                                      }&#10;                                    })&#10;                                    .catch(() =&gt; alert('Errore di rete.'));&#10;                                  });&#10;                                }&#10;                              });&#10;                            &lt;/script&gt;&#10;                            {% endif %}&#10;                        &lt;/div&gt;&#10;                    {% empty %}&#10;                        &lt;div class=&quot;text-muted&quot;&gt;Nessun commento presente.&lt;/div&gt;&#10;                    {% endfor %}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {# BOTTONE STICKY #}&#10;            {% if user.is_authenticated %}&#10;                &lt;a href=&quot;{% url 'Auto:user_autos' %}&quot; class=&quot;btn btn-secondary position-fixed&quot; style=&quot;bottom: 30px; right: 30px; z-index: 9999;&quot;&gt;Torna alla schermata dei veicoli&lt;/a&gt;&#10;            {% endif %}&#10;            {# BOTTONE TORNA ALLA HOME #}&#10;            &lt;a href=&quot;{% url 'Autosalone:home' %}&quot; class=&quot;btn btn-secondary position-fixed&quot; style=&quot;bottom: 30px; right: 300px; z-index: 9999;&quot;&gt;Torna alla schermata iniziale&lt;/a&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Modal Affitto --&gt;&#10;&lt;div class=&quot;modal fade&quot; id=&quot;affittoModal&quot; tabindex=&quot;-1&quot; aria-labelledby=&quot;affittoModalLabel&quot; aria-hidden=&quot;true&quot;&gt;&#10;  &lt;div class=&quot;modal-dialog&quot;&gt;&#10;    &lt;div class=&quot;modal-content&quot;&gt;&#10;      &lt;form method=&quot;post&quot; action=&quot;{% url 'Auto:affitta_auto' auto.pk %}&quot;&gt;&#10;        {% csrf_token %}&#10;        &lt;div class=&quot;modal-header&quot;&gt;&#10;          &lt;h5 class=&quot;modal-title&quot; id=&quot;affittoModalLabel&quot;&gt;Affitta l'auto&lt;/h5&gt;&#10;          &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;/button&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;modal-body&quot;&gt;&#10;          &lt;div class=&quot;mb-3&quot;&gt;&#10;            &lt;label for=&quot;data_inizio&quot; class=&quot;form-label&quot;&gt;Data inizio&lt;/label&gt;&#10;            &lt;input type=&quot;date&quot; class=&quot;form-control&quot; id=&quot;data_inizio&quot; name=&quot;data_inizio&quot; required&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;mb-3&quot;&gt;&#10;            &lt;label for=&quot;data_fine&quot; class=&quot;form-label&quot;&gt;Data fine&lt;/label&gt;&#10;            &lt;input type=&quot;date&quot; class=&quot;form-control&quot; id=&quot;data_fine&quot; name=&quot;data_fine&quot; required&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;mb-3&quot;&gt;&#10;            &lt;label class=&quot;form-label&quot;&gt;Totale:&lt;/label&gt;&#10;            &lt;span id=&quot;totaleAffitto&quot;&gt;0&lt;/span&gt; €&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;modal-footer&quot;&gt;&#10;          &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-bs-dismiss=&quot;modal&quot;&gt;Annulla&lt;/button&gt;&#10;          &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Conferma Affitto&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;&lt;script&gt;&#10;  // Prezzo giornaliero passato dal backend, esempio:&#10;  const prezzoGiornaliero = {{ auto.affitto.first.prezzo_affitto|default:50 }};&#10;  const totaleSpan = document.getElementById('totaleAffitto');&#10;  function calcolaTotale() {&#10;    const inizio = document.getElementById('data_inizio').value;&#10;    const fine = document.getElementById('data_fine').value;&#10;    if (inizio &amp;&amp; fine) {&#10;      const start = new Date(inizio);&#10;      const end = new Date(fine);&#10;      const diff = (end - start) / (1000 * 60 * 60 * 24) + 1;&#10;      if (diff &gt; 0) {&#10;        totaleSpan.textContent = diff * prezzoGiornaliero;&#10;      } else {&#10;        totaleSpan.textContent = 0;&#10;      }&#10;    } else {&#10;      totaleSpan.textContent = 0;&#10;    }&#10;  }&#10;  document.getElementById('data_inizio').addEventListener('change', calcolaTotale);&#10;  document.getElementById('data_fine').addEventListener('change', calcolaTotale);&#10;&lt;/script&gt;&#10;&lt;style&gt;&#10;.popup-segnalazione-overlay {&#10;    position: fixed;&#10;    top: 0; left: 0; right: 0; bottom: 0;&#10;    background: rgba(0,0,0,0.4);&#10;    z-index: 9999;&#10;    display: none;&#10;    align-items: center;&#10;    justify-content: center;&#10;}&#10;.popup-segnalazione-overlay.attivo {&#10;    display: flex !important;&#10;}&#10;.popup-segnalazione-box {&#10;    background: #fff;&#10;    padding: 2rem;&#10;    border-radius: 10px;&#10;    box-shadow: 0 2px 10px rgba(0,0,0,0.2);&#10;    min-width: 300px;&#10;    max-width: 90vw;&#10;}&#10;&lt;/style&gt;&#10;&lt;script&gt;&#10;function apriPopupSegnalazione(id) {&#10;    var el = document.getElementById('popup-segnalazione-' + id);&#10;    if(el) {&#10;        el.classList.add('attivo');&#10;        el.onclick = function(e) {&#10;            if(e.target === el) chiudiPopupSegnalazione(id);&#10;        };&#10;    }&#10;}&#10;function chiudiPopupSegnalazione(id) {&#10;    var el = document.getElementById('popup-segnalazione-' + id);&#10;    if(el) {&#10;        el.classList.remove('attivo');&#10;        el.onclick = null;&#10;    }&#10;}&#10;function confermaSegnalazione(id) {&#10;    window.location.href = '/Utente/segnalazione/crea/?commento_id=' + id;&#10;}&#10;&lt;/script&gt;&#10;{% endblock %}&#10;" />
              <option name="updatedContent" value="{% extends 'base.html' %}&#10;{% block content %}&#10;&lt;div class=&quot;container-fluid py-5&quot; style=&quot;width:100%;&quot;&gt;&#10;    &lt;div class=&quot;row justify-content-center&quot;&gt;&#10;        &lt;div class=&quot;col-12 col-xl-12 col-xxl-11&quot; style=&quot;max-width: 1200px; padding-left: 150px; padding-right: 150px; width: 100%;&quot;&gt;&#10;            {# ALERT STATO AUTO #}&#10;&#10;            {% if auto.disponibilita == 3 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente in contrattazione&lt;/div&gt;&#10;            {% elif auto.disponibilita == 4 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente in contrattazione&lt;/div&gt;&#10;            {% elif auto.disponibilita == 5 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente in contrattazione&lt;/div&gt;&#10;            {% elif auto.disponibilita == 6 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente prenotata&lt;/div&gt;&#10;            {% elif auto.disponibilita == 7 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente in affitto&lt;/div&gt;&#10;            {% endif %}&#10;            &lt;div class=&quot;card shadow-lg border-0 rounded-4&quot; style=&quot;margin-top: 20px; margin-bottom: 20px; width: 150%; margin-left: -25%;&quot;&gt;&#10;                &lt;div class=&quot;row g-0&quot;&gt;&#10;                    {% if auto.immagine %}&#10;                    &lt;div class=&quot;col-md-5 d-flex align-items-center justify-content-center p-3&quot;&gt;&#10;                        &lt;img src=&quot;{{ auto.immagine.url }}&quot; class=&quot;img-fluid rounded-4 w-100&quot; alt=&quot;{{ auto.marca }} {{ auto.modello }}&quot;&gt;&#10;                    &lt;/div&gt;&#10;                    {% endif %}&#10;                    &lt;div class=&quot;col-md-7 p-4&quot;&gt;&#10;                        &lt;h2 class=&quot;fw-bold mb-3&quot;&gt;{{ auto.marca }} {{ auto.modello }}&lt;/h2&gt;&#10;                        &lt;ul class=&quot;list-group list-group-flush mb-3&quot;&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Anno:&lt;/strong&gt; {{ auto.anno }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Cilindrata:&lt;/strong&gt; {{ auto.cilindrata }} cc&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Carburante:&lt;/strong&gt; {{ auto.get_carburante_display }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Cambio:&lt;/strong&gt; {{ auto.get_cambio_display }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Trazione:&lt;/strong&gt; {{ auto.get_trazione_display }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Chilometraggio:&lt;/strong&gt; {{ auto.chilometraggio|default:'N/A' }} km&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Disponibilità:&lt;/strong&gt; {{ auto.get_disponibilita_display }}&lt;/li&gt;&#10;                        &lt;/ul&gt;&#10;                        {% if auto.descrizione %}&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;strong&gt;Descrizione:&lt;/strong&gt;&#10;                            &lt;p&gt;{{ auto.descrizione }}&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        {% endif %}&#10;                        {# BOTTONI AZIONE #}&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;&#10;                                {% csrf_token %}&#10;                                {% if user.is_authenticated %}&#10;                                    {% if is_in_disponibilita %}&#10;                                        {% if user.id != auto.user_auto.id %}&#10;                                            &lt;a href=&quot;{% url 'Auto:acquisto_auto' auto.pk %}&quot; class=&quot;btn btn-success me-2 {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&quot; role=&quot;button&quot; aria-disabled=&quot;{% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}true{% else %}false{% endif %}&quot;&gt;Compra&lt;/a&gt;&#10;                                            {% if is_utente %}&#10;                                                &lt;a href=&quot;#&quot; data-bs-toggle=&quot;modal&quot; data-bs-target=&quot;#affittoModal&quot; class=&quot;btn btn-primary me-2 {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&quot; role=&quot;button&quot; aria-disabled=&quot;{% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}true{% else %}false{% endif %}&quot;&gt;Affitta&lt;/a&gt;&#10;                                                &lt;a href=&quot;{% url 'Auto:prenota_auto' auto.pk %}&quot; class=&quot;btn btn-warning me-2 {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&quot; role=&quot;button&quot; aria-disabled=&quot;{% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}true{% else %}false{% endif %}&quot;&gt;Prenota&lt;/a&gt;&#10;                                            {% endif %}&#10;                                            &lt;a href=&quot;{% url 'Auto:contrattazione_auto' auto.pk %}&quot; class=&quot;btn btn-info me-2 {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&quot; role=&quot;button&quot; aria-disabled=&quot;{% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}true{% else %}false{% endif %}&quot;&gt;Contratta&lt;/a&gt;&#10;                                        {% endif %}&#10;                                    {% endif %}&#10;                                {% endif %}&#10;                            &lt;/form&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {# SEZIONE COMMENTI #}&#10;            &lt;div class=&quot;card mt-4&quot; style =&quot;width: 100%;&quot;&gt;&#10;                &lt;div class=&quot;card-header&quot;&gt;&lt;strong&gt;Commenti&lt;/strong&gt;&lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot; style=&quot;width: 100%;&quot;&gt;&#10;                    {% if is_utente and not auto.user_auto == user %}&#10;                        &lt;form method=&quot;post&quot; action=&quot;{% url 'Utente:crea_commento' %}&quot;&gt;&#10;                            {% csrf_token %}&#10;                            &lt;div class=&quot;mb-3&quot;&gt;&#10;                                &lt;textarea name=&quot;testo&quot; class=&quot;form-control&quot; rows=&quot;2&quot; placeholder=&quot;Scrivi un commento...&quot;&gt;&lt;/textarea&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;input type=&quot;hidden&quot; name=&quot;auto_id&quot; value=&quot;{{ auto.pk }}&quot;&gt;&#10;                            &lt;button type=&quot;submit&quot; class=&quot;btn btn-outline-primary&quot;&gt;Invia commento&lt;/button&gt;&#10;                        &lt;/form&gt;&#10;                        &lt;hr&gt;&#10;                    {% endif %}&#10;                    {% for commento in auto.commenti.all %}&#10;                        &lt;div class=&quot;mb-3 border-bottom pb-2&quot;&gt;&#10;                            &lt;div&gt;&lt;strong&gt;{{ commento.user.username }}&lt;/strong&gt; &lt;span class=&quot;text-muted small&quot;&gt;{{ commento.data_creazione|date:'d/m/Y H:i' }}&lt;/span&gt;&lt;/div&gt;&#10;                            &lt;div&gt;{{ commento.testo }}&lt;/div&gt;&#10;                            &lt;div class=&quot;mt-2&quot;&gt;&#10;                                {% if user.is_authenticated and auto.user_auto == user %}&#10;                                    &lt;a href=&quot;#&quot; class=&quot;btn btn-sm btn-outline-secondary me-2&quot; onclick=&quot;event.stopPropagation();&quot;&gt;Rispondi&lt;/a&gt;&#10;                                {% endif %}&#10;                                {% if user.is_authenticated and not commento.user.concessionaria_profile %}&#10;                                    &lt;a href=&quot;{% url 'Utente:crea_segnalazione' %}?commento_id={{ commento.id }}&quot; class=&quot;btn btn-sm btn-outline-danger&quot;&gt;Segnala&lt;/a&gt;&#10;                                {% endif %}&#10;                            &lt;/div&gt;&#10;                            {% for risposta in commento.risposte.all %}&#10;                                &lt;div class=&quot;ms-4 mt-2 border-start ps-2&quot;&gt;&#10;                                    &lt;div&gt;&lt;strong&gt;{{ risposta.user.username }}&lt;/strong&gt; &lt;span class=&quot;text-muted small&quot;&gt;{{ risposta.data_creazione|date:'d/m/Y H:i' }}&lt;/span&gt;&lt;/div&gt;&#10;                                    &lt;div&gt;{{ risposta.testo }}&lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            {% endfor %}&#10;                            {% if user.is_authenticated and auto.user_auto == user %}&#10;                            &lt;div class=&quot;ms-4 mt-2&quot;&gt;&#10;                                &lt;form class=&quot;ajax-risposta-form&quot; data-commento-id=&quot;{{ commento.id }}&quot; method=&quot;post&quot; action=&quot;{% url 'Utente:crea_risposta' %}?commento_id={{ commento.id }}&quot; autocomplete=&quot;off&quot;&gt;&#10;                                    {% csrf_token %}&#10;                                    &lt;div class=&quot;input-group mb-2&quot;&gt;&#10;                                        &lt;textarea name=&quot;testo&quot; class=&quot;form-control&quot; rows=&quot;2&quot; placeholder=&quot;Scrivi una risposta...&quot; required style=&quot;resize: none;&quot;&gt;&lt;/textarea&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-success ms-2&quot;&gt;Rispondi&lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/form&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;script&gt;&#10;                              document.addEventListener('DOMContentLoaded', function() {&#10;                                var form = document.querySelector('.ajax-risposta-form[data-commento-id=&quot;{{ commento.id }}&quot;]');&#10;                                if(form) {&#10;                                  form.addEventListener('submit', function(e) {&#10;                                    e.preventDefault();&#10;                                    var formData = new FormData(form);&#10;                                    fetch(form.action, {&#10;                                      method: 'POST',&#10;                                      headers: {&#10;                                        'X-Requested-With': 'XMLHttpRequest',&#10;                                      },&#10;                                      body: formData&#10;                                    })&#10;                                    .then(response =&gt; response.json())&#10;                                    .then(data =&gt; {&#10;                                      if(data.success) {&#10;                                        var risposteContainer = form.parentNode.parentNode;&#10;                                        var rispostaHtml = `&lt;div class=\&quot;ms-4 mt-2 border-start ps-2\&quot;&gt;&lt;div&gt;&lt;strong&gt;${data.username}&lt;/strong&gt; &lt;span class=\&quot;text-muted small\&quot;&gt;${data.data_creazione}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;${data.testo}&lt;/div&gt;&lt;/div&gt;`;&#10;                                        risposteContainer.insertAdjacentHTML('beforeend', rispostaHtml);&#10;                                        form.reset();&#10;                                      } else {&#10;                                        alert('Errore: ' + (data.error || 'Impossibile salvare la risposta.'));&#10;                                      }&#10;                                    })&#10;                                    .catch(() =&gt; alert('Errore di rete.'));&#10;                                  });&#10;                                }&#10;                              });&#10;                            &lt;/script&gt;&#10;                            {% endif %}&#10;                        &lt;/div&gt;&#10;                    {% empty %}&#10;                        &lt;div class=&quot;text-muted&quot;&gt;Nessun commento presente.&lt;/div&gt;&#10;                    {% endfor %}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {# BOTTONE STICKY #}&#10;            {% if user.is_authenticated %}&#10;                &lt;a href=&quot;{% url 'Auto:user_autos' %}&quot; class=&quot;btn btn-secondary position-fixed&quot; style=&quot;bottom: 30px; right: 30px; z-index: 9999;&quot;&gt;Torna alla schermata dei veicoli&lt;/a&gt;&#10;            {% endif %}&#10;            {# BOTTONE TORNA ALLA HOME #}&#10;            &lt;a href=&quot;{% url 'Autosalone:home' %}&quot; class=&quot;btn btn-secondary position-fixed&quot; style=&quot;bottom: 30px; right: 300px; z-index: 9999;&quot;&gt;Torna alla schermata iniziale&lt;/a&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Modal Affitto --&gt;&#10;&lt;div class=&quot;modal fade&quot; id=&quot;affittoModal&quot; tabindex=&quot;-1&quot; aria-labelledby=&quot;affittoModalLabel&quot; aria-hidden=&quot;true&quot;&gt;&#10;  &lt;div class=&quot;modal-dialog&quot;&gt;&#10;    &lt;div class=&quot;modal-content&quot;&gt;&#10;      &lt;form method=&quot;post&quot; action=&quot;{% url 'Auto:affitta_auto' auto.pk %}&quot;&gt;&#10;        {% csrf_token %}&#10;        &lt;div class=&quot;modal-header&quot;&gt;&#10;          &lt;h5 class=&quot;modal-title&quot; id=&quot;affittoModalLabel&quot;&gt;Affitta l'auto&lt;/h5&gt;&#10;          &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;/button&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;modal-body&quot;&gt;&#10;          &lt;div class=&quot;mb-3&quot;&gt;&#10;            &lt;label for=&quot;data_inizio&quot; class=&quot;form-label&quot;&gt;Data inizio&lt;/label&gt;&#10;            &lt;input type=&quot;date&quot; class=&quot;form-control&quot; id=&quot;data_inizio&quot; name=&quot;data_inizio&quot; required&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;mb-3&quot;&gt;&#10;            &lt;label for=&quot;data_fine&quot; class=&quot;form-label&quot;&gt;Data fine&lt;/label&gt;&#10;            &lt;input type=&quot;date&quot; class=&quot;form-control&quot; id=&quot;data_fine&quot; name=&quot;data_fine&quot; required&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;mb-3&quot;&gt;&#10;            &lt;label class=&quot;form-label&quot;&gt;Totale:&lt;/label&gt;&#10;            &lt;span id=&quot;totaleAffitto&quot;&gt;0&lt;/span&gt; €&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;modal-footer&quot;&gt;&#10;          &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-bs-dismiss=&quot;modal&quot;&gt;Annulla&lt;/button&gt;&#10;          &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Conferma Affitto&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;&lt;script&gt;&#10;  // Prezzo giornaliero passato dal backend, esempio:&#10;  const prezzoGiornaliero = {{ auto.affitto.first.prezzo_affitto|default:50 }};&#10;  const totaleSpan = document.getElementById('totaleAffitto');&#10;  function calcolaTotale() {&#10;    const inizio = document.getElementById('data_inizio').value;&#10;    const fine = document.getElementById('data_fine').value;&#10;    if (inizio &amp;&amp; fine) {&#10;      const start = new Date(inizio);&#10;      const end = new Date(fine);&#10;      const diff = (end - start) / (1000 * 60 * 60 * 24) + 1;&#10;      if (diff &gt; 0) {&#10;        totaleSpan.textContent = diff * prezzoGiornaliero;&#10;      } else {&#10;        totaleSpan.textContent = 0;&#10;      }&#10;    } else {&#10;      totaleSpan.textContent = 0;&#10;    }&#10;  }&#10;  document.getElementById('data_inizio').addEventListener('change', calcolaTotale);&#10;  document.getElementById('data_fine').addEventListener('change', calcolaTotale);&#10;&lt;/script&gt;&#10;&lt;style&gt;&#10;.popup-segnalazione-overlay {&#10;    position: fixed;&#10;    top: 0; left: 0; right: 0; bottom: 0;&#10;    background: rgba(0,0,0,0.4);&#10;    z-index: 9999;&#10;    display: none;&#10;    align-items: center;&#10;    justify-content: center;&#10;}&#10;.popup-segnalazione-overlay.attivo {&#10;    display: flex !important;&#10;}&#10;.popup-segnalazione-box {&#10;    background: #fff;&#10;    padding: 2rem;&#10;    border-radius: 10px;&#10;    box-shadow: 0 2px 10px rgba(0,0,0,0.2);&#10;    min-width: 300px;&#10;    max-width: 90vw;&#10;}&#10;&lt;/style&gt;&#10;&lt;script&gt;&#10;function apriPopupSegnalazione(id) {&#10;    var el = document.getElementById('popup-segnalazione-' + id);&#10;    if(el) {&#10;        el.classList.add('attivo');&#10;        el.onclick = function(e) {&#10;            if(e.target === el) chiudiPopupSegnalazione(id);&#10;        };&#10;    }&#10;}&#10;function chiudiPopupSegnalazione(id) {&#10;    var el = document.getElementById('popup-segnalazione-' + id);&#10;    if(el) {&#10;        el.classList.remove('attivo');&#10;        el.onclick = null;&#10;    }&#10;}&#10;function confermaSegnalazione(id) {&#10;    window.location.href = '/Utente/segnalazione/crea/?commento_id=' + id;&#10;}&#10;&lt;/script&gt;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Utente/conferma_segnalazione.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Utente/conferma_segnalazione.html" />
              <option name="originalContent" value="{% extends 'base.html' %}&#10;{% block content %}&#10;&lt;div class=&quot;container py-5&quot;&gt;&#10;    &lt;div class=&quot;row justify-content-center&quot;&gt;&#10;        &lt;div class=&quot;col-md-8&quot;&gt;&#10;            &lt;div class=&quot;card shadow-lg border-0 rounded-4&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-danger text-white rounded-top-4 d-flex align-items-center&quot;&gt;&#10;                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;32&quot; height=&quot;32&quot; fill=&quot;currentColor&quot; class=&quot;bi bi-exclamation-triangle-fill me-2&quot; viewBox=&quot;0 0 16 16&quot;&gt;&#10;                      &lt;path d=&quot;M8.982 1.566a1.13 1.13 0 0 0-1.964 0L.165 13.233c-.457.778.091 1.767.982 1.767h13.707c.89 0 1.438-.99.982-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1-2.002 0 1 1 0 0 1 2.002 0z&quot;/&gt;&#10;                    &lt;/svg&gt;&#10;                    &lt;h4 class=&quot;mb-0&quot;&gt;Conferma segnalazione&lt;/h4&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    &lt;p class=&quot;fs-5&quot;&gt;Vuoi davvero segnalare questo commento?&lt;/p&gt;&#10;                    &lt;div class=&quot;mb-3 p-3 border rounded bg-light&quot;&gt;&#10;                        &lt;span class=&quot;fw-bold text-danger&quot;&gt;Commento di {{ commento.user.username }}:&lt;/span&gt;&lt;br&gt;&#10;                        &lt;span class=&quot;fst-italic&quot;&gt;{{ commento.testo }}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;form method=&quot;post&quot;&gt;&#10;                        {% csrf_token %}&#10;                        &lt;input type=&quot;hidden&quot; name=&quot;commento_id&quot; value=&quot;{{ commento.id }}&quot;&gt;&#10;                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-danger px-4 py-2 shadow-sm&quot;&gt;Conferma segnalazione&lt;/button&gt;&#10;                        &lt;a href=&quot;{{ request.META.HTTP_REFERER|default:'/' }}&quot; class=&quot;btn btn-outline-secondary ms-2 px-4 py-2&quot;&gt;Annulla&lt;/a&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;{% endblock %}&#10;" />
              <option name="updatedContent" value="{% extends 'base.html' %}&#13;&#10;{% block content %}&#13;&#10;&lt;div class=&quot;container py-5&quot;&gt;&#13;&#10;    &lt;div class=&quot;row justify-content-center&quot;&gt;&#13;&#10;        &lt;div class=&quot;col-md-8&quot;&gt;&#13;&#10;            &lt;div class=&quot;card shadow-lg border-0 rounded-4&quot;&gt;&#13;&#10;                &lt;div class=&quot;card-header bg-danger text-white rounded-top-4 d-flex align-items-center&quot;&gt;&#13;&#10;                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;32&quot; height=&quot;32&quot; fill=&quot;currentColor&quot; class=&quot;bi bi-exclamation-triangle-fill me-2&quot; viewBox=&quot;0 0 16 16&quot;&gt;&#13;&#10;                      &lt;path d=&quot;M8.982 1.566a1.13 1.13 0 0 0-1.964 0L.165 13.233c-.457.778.091 1.767.982 1.767h13.707c.89 0 1.438-.99.982-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1-2.002 0 1 1 0 0 1 2.002 0z&quot;/&gt;&#13;&#10;                    &lt;/svg&gt;&#13;&#10;                    &lt;h4 class=&quot;mb-0&quot;&gt;Conferma segnalazione&lt;/h4&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#13;&#10;                    &lt;p class=&quot;fs-5&quot;&gt;Vuoi davvero segnalare questo commento?&lt;/p&gt;&#13;&#10;                    &lt;div class=&quot;mb-3 p-3 border rounded bg-light&quot;&gt;&#13;&#10;                        &lt;span class=&quot;fw-bold text-danger&quot;&gt;Commento di {{ commento.user.username }}:&lt;/span&gt;&lt;br&gt;&#13;&#10;                        &lt;span class=&quot;fst-italic&quot;&gt;{{ commento.testo }}&lt;/span&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                    &lt;form method=&quot;post&quot;&gt;&#13;&#10;                        {% csrf_token %}&#13;&#10;                        &lt;input type=&quot;hidden&quot; name=&quot;commento_id&quot; value=&quot;{{ commento.id }}&quot;&gt;&#13;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#13;&#10;                            &lt;label for=&quot;motivo&quot; class=&quot;form-label&quot;&gt;Motivazione della segnalazione&lt;/label&gt;&#13;&#10;                            &lt;textarea name=&quot;motivo&quot; id=&quot;motivo&quot; class=&quot;form-control&quot; rows=&quot;3&quot; placeholder=&quot;Spiega il motivo della segnalazione...&quot; required&gt;&lt;/textarea&gt;&#13;&#10;                        &lt;/div&gt;&#13;&#10;                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-danger px-4 py-2 shadow-sm&quot;&gt;Conferma segnalazione&lt;/button&gt;&#13;&#10;                        &lt;a href=&quot;{{ request.META.HTTP_REFERER|default:'/' }}&quot; class=&quot;btn btn-outline-secondary ms-2 px-4 py-2&quot;&gt;Annulla&lt;/a&gt;&#13;&#10;                    &lt;/form&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&lt;/div&gt;&#13;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Drusi/Progetto_TecWeb/Autosaloon_Modena/apps/Auto/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Drusi/Progetto_TecWeb/Autosaloon_Modena/apps/Auto/views.py" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/Utente/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/Utente/views.py" />
              <option name="updatedContent" value="# ...existing code...&#10;class SegnalazioneCreateView(CreateView):&#10;    form_class = SegnalazioneForm&#10;    template_name = 'Auto/auto_detail.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def dispatch(self, request, *args, **kwargs):&#10;        # ...existing code...&#10;        return super().dispatch(request, *args, **kwargs)&#10;&#10;    def get_context_data(self, **kwargs):&#10;        context = super().get_context_data(**kwargs)&#10;        commento_id = self.request.GET.get('commento_id') or self.request.POST.get('commento_id')&#10;        auto = None&#10;        if commento_id:&#10;            try:&#10;                commento = Commento.objects.get(id=commento_id)&#10;                auto = commento.auto&#10;            except Commento.DoesNotExist:&#10;                auto = None&#10;        context['auto'] = auto&#10;        return context&#10;&#10;    def form_valid(self, form):&#10;        commento_id = self.request.GET.get('commento_id') or self.request.POST.get('commento_id')&#10;        auto = None&#10;        if not commento_id:&#10;            messages.error(self.request, &quot;Segnalazione non valida: commento mancante.&quot;)&#10;            return redirect(self.success_url)&#10;        try:&#10;            commento = Commento.objects.get(id=commento_id)&#10;            segnalato = commento.user&#10;            auto = commento.auto&#10;            # Solo utenti normali possono essere segnalati&#10;            if hasattr(segnalato, 'concessionaria_profile'):&#10;                messages.error(self.request, &quot;Non puoi segnalare una concessionaria.&quot;)&#10;                return redirect(auto.get_absolute_url() if auto else self.success_url)&#10;            # Salva la segnalazione&#10;            segnalazione = form.save(commit=False)&#10;            segnalazione.segnalatore = self.request.user&#10;            segnalazione.segnalato = segnalato&#10;            segnalazione.motivo = form.cleaned_data['motivo']&#10;            segnalazione.save()&#10;            # Gestione ban&#10;            ban_profile, _ = UserModelBan.objects.get_or_create(user=segnalato)&#10;            ban_profile.segnalazioni = (ban_profile.segnalazioni or 0) + 1&#10;            if ban_profile.segnalazioni &gt;= 5:&#10;                now = timezone.now()&#10;                # Ban incrementale&#10;                if ban_profile.qnt_ban:&#10;                    ban_hours = 2 * (2 ** (ban_profile.qnt_ban - 1))&#10;                else:&#10;                    ban_hours = 2&#10;                ban_profile.data_inizio_ban = now&#10;                ban_profile.data_fine_ban = now + timezone.timedelta(hours=ban_hours)&#10;                ban_profile.qnt_ban = (ban_profile.qnt_ban or 0) + 1&#10;                ban_profile.segnalazioni = 0&#10;                messages.error(self.request, f&quot;Utente bannato per {ban_hours} ore!&quot;)&#10;            ban_profile.save()&#10;            messages.success(self.request, &quot;Segnalazione inviata correttamente.&quot;)&#10;        except Commento.DoesNotExist:&#10;            messages.error(self.request, &quot;Commento non trovato.&quot;)&#10;        return redirect(auto.get_absolute_url() if auto else self.success_url)&#10;&#10;    def form_invalid(self, form):&#10;        messages.error(self.request, &quot;Errore nell'invio della segnalazione.&quot;)&#10;        commento_id = self.request.GET.get('commento_id') or self.request.POST.get('commento_id')&#10;        auto = None&#10;        if commento_id:&#10;            try:&#10;                commento = Commento.objects.get(id=commento_id)&#10;                auto = commento.auto&#10;            except Commento.DoesNotExist:&#10;                auto = None&#10;        return redirect(auto.get_absolute_url() if auto else self.success_url)&#10;# ...existing code...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Auto/user_autos.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Auto/user_autos.html" />
              <option name="originalContent" value="&#10;&#10;&#10;" />
              <option name="updatedContent" value="{% extends 'base.html' %}&#10;&#10;{% block content %}&#10;&#10;                    &lt;a href=&quot;{% url 'Auto:edit_auto' auto.pk %}&quot; class=&quot;btn btn-primary btn-sm&quot;&gt;Modifica&lt;/a&gt;&#10;                    &lt;form method=&quot;post&quot; action=&quot;{% url 'Auto:delete_auto' auto.pk %}&quot; style=&quot;display:inline;&quot;&gt;&#10;                        {% csrf_token %}&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-danger btn-sm delete-auto-btn&quot;&gt;Elimina&lt;/button&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&lt;/div&gt;&#10;&#10;{% include 'Autosalone/confirm_delete_popup.html' %}&#10;&lt;script&gt;&#10;document.addEventListener('DOMContentLoaded', function() {&#10;    let formToDelete = null;&#10;    document.querySelectorAll('.delete-auto-btn').forEach(function(btn) {&#10;        btn.addEventListener('click', function(e) {&#10;            e.preventDefault();&#10;            formToDelete = btn.closest('form');&#10;            var modal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));&#10;            var confirmBtn = document.getElementById('confirmDeleteBtn');&#10;            confirmBtn.onclick = function() {&#10;                if(formToDelete) formToDelete.submit();&#10;                modal.hide();&#10;            };&#10;            modal.show();&#10;        });&#10;    });&#10;});&#10;&lt;/script&gt;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Autosalone/confirm_delete_popup.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Autosalone/confirm_delete_popup.html" />
              <option name="updatedContent" value="&lt;!-- Popup di conferma eliminazione generico e riutilizzabile --&gt;&#10;&lt;div class=&quot;modal fade&quot; id=&quot;confirmDeleteModal&quot; tabindex=&quot;-1&quot; aria-labelledby=&quot;confirmDeleteModalLabel&quot; aria-hidden=&quot;true&quot;&gt;&#10;  &lt;div class=&quot;modal-dialog modal-dialog-centered&quot;&gt;&#10;    &lt;div class=&quot;modal-content&quot;&gt;&#10;      &lt;div class=&quot;modal-header&quot;&gt;&#10;        &lt;h5 class=&quot;modal-title&quot; id=&quot;confirmDeleteModalLabel&quot;&gt;Conferma eliminazione&lt;/h5&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;modal&quot; aria-label=&quot;Chiudi&quot;&gt;&lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;modal-body&quot;&gt;&#10;        Sei sicuro di voler eliminare questo elemento? Questa azione non può essere annullata.&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;modal-footer&quot;&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-bs-dismiss=&quot;modal&quot;&gt;Annulla&lt;/button&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot; id=&quot;confirmDeleteBtn&quot;&gt;Elimina&lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Utente/impostazioni_utente_template.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Utente/impostazioni_utente_template.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/base.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/base.html" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>