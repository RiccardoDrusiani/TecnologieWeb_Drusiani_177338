<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/Autosaloon_Modena/urls.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/Autosaloon_Modena/urls.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;URL configuration for Autosaloon_Modena project.&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/5.1/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.contrib import admin&#10;from django.urls import path, include&#10;from django_registration.backends.one_step import urls as registration_urls&#10;from django.conf import settings&#10;from django.conf.urls.static import static&#10;&#10;urlpatterns = [&#10;    path('admin/', admin.site.urls),&#10;    path('', include('apps.Autosalone.urls')),&#10;    path('Utente/', include('apps.Utente.urls')),&#10;    path('Concessionaria/', include('apps.Concessionaria.urls')),&#10;    path('Auto/', include('apps.Auto.urls')),&#10;    path(&quot;accounts/&quot;, include(registration_urls)),&#10;    path(&quot;accounts/&quot;, include(&quot;django.contrib.auth.urls&quot;)),&#10;] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#13;&#10;URL configuration for Autosaloon_Modena project.&#13;&#10;&#13;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#13;&#10;    https://docs.djangoproject.com/en/5.1/topics/http/urls/&#13;&#10;Examples:&#13;&#10;Function views&#13;&#10;    1. Add an import:  from my_app import views&#13;&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#13;&#10;Class-based views&#13;&#10;    1. Add an import:  from other_app.views import Home&#13;&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#13;&#10;Including another URLconf&#13;&#10;    1. Import the include() function: from django.urls import include, path&#13;&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#13;&#10;&quot;&quot;&quot;&#13;&#10;from django.contrib import admin&#13;&#10;from django.urls import path, include&#13;&#10;from django_registration.backends.one_step import urls as registration_urls&#13;&#10;from django.conf import settings&#13;&#10;from django.conf.urls.static import static&#13;&#10;&#13;&#10;urlpatterns = [&#13;&#10;    path('admin/', admin.site.urls),&#13;&#10;    path('', include('apps.Autosalone.urls')),&#13;&#10;    path('Utente/', include(('apps.Utente.urls', 'Utente'), namespace='Utente')),&#13;&#10;    path('Concessionaria/', include('apps.Concessionaria.urls')),&#13;&#10;    path('Auto/', include('apps.Auto.urls')),&#13;&#10;    path(&quot;accounts/&quot;, include(registration_urls)),&#13;&#10;    path(&quot;accounts/&quot;, include(&quot;django.contrib.auth.urls&quot;)),&#13;&#10;] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/apps/Concessionaria/forms.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/apps/Concessionaria/forms.py" />
              <option name="originalContent" value="from django import forms&#10;from django.contrib.auth import authenticate&#10;from django.contrib.auth.models import User&#10;from django.core.exceptions import ValidationError&#10;&#10;from .models import Concessionaria&#10;&#10;class ConcessionariaLoginForm(forms.Form):&#10;    email = forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}))&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}))&#10;&#10;    def clean(self):&#10;        cleaned_data = super().clean()&#10;        email = cleaned_data.get('email')&#10;        password = cleaned_data.get('password')&#10;        if email and password:&#10;            user = authenticate(email=email, password=password)&#10;            if user is None:&#10;                raise forms.ValidationError('Email o password non validi')&#10;            cleaned_data['user'] = user&#10;        return cleaned_data&#10;&#10;    def get_user(self):&#10;        return self.cleaned_data.get('user', None)&#10;&#10;class ConcessionariaForm(forms.ModelForm):&#10;    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;    username = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;&#10;    class Meta:&#10;        model = Concessionaria&#10;        fields = ['username', 'email', 'password', 'partita_iva', 'codice_fiscale']&#10;        widgets = {&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;    def save(self, commit=True):&#10;        user = User.objects.create_user(&#10;            username=self.cleaned_data['username'],&#10;            email=self.cleaned_data['email'],&#10;            password=self.cleaned_data['password']&#10;        )&#10;        concessionaria = super().save(commit=False)&#10;        concessionaria.user = user&#10;        if commit:&#10;            concessionaria.save()&#10;        return concessionaria&#10;&#10;class ConcessionariaUpdateForm(forms.ModelForm):&#10;    class Meta:&#10;        model = Concessionaria&#10;        fields = ['partita_iva', 'codice_fiscale']&#10;        widgets = {&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;class ConcessionariaCreateForm(forms.ModelForm):&#10;    password = forms.CharField(widget=forms.PasswordInput, label=&quot;Password&quot;)&#10;    conferma_password = forms.CharField(widget=forms.PasswordInput, label=&quot;Conferma Password&quot;)&#10;    partita_iva = forms.CharField(max_length=11, label=&quot;Partita IVA&quot;)&#10;    codice_fiscale = forms.CharField(max_length=16, label=&quot;Codice Fiscale&quot;)&#10;&#10;    class Meta:&#10;        model = User&#10;        fields = ['username', 'email', 'password']&#10;&#10;    def clean(self):&#10;        cleaned_data = super().clean()&#10;        password = cleaned_data.get('password')&#10;        conferma_password = cleaned_data.get('conferma_password')&#10;        if password != conferma_password:&#10;            raise ValidationError(&quot;Le password non corrispondono.&quot;)&#10;        return cleaned_data&#10;&#10;    def clean_username(self):&#10;        username = self.cleaned_data.get('username')&#10;        if User.objects.filter(username=username).exists():&#10;            raise ValidationError(&quot;Il nome utente è già in uso. Scegli un altro nome utente.&quot;)&#10;        return username&#10;&#10;    def save(self, commit=True):&#10;        user = super().save(commit=True)&#10;        Concessionaria.objects.create(&#10;            user=user,&#10;            partita_iva=self.cleaned_data['partita_iva'],&#10;            codice_fiscale=self.cleaned_data['codice_fiscale']&#10;        )&#10;        return user&#10;" />
              <option name="updatedContent" value="from django import forms&#13;&#10;from django.contrib.auth import authenticate&#13;&#10;from django.contrib.auth.models import User&#13;&#10;from django.core.exceptions import ValidationError&#13;&#10;&#13;&#10;from .models import Concessionaria&#13;&#10;&#13;&#10;class ConcessionariaLoginForm(forms.Form):&#13;&#10;    email = forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;&#13;&#10;    def clean(self):&#13;&#10;        cleaned_data = super().clean()&#13;&#10;        email = cleaned_data.get('email')&#13;&#10;        password = cleaned_data.get('password')&#13;&#10;        if email and password:&#13;&#10;            user = authenticate(email=email, password=password)&#13;&#10;            if user is None:&#13;&#10;                raise forms.ValidationError('Email o password non validi')&#13;&#10;            cleaned_data['user'] = user&#13;&#10;        return cleaned_data&#13;&#10;&#13;&#10;    def get_user(self):&#13;&#10;        return self.cleaned_data.get('user', None)&#13;&#10;&#13;&#10;class ConcessionariaForm(forms.ModelForm):&#13;&#10;    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;    username = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;&#13;&#10;    class Meta:&#13;&#10;        model = Concessionaria&#13;&#10;        fields = ['username', 'email', 'password', 'partita_iva', 'codice_fiscale']&#13;&#10;        widgets = {&#13;&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;    def save(self, commit=True):&#13;&#10;        user = User.objects.create_user(&#13;&#10;            username=self.cleaned_data['username'],&#13;&#10;            email=self.cleaned_data['email'],&#13;&#10;            password=self.cleaned_data['password']&#13;&#10;        )&#13;&#10;        concessionaria = super().save(commit=False)&#13;&#10;        concessionaria.user = user&#13;&#10;        if commit:&#13;&#10;            concessionaria.save()&#13;&#10;        return concessionaria&#13;&#10;&#13;&#10;class ConcessionariaUpdateForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = Concessionaria&#13;&#10;        fields = ['partita_iva', 'codice_fiscale']&#13;&#10;        widgets = {&#13;&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class ConcessionariaCreateForm(forms.ModelForm):&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput, label=&quot;Password&quot;)&#13;&#10;    conferma_password = forms.CharField(widget=forms.PasswordInput, label=&quot;Conferma Password&quot;)&#13;&#10;    partita_iva = forms.CharField(max_length=11, label=&quot;Partita IVA&quot;)&#13;&#10;    codice_fiscale = forms.CharField(max_length=16, label=&quot;Codice Fiscale&quot;)&#13;&#10;&#13;&#10;    class Meta:&#13;&#10;        model = User&#13;&#10;        fields = ['username', 'email', 'password']&#13;&#10;&#13;&#10;    def clean(self):&#13;&#10;        cleaned_data = super().clean()&#13;&#10;        password = cleaned_data.get('password')&#13;&#10;        conferma_password = cleaned_data.get('conferma_password')&#13;&#10;        if password != conferma_password:&#13;&#10;            raise ValidationError(&quot;Le password non corrispondono.&quot;)&#13;&#10;        return cleaned_data&#13;&#10;&#13;&#10;    def save(self, commit=True):&#13;&#10;        user = super().save(commit=True)  # Salva l'oggetto User prima&#13;&#10;&#13;&#10;        # Creazione del modello Concessionaria&#13;&#10;        Concessionaria.objects.create(&#13;&#10;            user=user,&#13;&#10;            partita_iva=self.cleaned_data['partita_iva'],&#13;&#10;            codice_fiscale=self.cleaned_data['codice_fiscale']&#13;&#10;        )&#13;&#10;        return user" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/apps/Utente/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/apps/Utente/views.py" />
              <option name="originalContent" value="from django.shortcuts import render, redirect&#10;from django.views.generic import CreateView, UpdateView, DeleteView&#10;from django.contrib.auth.models import User, Group&#10;from django.urls import reverse_lazy&#10;from django.contrib.auth import login, authenticate&#10;from django.contrib.auth.views import LogoutView, LoginView&#10;from django.contrib import messages&#10;from .models import UserExtendModel&#10;from .form import UserCreateForm, UserExtendForm, UserUpdateForm, UserDeleteForm, CommentoForm, RispostaForm, SegnalazioneForm&#10;from apps.Auto.models import Commento, Risposta, Auto&#10;&#10;&#10;# Creazione utente base + profilo esteso&#10;class UserCreateView(CreateView):&#10;    model = User&#10;    form_class = UserCreateForm&#10;    template_name = 'Utente/registration_form.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        user = form.save(commit=False)&#10;        user.set_password(form.cleaned_data['password'])&#10;        user.save()&#10;&#10;        # Assegna l'utente al gruppo &quot;Utente&quot;&#10;        group, created = Group.objects.get_or_create(name='utente')&#10;        user.groups.add(group)&#10;&#10;        UserExtendModel.objects.create(user=user)&#10;        # Autenticazione e login automatico dopo la registrazione&#10;        user = authenticate(username=form.cleaned_data['username'], password=form.cleaned_data['password'])&#10;        if user is not None:&#10;            login(self.request, user)&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        messages.error(self.request, &quot;Errore durante la registrazione. Controlla i dati inseriti.&quot;)&#10;        return super().form_invalid(form)&#10;&#10;# Modifica utente base&#10;class UserUpdateView(UpdateView):&#10;    model = UserExtendModel&#10;    form_class = UserUpdateForm&#10;    template_name = 'Utente/update_user.html'&#10;    success_url = reverse_lazy('home')&#10;    slug_field = 'slug'&#10;    slug_url_kwarg = 'slug'&#10;&#10;# Eliminazione utente&#10;class UserDeleteView(DeleteView):&#10;    model = UserExtendModel&#10;    template_name = 'Utente/delete_user.html'&#10;    success_url = reverse_lazy('home')&#10;    slug_field = 'slug'&#10;    slug_url_kwarg = 'slug'&#10;&#10;# Creazione commento&#10;class CommentoCreateView(CreateView):&#10;    model = Commento&#10;    form_class = CommentoForm&#10;    template_name = 'Utente/create_commento.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        auto_id = self.request.POST.get('auto_id')&#10;        auto = None&#10;        if auto_id:&#10;            auto = Auto.objects.get(pk=auto_id)&#10;        commento = form.save(commit=False)&#10;        commento.user = self.request.user&#10;        commento.auto = auto&#10;        commento.save()&#10;        return redirect(auto.get_absolute_url() if auto else self.success_url)&#10;&#10;    def get_form(self, form_class=None):&#10;        form = super().get_form(form_class)&#10;        form.fields['testo'].widget.attrs['placeholder'] = 'Scrivi un commento...'&#10;        return form&#10;&#10;# Creazione risposta&#10;class RispostaCreateView(CreateView):&#10;    model = Risposta&#10;    form_class = RispostaForm&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        commento_id = self.request.GET.get('commento_id')&#10;        commento = Commento.objects.get(pk=commento_id)&#10;        risposta = form.save(commit=False)&#10;        risposta.user = self.request.user&#10;        risposta.commento = commento&#10;        risposta.save()&#10;        auto = commento.auto&#10;        return redirect(auto.get_absolute_url())&#10;&#10;    def get_form(self, form_class=None):&#10;        form = super().get_form(form_class)&#10;        form.fields['testo'].widget.attrs['placeholder'] = 'Scrivi una risposta...'&#10;        return form&#10;&#10;    def get(self, request, *args, **kwargs):&#10;        # Blocca richieste GET dirette, reindirizza alla home&#10;        return redirect('home')&#10;&#10;# Creazione segnalazione&#10;class SegnalazioneCreateView(CreateView):&#10;    form_class = SegnalazioneForm&#10;    template_name = 'Utente/create_segnalazione.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        # Qui puoi implementare la logica di salvataggio della segnalazione&#10;        # (ad esempio, incrementare un contatore o inviare una notifica)&#10;        return super().form_valid(form)&#10;&#10;# View per il logout utente&#10;class UserLogoutView(LogoutView):&#10;    next_page = 'home'&#10;&#10;# Login utente&#10;class UserLoginView(LoginView):&#10;    template_name = 'Utente/login.html'&#10;    success_url = reverse_lazy('home')&#10;    error_url = reverse_lazy('login')&#10;&#10;    def form_invalid(self, form):&#10;        messages.error(self.request, &quot;Email o password non validi.&quot;)&#10;        return redirect('login')&#10;" />
              <option name="updatedContent" value="from django.shortcuts import render, redirect&#10;from django.views.generic import CreateView, UpdateView, DeleteView&#10;from django.contrib.auth.models import User, Group&#10;from django.urls import reverse_lazy&#10;from django.contrib.auth import login, authenticate&#10;from django.contrib.auth.views import LogoutView, LoginView&#10;from django.contrib import messages&#10;from .models import UserExtendModel&#10;from .form import UserCreateForm, UserExtendForm, UserUpdateForm, UserDeleteForm, CommentoForm, RispostaForm, SegnalazioneForm&#10;from apps.Auto.models import Commento, Risposta, Auto&#10;from django.http import JsonResponse&#10;&#10;&#10;# Creazione utente base + profilo esteso&#10;class UserCreateView(CreateView):&#10;    model = User&#10;    form_class = UserCreateForm&#10;    template_name = 'Utente/registration_form.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        user = form.save(commit=False)&#10;        user.set_password(form.cleaned_data['password'])&#10;        user.save()&#10;&#10;        # Assegna l'utente al gruppo &quot;Utente&quot;&#10;        group, created = Group.objects.get_or_create(name='utente')&#10;        user.groups.add(group)&#10;&#10;        UserExtendModel.objects.create(user=user)&#10;        # Autenticazione e login automatico dopo la registrazione&#10;        user = authenticate(username=form.cleaned_data['username'], password=form.cleaned_data['password'])&#10;        if user is not None:&#10;            login(self.request, user)&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        messages.error(self.request, &quot;Errore durante la registrazione. Controlla i dati inseriti.&quot;)&#10;        return super().form_invalid(form)&#10;&#10;# Modifica utente base&#10;class UserUpdateView(UpdateView):&#10;    model = UserExtendModel&#10;    form_class = UserUpdateForm&#10;    template_name = 'Utente/update_user.html'&#10;    success_url = reverse_lazy('home')&#10;    slug_field = 'slug'&#10;    slug_url_kwarg = 'slug'&#10;&#10;# Eliminazione utente&#10;class UserDeleteView(DeleteView):&#10;    model = UserExtendModel&#10;    template_name = 'Utente/delete_user.html'&#10;    success_url = reverse_lazy('home')&#10;    slug_field = 'slug'&#10;    slug_url_kwarg = 'slug'&#10;&#10;# Creazione commento&#10;class CommentoCreateView(CreateView):&#10;    model = Commento&#10;    form_class = CommentoForm&#10;    template_name = 'Utente/create_commento.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        auto_id = self.request.POST.get('auto_id')&#10;        auto = None&#10;        if auto_id:&#10;            auto = Auto.objects.get(pk=auto_id)&#10;        commento = form.save(commit=False)&#10;        commento.user = self.request.user&#10;        commento.auto = auto&#10;        commento.save()&#10;        return redirect(auto.get_absolute_url() if auto else self.success_url)&#10;&#10;    def get_form(self, form_class=None):&#10;        form = super().get_form(form_class)&#10;        form.fields['testo'].widget.attrs['placeholder'] = 'Scrivi un commento...'&#10;        return form&#10;&#10;# Creazione risposta&#10;class RispostaCreateView(CreateView):&#10;    model = Risposta&#10;    form_class = RispostaForm&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        commento_id = self.request.GET.get('commento_id') or self.request.POST.get('commento_id')&#10;        commento = Commento.objects.get(pk=commento_id)&#10;        risposta = form.save(commit=False)&#10;        risposta.user = self.request.user&#10;        risposta.commento = commento&#10;        risposta.save()&#10;        auto = commento.auto&#10;        if self.request.headers.get('x-requested-with') == 'XMLHttpRequest':&#10;            return JsonResponse({&#10;                'success': True,&#10;                'testo': risposta.testo,&#10;                'username': risposta.user.username,&#10;                'data_creazione': risposta.data_creazione.strftime('%d/%m/%Y %H:%M'),&#10;            })&#10;        return redirect(auto.get_absolute_url())&#10;&#10;    def form_invalid(self, form):&#10;        if self.request.headers.get('x-requested-with') == 'XMLHttpRequest':&#10;            return JsonResponse({'success': False, 'error': 'Dati non validi.'})&#10;        return super().form_invalid(form)&#10;&#10;    def get_form(self, form_class=None):&#10;        form = super().get_form(form_class)&#10;        form.fields['testo'].widget.attrs['placeholder'] = 'Scrivi una risposta...'&#10;        return form&#10;&#10;    def get(self, request, *args, **kwargs):&#10;        return redirect('home')&#10;&#10;# Creazione segnalazione&#10;class SegnalazioneCreateView(CreateView):&#10;    form_class = SegnalazioneForm&#10;    template_name = 'Utente/create_segnalazione.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def form_valid(self, form):&#10;        # Qui puoi implementare la logica di salvataggio della segnalazione&#10;        # (ad esempio, incrementare un contatore o inviare una notifica)&#10;        return super().form_valid(form)&#10;&#10;# View per il logout utente&#10;class UserLogoutView(LogoutView):&#10;    next_page = 'home'&#10;&#10;# Login utente&#10;class UserLoginView(LoginView):&#10;    template_name = 'Utente/login.html'&#10;    success_url = reverse_lazy('home')&#10;    error_url = reverse_lazy('login')&#10;&#10;    def form_invalid(self, form):&#10;        messages.error(self.request, &quot;Email o password non validi.&quot;)&#10;        return redirect('login')" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/static/css/user_autos_custom.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/static/css/user_autos_custom.css" />
              <option name="originalContent" value="/* CSS personalizzato per il filtro centrale in user_autos.html */&#10;.filter-section {&#10;    background: #fff;&#10;    border-radius: 0.5rem;&#10;    box-shadow: 0 2px 16px #2563eb22;&#10;    border: 1.5px solid #e0e0e0;&#10;    margin-bottom: 2rem;&#10;    max-width: 1200px;&#10;    min-width: 700px;&#10;    width: 90vw;&#10;    margin-left: auto;&#10;    margin-right: auto;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;}&#10;.filter-section form {&#10;    width: 100%;&#10;}&#10;.filter-section .row.g-3.filter-grid {&#10;    flex-wrap: nowrap;&#10;    gap: 1.2rem;&#10;    justify-content: flex-start;&#10;}&#10;.filter-grid-custom {&#10;    display: flex;&#10;    flex-wrap: nowrap;&#10;    gap: 0.7rem;&#10;    justify-content: flex-start;&#10;}&#10;.filter-grid-custom.filter-grid-2rows {&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: 0.7rem;&#10;}&#10;.filter-row {&#10;    display: flex;&#10;    flex-direction: row;&#10;    gap: 0.7rem;&#10;}&#10;.filter-col {&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: flex-start;&#10;    width: 80px;&#10;    min-width: 60px;&#10;    max-width: 90px;&#10;    margin: 0;&#10;    padding: 0;&#10;    flex: 1 1 0;&#10;    min-width: 120px;&#10;    max-width: 220px;&#10;}&#10;.filter-section .filter-col {&#10;    flex: 1 1 0;&#10;    min-width: 120px;&#10;    max-width: 220px;&#10;    width: 100%;&#10;    /* Nuove dimensioni per riquadri più stretti e lunghi */&#10;    width: 100%;&#10;    /* Nuove dimensioni per riquadri più stretti e lunghi */&#10;    border-radius: 0.3rem !important; /* meno rotondo */&#10;    border: 1.5px solid #e0e0e0;&#10;    box-shadow: 0 1px 4px #0001;&#10;    transition: border-color 0.2s;&#10;    border-radius: 0.3rem !important; /* meno rotondo */&#10;    border: 1.5px solid #e0e0e0;&#10;    box-shadow: 0 1px 4px #0001;&#10;    transition: border-color 0.2s;&#10;    /* Altezza maggiore per input più lunghi */&#10;    height: 2.5rem;&#10;    padding: 0.3rem 0.4rem;&#10;    /* Nuove dimensioni per riquadri più stretti e lunghi */&#10;    padding: 0.3rem 0.4rem;&#10;    /* Nuove dimensioni per riquadri più stretti e lunghi */&#10;    border-radius: 0.3rem !important; /* meno rotondo */&#10;    border: 1.5px solid #e0e0e0;&#10;    box-shadow: 0 1px 4px #0001;&#10;    transition: border-color 0.2s;&#10;    /* Altezza maggiore per input più lunghi */&#10;    height: 2.5rem;&#10;    padding: 0.3rem 0.4rem;&#10;    /* Nuove dimensioni per riquadri più stretti e lunghi */&#10;    /* Nuove dimensioni per riquadri più stretti e lunghi */&#10;    /* Nuove dimensioni per riquadri più stretti e lunghi */&#10;    border-radius: 0.3rem !important; /* meno rotondo */&#10;    border: 1.5px solid #e0e0e0;&#10;    box-shadow: 0 1px 4px #0001;&#10;    transition: border-color 0.2s;&#10;    font-size: 0.92rem;&#10;    padding: 0.3rem 0.4rem;&#10;    /* Nuove dimensioni per riquadri più stretti e lunghi */&#10;    border-radius: 0.3rem !important; /* meno rotondo */&#10;    border: 1.5px solid #e0e0e0;&#10;    box-shadow: 0 1px 4px #0001;&#10;    border: 1.5px solid #e0e0e0;&#10;    box-shadow: 0 1px 4px #0001;&#10;    transition: border-color 0.2s;&#10;    /* Altezza maggiore per input più lunghi */&#10;    height: 2.5rem;&#10;    padding: 0.3rem 0.4rem;&#10;    /* Nuove dimensioni per riquadri più stretti e lunghi */&#10;    border-radius: 0.3rem !important; /* meno rotondo */&#10;    border: 1.5px solid #e0e0e0;&#10;    box-shadow: 0 1px 4px #0001;&#10;    transition: border-color 0.2s;&#10;    /* Altezza maggiore per input più lunghi */&#10;    height: 2.5rem;&#10;    padding: 0.3rem 0.4rem;&#10;    padding-right: 0;&#10;    border-radius: 0.3rem !important; /* meno rotondo */&#10;    border: 1.5px solid #e0e0e0;&#10;    box-shadow: 0 1px 4px #0001;&#10;    transition: border-color 0.2s;&#10;    /* Altezza maggiore per input più lunghi */&#10;    height: 2.5rem;&#10;    padding: 0.3rem 0.4rem;&#10;}&#10;    border-radius: 0.3rem !important; /* meno rotondo */&#10;    border: 1.5px solid #e0e0e0;&#10;    box-shadow: 0 1px 4px #0001;&#10;    transition: border-color 0.2s;&#10;    /* Altezza maggiore per input più lunghi */&#10;    height: 2.5rem;&#10;    padding: 0.3rem 0.4rem;&#10;.filter-section .form-control, .filter-section .form-select {&#10;    border-radius: 0.3rem !important; /* meno rotondo */&#10;.filter-input {&#10;    width: 100%;&#10;}&#10;.btn-primary {&#10;@media (max-width: 1300px) {&#10;    .filter-section {&#10;}&#10;@media (max-width: 900px) {&#10;    .filter-section {&#10;        min-width: 90vw !important;&#10;        max-width: 98vw !important;&#10;        padding: 1.2rem !important;&#10;    }&#10;    .filter-section .row.g-3 {&#10;        flex-direction: column;&#10;        gap: 0.7rem;&#10;    }&#10;    .filter-section .col.filter-col {&#10;        width: 100%;&#10;        margin-bottom: 0.7rem;&#10;        max-width: 100%;&#10;    }&#10;    .filter-row {&#10;        flex-direction: column;&#10;        gap: 0.7rem;&#10;    }&#10;    .filter-col {&#10;        max-width: 100%;&#10;        min-width: 0;&#10;    }&#10;}&#10;@media (min-width: 768px) {&#10;    .filter-section .filter-col {&#10;        min-width: 180px;&#10;        max-width: 320px;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/* CSS personalizzato per il filtro centrale in user_autos.html */&#10;.filter-section {&#10;    background: #fff;&#10;    border-radius: 0.5rem;&#10;    box-shadow: 0 2px 16px #2563eb22;&#10;    border: 1.5px solid #e0e0e0;&#10;    margin-bottom: 2rem;&#10;    max-width: 1200px;&#10;    min-width: 700px;&#10;    width: 90vw;&#10;    margin-left: auto;&#10;    margin-right: auto;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;}&#10;.filter-section form {&#10;    width: 100%;&#10;}&#10;.filter-section .row.g-3.filter-grid {&#10;    flex-wrap: wrap;&#10;    gap: 1.2rem 0.5rem;&#10;    justify-content: flex-start;&#10;}&#10;.filter-grid-custom {&#10;    display: flex;&#10;    flex-wrap: nowrap;&#10;    gap: 0.7rem;&#10;    justify-content: flex-start;&#10;}&#10;.filter-grid-custom.filter-grid-2rows {&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: 0.7rem;&#10;}&#10;.filter-row {&#10;    display: flex;&#10;    flex-direction: row;&#10;    gap: 0.7rem;&#10;}&#10;.filter-col {&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: flex-start;&#10;    width: 80px;&#10;    min-width: 60px;&#10;    max-width: 90px;&#10;    margin: 0;&#10;    padding: 0;&#10;    flex: 1 1 0;&#10;    min-width: 120px;&#10;    max-width: 220px;&#10;}&#10;.filter-section .filter-col {&#10;    flex: 0 0 22%;&#10;    max-width: 22%;&#10;    min-width: 180px;&#10;    padding-left: 0;&#10;    padding-right: 0;&#10;    margin-bottom: 0.5rem;&#10;}&#10;.filter-section .form-control, .filter-section .form-select {&#10;    width: 100%;&#10;    min-width: 0;&#10;    max-width: 100%;&#10;    font-size: 1rem;&#10;    padding: 0.5rem 0.7rem;&#10;    height: 2.7rem;&#10;}&#10;.filter-input {&#10;    width: 100%;&#10;    min-width: 0;&#10;    max-width: 100%;&#10;    font-size: 0.92rem;&#10;    padding: 0.3rem 0.4rem;&#10;    box-sizing: border-box;&#10;}&#10;.filter-section .form-control:focus, .filter-section .form-select:focus {&#10;    border-color: #2563eb;&#10;    box-shadow: 0 0 0 0.15rem #2563eb33;&#10;}&#10;.filter-label {&#10;    font-weight: 600;&#10;    color: #1e3a8a;&#10;    margin-bottom: 0.3rem;&#10;}&#10;.btn-primary {&#10;    border-radius: 0.5rem;&#10;    background: linear-gradient(90deg, #2563eb 60%, #1e40af 100%);&#10;    border: none;&#10;    font-weight: 600;&#10;    font-size: 1.1rem;&#10;    letter-spacing: 0.5px;&#10;    box-shadow: 0 2px 8px #2563eb22;&#10;}&#10;.filter-section .filter-actions {&#10;    width: 100%;&#10;    display: flex;&#10;    justify-content: flex-end;&#10;    margin-top: 1.2rem;&#10;}&#10;@media (max-width: 1300px) {&#10;    .filter-section {&#10;        max-width: 98vw;&#10;        min-width: 0;&#10;        width: 98vw;&#10;    }&#10;    .filter-section .row.g-3.filter-grid {&#10;        gap: 1.2rem;&#10;    }&#10;}&#10;@media (max-width: 1200px) {&#10;    .filter-section .filter-col {&#10;        flex: 0 0 45%;&#10;        max-width: 45%;&#10;        min-width: 140px;&#10;    }&#10;}&#10;@media (max-width: 900px) {&#10;    .filter-section {&#10;        min-width: 90vw !important;&#10;        max-width: 98vw !important;&#10;        padding: 1.2rem !important;&#10;    }&#10;    .filter-section .row.g-3 {&#10;        flex-direction: column;&#10;        gap: 0.7rem;&#10;    }&#10;    .filter-section .col.filter-col {&#10;        width: 100%;&#10;        margin-bottom: 0.7rem;&#10;        max-width: 100%;&#10;    }&#10;    .filter-row {&#10;        flex-direction: column;&#10;        gap: 0.7rem;&#10;    }&#10;    .filter-col {&#10;        max-width: 100%;&#10;        min-width: 0;&#10;    }&#10;}&#10;@media (min-width: 768px) {&#10;    .filter-section .filter-col {&#10;        min-width: 180px;&#10;        max-width: 320px;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/add_auto_form.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/add_auto_form.html" />
              <option name="updatedContent" value="{# Template parziale per il form di aggiunta auto #}&#10;{% for field in form %}&#10;  &lt;div class=&quot;mb-3&quot;&gt;&#10;    {{ field.label_tag }}&#10;    {{ field }}&#10;    {% if field.help_text %}&lt;small class=&quot;form-text text-muted&quot;&gt;{{ field.help_text }}&lt;/small&gt;{% endif %}&#10;    {% for error in field.errors %}&#10;      &lt;div class=&quot;text-danger small&quot;&gt;{{ error }}&lt;/div&gt;&#10;    {% endfor %}&#10;  &lt;/div&gt;&#10;{% endfor %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_confirm_delete.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_confirm_delete.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_detail.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_detail.html" />
              <option name="originalContent" value="{% extends 'base.html' %}&#10;{% block content %}&#10;&lt;div class=&quot;container-fluid py-5&quot; style=&quot;width:100%;&quot;&gt;&#10;    &lt;div class=&quot;row justify-content-center&quot;&gt;&#10;        &lt;div class=&quot;col-12 col-xl-12 col-xxl-11&quot; style=&quot;max-width: 1200px; padding-left: 0px; padding-right: 0px; width: 100%;&quot;&gt;&#10;            {# ALERT STATO AUTO #}&#10;            {% if auto.disponibilita == 3 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente in contrattazione&lt;/div&gt;&#10;            {% elif auto.disponibilita == 1 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente affittata&lt;/div&gt;&#10;            {% elif auto.disponibilita == 6 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente prenotata&lt;/div&gt;&#10;            {% endif %}&#10;            &lt;div class=&quot;card shadow-lg border-0 rounded-4&quot; style=&quot;margin-top: 20px; margin-bottom: 20px; width: 150%; margin-left: -25%;&quot;&gt;&#10;                &lt;div class=&quot;row g-0&quot;&gt;&#10;                    {% if auto.immagine %}&#10;                    &lt;div class=&quot;col-md-5 d-flex align-items-center justify-content-center p-3&quot;&gt;&#10;                        &lt;img src=&quot;{{ auto.immagine.url }}&quot; class=&quot;img-fluid rounded-4 w-100&quot; alt=&quot;{{ auto.marca }} {{ auto.modello }}&quot;&gt;&#10;                    &lt;/div&gt;&#10;                    {% endif %}&#10;                    &lt;div class=&quot;col-md-7 p-4&quot;&gt;&#10;                        &lt;h2 class=&quot;fw-bold mb-3&quot;&gt;{{ auto.marca }} {{ auto.modello }}&lt;/h2&gt;&#10;                        &lt;ul class=&quot;list-group list-group-flush mb-3&quot;&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Anno:&lt;/strong&gt; {{ auto.anno }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Cilindrata:&lt;/strong&gt; {{ auto.cilindrata }} cc&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Carburante:&lt;/strong&gt; {{ auto.get_carburante_display }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Cambio:&lt;/strong&gt; {{ auto.get_cambio_display }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Trazione:&lt;/strong&gt; {{ auto.get_trazione_display }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Chilometraggio:&lt;/strong&gt; {{ auto.chilometraggio|default:'N/A' }} km&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Disponibilità:&lt;/strong&gt; {{ auto.get_disponibilita_display }}&lt;/li&gt;&#10;                        &lt;/ul&gt;&#10;                        {% if auto.descrizione %}&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;strong&gt;Descrizione:&lt;/strong&gt;&#10;                            &lt;p&gt;{{ auto.descrizione }}&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        {% endif %}&#10;                        {# BOTTONI AZIONE #}&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;&#10;                                {% csrf_token %}&#10;                                &lt;button type=&quot;submit&quot; formaction=&quot;{% url 'Auto:acquisto_auto' auto.pk %}&quot; class=&quot;btn btn-success me-2&quot; {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&gt;Compra&lt;/button&gt;&#10;                                &lt;button type=&quot;submit&quot; formaction=&quot;{% url 'Auto:affitto_auto' auto.pk %}&quot; class=&quot;btn btn-primary me-2&quot; {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&gt;Affitta&lt;/button&gt;&#10;                                &lt;button type=&quot;submit&quot; formaction=&quot;{% url 'Auto:prenota_auto' auto.pk %}&quot; class=&quot;btn btn-warning me-2&quot; {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&gt;Prenota&lt;/button&gt;&#10;                                &lt;button type=&quot;submit&quot; formaction=&quot;{% url 'Auto:contrattazione_auto' auto.pk %}&quot; class=&quot;btn btn-info me-2&quot; {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&gt;Contratta&lt;/button&gt;&#10;                            &lt;/form&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {# SEZIONE COMMENTI #}&#10;            &lt;div class=&quot;card mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header&quot;&gt;&lt;strong&gt;Commenti&lt;/strong&gt;&lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    {% if is_utente and not auto.user_auto == user %}&#10;                        &lt;form method=&quot;post&quot; action=&quot;{% url 'Utente:crea_commento' %}&quot;&gt;&#10;                            {% csrf_token %}&#10;                            &lt;div class=&quot;mb-3&quot;&gt;&#10;                                &lt;textarea name=&quot;testo&quot; class=&quot;form-control&quot; rows=&quot;2&quot; placeholder=&quot;Scrivi un commento...&quot;&gt;&lt;/textarea&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;input type=&quot;hidden&quot; name=&quot;auto_id&quot; value=&quot;{{ auto.pk }}&quot;&gt;&#10;                            &lt;button type=&quot;submit&quot; class=&quot;btn btn-outline-primary&quot;&gt;Invia commento&lt;/button&gt;&#10;                        &lt;/form&gt;&#10;                        &lt;hr&gt;&#10;                    {% endif %}&#10;                    {% for commento in auto.commenti.all %}&#10;                        &lt;div class=&quot;mb-3 border-bottom pb-2&quot;&gt;&#10;                            &lt;div&gt;&lt;strong&gt;{{ commento.user.username }}&lt;/strong&gt; &lt;span class=&quot;text-muted small&quot;&gt;{{ commento.data_creazione|date:'d/m/Y H:i' }}&lt;/span&gt;&lt;/div&gt;&#10;                            &lt;div&gt;{{ commento.testo }}&lt;/div&gt;&#10;                            &lt;div class=&quot;mt-2&quot;&gt;&#10;                                {% if user.is_authenticated and auto.user_auto == user %}&#10;                                    &lt;a href=&quot;#&quot; class=&quot;btn btn-sm btn-outline-secondary me-2&quot; data-bs-toggle=&quot;modal&quot; data-bs-target=&quot;#rispostaModal{{ commento.id }}&quot; onclick=&quot;event.stopPropagation();&quot;&gt;Rispondi&lt;/a&gt;&#10;                                {% endif %}&#10;                                {% if user.is_authenticated %}&#10;                                    &lt;a href=&quot;{% url 'Utente:crea_segnalazione' %}?commento_id={{ commento.id }}&quot; class=&quot;btn btn-sm btn-outline-danger&quot;&gt;Segnala&lt;/a&gt;&#10;                                {% endif %}&#10;                            &lt;/div&gt;&#10;                            {% for risposta in commento.risposte.all %}&#10;                                &lt;div class=&quot;ms-4 mt-2 border-start ps-2&quot;&gt;&#10;                                    &lt;div&gt;&lt;strong&gt;{{ risposta.user.username }}&lt;/strong&gt; &lt;span class=&quot;text-muted small&quot;&gt;{{ risposta.data_creazione|date:'d/m/Y H:i' }}&lt;/span&gt;&lt;/div&gt;&#10;                                    &lt;div&gt;{{ risposta.testo }}&lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            {% endfor %}&#10;                            {% if user.is_authenticated and auto.user_auto == user %}&#10;                            &lt;!-- Modal Risposta --&gt;&#10;                            &lt;div class=&quot;modal fade&quot; id=&quot;rispostaModal{{ commento.id }}&quot; tabindex=&quot;-1&quot; aria-labelledby=&quot;rispostaModalLabel{{ commento.id }}&quot; aria-hidden=&quot;true&quot;&gt;&#10;                              &lt;div class=&quot;modal-dialog modal-dialog-centered&quot;&gt;&#10;                                &lt;div class=&quot;modal-content&quot;&gt;&#10;                                  &lt;form class=&quot;ajax-risposta-form&quot; data-commento-id=&quot;{{ commento.id }}&quot; method=&quot;post&quot; action=&quot;{% url 'Utente:crea_risposta' %}?commento_id={{ commento.id }}&quot; autocomplete=&quot;off&quot;&gt;&#10;                                    {% csrf_token %}&#10;                                    &lt;div class=&quot;modal-header bg-primary text-white&quot;&gt;&#10;                                      &lt;h5 class=&quot;modal-title&quot; id=&quot;rispostaModalLabel{{ commento.id }}&quot;&gt;Rispondi al commento&lt;/h5&gt;&#10;                                      &lt;button type=&quot;button&quot; class=&quot;btn-close btn-close-white&quot; data-bs-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;modal-body&quot;&gt;&#10;                                      &lt;div class=&quot;mb-3&quot;&gt;&#10;                                        &lt;textarea name=&quot;testo&quot; class=&quot;form-control&quot; rows=&quot;4&quot; placeholder=&quot;Scrivi una risposta...&quot; required style=&quot;resize: none;&quot;&gt;&lt;/textarea&gt;&#10;                                      &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;modal-footer&quot;&gt;&#10;                                      &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-bs-dismiss=&quot;modal&quot;&gt;Annulla&lt;/button&gt;&#10;                                      &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;Salva&lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                  &lt;/form&gt;&#10;                                &lt;/div&gt;&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;script&gt;&#10;                              document.addEventListener('DOMContentLoaded', function() {&#10;                                // Focus automatico&#10;                                var modal = document.getElementById('rispostaModal{{ commento.id }}');&#10;                                if(modal) {&#10;                                  modal.addEventListener('show.bs.modal', function () {&#10;                                    setTimeout(function() {&#10;                                      var textarea = modal.querySelector('textarea');&#10;                                      if(textarea) textarea.focus();&#10;                                    }, 300);&#10;                                  });&#10;                                }&#10;                                // AJAX submit&#10;                                var form = modal.querySelector('.ajax-risposta-form');&#10;                                if(form) {&#10;                                  form.addEventListener('submit', function(e) {&#10;                                    e.preventDefault();&#10;                                    var formData = new FormData(form);&#10;                                    fetch(form.action, {&#10;                                      method: 'POST',&#10;                                      headers: {&#10;                                        'X-Requested-With': 'XMLHttpRequest',&#10;                                      },&#10;                                      body: formData&#10;                                    })&#10;                                    .then(response =&gt; response.json())&#10;                                    .then(data =&gt; {&#10;                                      if(data.success) {&#10;                                        // Aggiungi la risposta sotto il commento&#10;                                        var risposteContainer = form.closest('.mb-3').querySelector('.border-start.ps-2:last-of-type')?.parentNode || form.closest('.mb-3');&#10;                                        var rispostaHtml = `&lt;div class=\&quot;ms-4 mt-2 border-start ps-2\&quot;&gt;&lt;div&gt;&lt;strong&gt;${data.username}&lt;/strong&gt; &lt;span class=\&quot;text-muted small\&quot;&gt;${data.data_creazione}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;${data.testo}&lt;/div&gt;&lt;/div&gt;`;&#10;                                        risposteContainer.insertAdjacentHTML('beforeend', rispostaHtml);&#10;                                        // Chiudi il modal&#10;                                        var bsModal = bootstrap.Modal.getInstance(modal);&#10;                                        bsModal.hide();&#10;                                        form.reset();&#10;                                      } else {&#10;                                        alert('Errore: ' + (data.error || 'Impossibile salvare la risposta.'));&#10;                                      }&#10;                                    })&#10;                                    .catch(() =&gt; alert('Errore di rete.'));&#10;                                  });&#10;                                }&#10;                              });&#10;                            &lt;/script&gt;&#10;                            {% endif %}&#10;                        &lt;/div&gt;&#10;                    {% empty %}&#10;                        &lt;div class=&quot;text-muted&quot;&gt;Nessun commento presente.&lt;/div&gt;&#10;                    {% endfor %}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {# BOTTONE STICKY #}&#10;            &lt;a href=&quot;{% url 'Auto:user_autos' %}&quot; class=&quot;btn btn-secondary position-fixed&quot; style=&quot;bottom: 30px; right: 30px; z-index: 9999;&quot;&gt;Torna alla schermata dei veicoli&lt;/a&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;{% endblock %}&#10;" />
              <option name="updatedContent" value="{% extends 'base.html' %}&#10;{% block content %}&#10;&lt;div class=&quot;container-fluid py-5&quot; style=&quot;width:100%;&quot;&gt;&#10;    &lt;div class=&quot;row justify-content-center&quot;&gt;&#10;        &lt;div class=&quot;col-12 col-xl-12 col-xxl-11&quot; style=&quot;max-width: 1200px; padding-left: 0px; padding-right: 0px; width: 100%;&quot;&gt;&#10;            {# ALERT STATO AUTO #}&#10;            {% if auto.disponibilita == 3 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente in contrattazione&lt;/div&gt;&#10;            {% elif auto.disponibilita == 1 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente affittata&lt;/div&gt;&#10;            {% elif auto.disponibilita == 6 %}&#10;                &lt;div class=&quot;alert alert-danger text-center&quot; role=&quot;alert&quot;&gt;Auto attualmente prenotata&lt;/div&gt;&#10;            {% endif %}&#10;            &lt;div class=&quot;card shadow-lg border-0 rounded-4&quot; style=&quot;margin-top: 20px; margin-bottom: 20px; width: 150%; margin-left: -25%;&quot;&gt;&#10;                &lt;div class=&quot;row g-0&quot;&gt;&#10;                    {% if auto.immagine %}&#10;                    &lt;div class=&quot;col-md-5 d-flex align-items-center justify-content-center p-3&quot;&gt;&#10;                        &lt;img src=&quot;{{ auto.immagine.url }}&quot; class=&quot;img-fluid rounded-4 w-100&quot; alt=&quot;{{ auto.marca }} {{ auto.modello }}&quot;&gt;&#10;                    &lt;/div&gt;&#10;                    {% endif %}&#10;                    &lt;div class=&quot;col-md-7 p-4&quot;&gt;&#10;                        &lt;h2 class=&quot;fw-bold mb-3&quot;&gt;{{ auto.marca }} {{ auto.modello }}&lt;/h2&gt;&#10;                        &lt;ul class=&quot;list-group list-group-flush mb-3&quot;&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Anno:&lt;/strong&gt; {{ auto.anno }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Cilindrata:&lt;/strong&gt; {{ auto.cilindrata }} cc&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Carburante:&lt;/strong&gt; {{ auto.get_carburante_display }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Cambio:&lt;/strong&gt; {{ auto.get_cambio_display }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Trazione:&lt;/strong&gt; {{ auto.get_trazione_display }}&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Chilometraggio:&lt;/strong&gt; {{ auto.chilometraggio|default:'N/A' }} km&lt;/li&gt;&#10;                            &lt;li class=&quot;list-group-item&quot;&gt;&lt;strong&gt;Disponibilità:&lt;/strong&gt; {{ auto.get_disponibilita_display }}&lt;/li&gt;&#10;                        &lt;/ul&gt;&#10;                        {% if auto.descrizione %}&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;strong&gt;Descrizione:&lt;/strong&gt;&#10;                            &lt;p&gt;{{ auto.descrizione }}&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                        {% endif %}&#10;                        {# BOTTONI AZIONE #}&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;&#10;                                {% csrf_token %}&#10;                                &lt;button type=&quot;submit&quot; formaction=&quot;{% url 'Auto:acquisto_auto' auto.pk %}&quot; class=&quot;btn btn-success me-2&quot; {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&gt;Compra&lt;/button&gt;&#10;                                &lt;button type=&quot;submit&quot; formaction=&quot;{% url 'Auto:affitto_auto' auto.pk %}&quot; class=&quot;btn btn-primary me-2&quot; {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&gt;Affitta&lt;/button&gt;&#10;                                &lt;button type=&quot;submit&quot; formaction=&quot;{% url 'Auto:prenota_auto' auto.pk %}&quot; class=&quot;btn btn-warning me-2&quot; {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&gt;Prenota&lt;/button&gt;&#10;                                &lt;button type=&quot;submit&quot; formaction=&quot;{% url 'Auto:contrattazione_auto' auto.pk %}&quot; class=&quot;btn btn-info me-2&quot; {% if auto.disponibilita == 1 or auto.disponibilita == 3 or auto.disponibilita == 6 %}disabled{% endif %}&gt;Contratta&lt;/button&gt;&#10;                            &lt;/form&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {# SEZIONE COMMENTI #}&#10;            &lt;div class=&quot;card mt-4&quot;&gt;&#10;                &lt;div class=&quot;card-header&quot;&gt;&lt;strong&gt;Commenti&lt;/strong&gt;&lt;/div&gt;&#10;                &lt;div class=&quot;card-body&quot;&gt;&#10;                    {% if is_utente and not auto.user_auto == user %}&#10;                        &lt;form method=&quot;post&quot; action=&quot;{% url 'Utente:crea_commento' %}&quot;&gt;&#10;                            {% csrf_token %}&#10;                            &lt;div class=&quot;mb-3&quot;&gt;&#10;                                &lt;textarea name=&quot;testo&quot; class=&quot;form-control&quot; rows=&quot;2&quot; placeholder=&quot;Scrivi un commento...&quot;&gt;&lt;/textarea&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;input type=&quot;hidden&quot; name=&quot;auto_id&quot; value=&quot;{{ auto.pk }}&quot;&gt;&#10;                            &lt;button type=&quot;submit&quot; class=&quot;btn btn-outline-primary&quot;&gt;Invia commento&lt;/button&gt;&#10;                        &lt;/form&gt;&#10;                        &lt;hr&gt;&#10;                    {% endif %}&#10;                    {% for commento in auto.commenti.all %}&#10;                        &lt;div class=&quot;mb-3 border-bottom pb-2&quot;&gt;&#10;                            &lt;div&gt;&lt;strong&gt;{{ commento.user.username }}&lt;/strong&gt; &lt;span class=&quot;text-muted small&quot;&gt;{{ commento.data_creazione|date:'d/m/Y H:i' }}&lt;/span&gt;&lt;/div&gt;&#10;                            &lt;div&gt;{{ commento.testo }}&lt;/div&gt;&#10;                            &lt;div class=&quot;mt-2&quot;&gt;&#10;                                {% if user.is_authenticated and auto.user_auto == user %}&#10;                                    &lt;a href=&quot;#&quot; class=&quot;btn btn-sm btn-outline-secondary me-2&quot; data-bs-toggle=&quot;modal&quot; data-bs-target=&quot;#rispostaModal{{ commento.id }}&quot; onclick=&quot;event.stopPropagation();&quot;&gt;Rispondi&lt;/a&gt;&#10;                                {% endif %}&#10;                                {% if user.is_authenticated %}&#10;                                    &lt;a href=&quot;{% url 'Utente:crea_segnalazione' %}?commento_id={{ commento.id }}&quot; class=&quot;btn btn-sm btn-outline-danger&quot;&gt;Segnala&lt;/a&gt;&#10;                                {% endif %}&#10;                            &lt;/div&gt;&#10;                            {% for risposta in commento.risposte.all %}&#10;                                &lt;div class=&quot;ms-4 mt-2 border-start ps-2&quot;&gt;&#10;                                    &lt;div&gt;&lt;strong&gt;{{ risposta.user.username }}&lt;/strong&gt; &lt;span class=&quot;text-muted small&quot;&gt;{{ risposta.data_creazione|date:'d/m/Y H:i' }}&lt;/span&gt;&lt;/div&gt;&#10;                                    &lt;div&gt;{{ risposta.testo }}&lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            {% endfor %}&#10;                            {% if user.is_authenticated and auto.user_auto == user %}&#10;                            &lt;div class=&quot;ms-4 mt-2&quot;&gt;&#10;                                &lt;form class=&quot;ajax-risposta-form&quot; data-commento-id=&quot;{{ commento.id }}&quot; method=&quot;post&quot; action=&quot;{% url 'Utente:crea_risposta' %}?commento_id={{ commento.id }}&quot; autocomplete=&quot;off&quot;&gt;&#10;                                    {% csrf_token %}&#10;                                    &lt;div class=&quot;input-group mb-2&quot;&gt;&#10;                                        &lt;textarea name=&quot;testo&quot; class=&quot;form-control&quot; rows=&quot;2&quot; placeholder=&quot;Scrivi una risposta...&quot; required style=&quot;resize: none;&quot;&gt;&lt;/textarea&gt;&#10;                                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-success ms-2&quot;&gt;Rispondi&lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/form&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;script&gt;&#10;                              document.addEventListener('DOMContentLoaded', function() {&#10;                                var form = document.querySelector('.ajax-risposta-form[data-commento-id=&quot;{{ commento.id }}&quot;]');&#10;                                if(form) {&#10;                                  form.addEventListener('submit', function(e) {&#10;                                    e.preventDefault();&#10;                                    var formData = new FormData(form);&#10;                                    fetch(form.action, {&#10;                                      method: 'POST',&#10;                                      headers: {&#10;                                        'X-Requested-With': 'XMLHttpRequest',&#10;                                      },&#10;                                      body: formData&#10;                                    })&#10;                                    .then(response =&gt; response.json())&#10;                                    .then(data =&gt; {&#10;                                      if(data.success) {&#10;                                        var risposteContainer = form.parentNode.parentNode;&#10;                                        var rispostaHtml = `&lt;div class=\&quot;ms-4 mt-2 border-start ps-2\&quot;&gt;&lt;div&gt;&lt;strong&gt;${data.username}&lt;/strong&gt; &lt;span class=\&quot;text-muted small\&quot;&gt;${data.data_creazione}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;${data.testo}&lt;/div&gt;&lt;/div&gt;`;&#10;                                        risposteContainer.insertAdjacentHTML('beforeend', rispostaHtml);&#10;                                        form.reset();&#10;                                      } else {&#10;                                        alert('Errore: ' + (data.error || 'Impossibile salvare la risposta.'));&#10;                                      }&#10;                                    })&#10;                                    .catch(() =&gt; alert('Errore di rete.'));&#10;                                  });&#10;                                }&#10;                              });&#10;                            &lt;/script&gt;&#10;                            {% endif %}&#10;                        &lt;/div&gt;&#10;                    {% empty %}&#10;                        &lt;div class=&quot;text-muted&quot;&gt;Nessun commento presente.&lt;/div&gt;&#10;                    {% endfor %}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {# BOTTONE STICKY #}&#10;            &lt;a href=&quot;{% url 'Auto:user_autos' %}&quot; class=&quot;btn btn-secondary position-fixed&quot; style=&quot;bottom: 30px; right: 30px; z-index: 9999;&quot;&gt;Torna alla schermata dei veicoli&lt;/a&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Utente/create_risposta.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Utente/create_risposta.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Drusi/Progetto_TecWeb/Autosaloon_Modena/apps/Auto/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Drusi/Progetto_TecWeb/Autosaloon_Modena/apps/Auto/views.py" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Auto/user_autos.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Auto/user_autos.html" />
              <option name="originalContent" value="&#10;&#10;&#10;" />
              <option name="updatedContent" value="{% extends 'base.html' %}&#10;&#10;{% block content %}&#10;&#10;                    &lt;a href=&quot;{% url 'Auto:edit_auto' auto.pk %}&quot; class=&quot;btn btn-primary btn-sm&quot;&gt;Modifica&lt;/a&gt;&#10;                    &lt;form method=&quot;post&quot; action=&quot;{% url 'Auto:delete_auto' auto.pk %}&quot; style=&quot;display:inline;&quot;&gt;&#10;                        {% csrf_token %}&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-danger btn-sm delete-auto-btn&quot;&gt;Elimina&lt;/button&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&lt;/div&gt;&#10;&#10;{% include 'Autosalone/confirm_delete_popup.html' %}&#10;&lt;script&gt;&#10;document.addEventListener('DOMContentLoaded', function() {&#10;    let formToDelete = null;&#10;    document.querySelectorAll('.delete-auto-btn').forEach(function(btn) {&#10;        btn.addEventListener('click', function(e) {&#10;            e.preventDefault();&#10;            formToDelete = btn.closest('form');&#10;            var modal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));&#10;            var confirmBtn = document.getElementById('confirmDeleteBtn');&#10;            confirmBtn.onclick = function() {&#10;                if(formToDelete) formToDelete.submit();&#10;                modal.hide();&#10;            };&#10;            modal.show();&#10;        });&#10;    });&#10;});&#10;&lt;/script&gt;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Autosalone/confirm_delete_popup.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Autosalone/confirm_delete_popup.html" />
              <option name="updatedContent" value="&lt;!-- Popup di conferma eliminazione generico e riutilizzabile --&gt;&#10;&lt;div class=&quot;modal fade&quot; id=&quot;confirmDeleteModal&quot; tabindex=&quot;-1&quot; aria-labelledby=&quot;confirmDeleteModalLabel&quot; aria-hidden=&quot;true&quot;&gt;&#10;  &lt;div class=&quot;modal-dialog modal-dialog-centered&quot;&gt;&#10;    &lt;div class=&quot;modal-content&quot;&gt;&#10;      &lt;div class=&quot;modal-header&quot;&gt;&#10;        &lt;h5 class=&quot;modal-title&quot; id=&quot;confirmDeleteModalLabel&quot;&gt;Conferma eliminazione&lt;/h5&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;modal&quot; aria-label=&quot;Chiudi&quot;&gt;&lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;modal-body&quot;&gt;&#10;        Sei sicuro di voler eliminare questo elemento? Questa azione non può essere annullata.&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;modal-footer&quot;&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-bs-dismiss=&quot;modal&quot;&gt;Annulla&lt;/button&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot; id=&quot;confirmDeleteBtn&quot;&gt;Elimina&lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/base.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/base.html" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>