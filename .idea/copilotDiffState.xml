<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/apps/Auto/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/apps/Auto/views.py" />
              <option name="originalContent" value="from datetime import timezone, datetime, timedelta&#10;&#10;from django.http import HttpResponse, HttpResponseForbidden&#10;from django.shortcuts import render, get_object_or_404, redirect&#10;from django.utils.decorators import method_decorator&#10;from django.views.generic import CreateView, DeleteView, UpdateView, DetailView&#10;from django.views.decorators.csrf import csrf_exempt&#10;from django.contrib.auth.decorators import login_required&#10;&#10;from .auto_utils import gestione_vendita_affitto&#10;from .form import AddAutoForm, ModifyAutoForm, AffittoAutoForm, PrenotazioneAutoForm, VenditaAutoForm, ContrattoAutoForm&#10;from .mixin import UserIsOwnerMixin&#10;from .models import Auto, AutoAffitto, AutoVendita, AutoPrenotazione, AutoContrattazione, TIPOLOGIE_CARBURANTE, TIPOLOGIE_TRAZIONE, DISPONIBILITA&#10;from ..decorator import user_or_concessionaria_required&#10;from ..utils import user_or_concessionaria, get_success_url_by_possessore, is_possessore_auto&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoAddView(CreateView):&#10;    model = Auto&#10;    template_name = 'Auto/add_auto_template.html'  # Cambiato il template&#10;    form_class = AddAutoForm&#10;&#10;    def form_valid(self, form):&#10;        auto = form.save(commit=False)&#10;        auto.tipologia_possessore, auto.id_possessore = user_or_concessionaria(self.request.user)&#10;        auto.user_auto = self.request.user  # Associa l'utente autenticato&#10;        auto.save()&#10;        prezzo_vendita = form.cleaned_data.get('prezzo_vendita')&#10;        prezzo_affitto = form.cleaned_data.get('prezzo_affitto')&#10;        if prezzo_vendita:&#10;            AutoVendita.objects.create(auto=auto, prezzo_vendita=prezzo_vendita, venditore=auto.id_possessore)&#10;        if prezzo_affitto:&#10;            AutoAffitto.objects.create(auto=auto, prezzo_affitto=prezzo_affitto, affittante_id=auto.id_possessore, affittante_tipologia=auto.tipologia_possessore)&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoDeleteView(UserIsOwnerMixin, DeleteView):&#10;    model = Auto&#10;    template_name = 'Autosalone/confirm_delete_popup.html'&#10;&#10;    def delete(self, request, *args, **kwargs):&#10;        auto = self.get_object()&#10;        # Elimina le istanze collegate in AutoVendita e AutoAffitto&#10;        AutoVendita.objects.filter(auto=auto).delete()&#10;        AutoAffitto.objects.filter(auto=auto).delete()&#10;        return super().delete(request, *args, **kwargs)&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoModifyView(UserIsOwnerMixin, UpdateView):&#10;    model = Auto&#10;    template_name = 'Auto/modify_auto.html'&#10;    form_class = ModifyAutoForm&#10;&#10;    def get_initial(self):&#10;        initial = super().get_initial()&#10;        auto = self.get_object()&#10;        vendita = AutoVendita.objects.filter(auto=auto).first()&#10;        affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;        # Imposta la disponibilitÃ  in base a cosa esiste&#10;        if vendita and affitto:&#10;            initial['disponibilita'] = '2'  # Vendita e Affitto&#10;        elif vendita:&#10;            initial['disponibilita'] = '0'  # Solo Vendita&#10;        elif affitto:&#10;            initial['disponibilita'] = '1'  # Solo Affitto&#10;        if vendita:&#10;            initial['prezzo_vendita'] = vendita.prezzo_vendita&#10;        if affitto:&#10;            initial['prezzo_affitto'] = affitto.prezzo_affitto&#10;        return initial&#10;&#10;    def form_valid(self, form):&#10;        auto = form.save(commit=False)&#10;        auto.tipologia_possessore, auto.id_possessore = user_or_concessionaria(self.request.user)&#10;        auto.save()&#10;        # Recupera i valori originali&#10;        original_auto = Auto.objects.get(pk=auto.id)&#10;        original_vendita = AutoVendita.objects.filter(auto=original_auto).first() or None&#10;        original_affitto = AutoAffitto.objects.filter(auto=original_auto).first() or None&#10;        # Nuovi valori dal form&#10;        prezzo_vendita = form.cleaned_data.get('prezzo_vendita')&#10;        prezzo_affitto = form.cleaned_data.get('prezzo_affitto')&#10;        # Gestione della logica di vendita e affitto&#10;        gestione_vendita_affitto(prezzo_vendita, prezzo_affitto, original_auto, original_vendita, original_affitto)&#10;        return super().form_valid(form)&#10;&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form, 'auto': self.get_object()})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoAffittoView(UpdateView):&#10;    model = AutoAffitto&#10;    form_class = AffittoAutoForm&#10;    template_name = 'Auto/affitto_auto.html'&#10;&#10;    def form_valid(self, form):&#10;        affitto = form.save(commit=False)&#10;        affitto.auto = self.get_object()&#10;        affitto.affittuario_id, affitto.affittuario_tipologia = user_or_concessionaria(self.request.user)&#10;        affitto.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form, 'auto': self.get_object()})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoAcquistoView(UpdateView):&#10;    model = AutoVendita&#10;    form_class = VenditaAutoForm  # Assuming the same form is used for both&#10;    template_name = 'Auto/acquisto_auto.html'&#10;&#10;    def form_valid(self, form):&#10;        vendita = form.save(commit=False)&#10;        vendita.auto = self.get_object()&#10;        vendita.venditore = self.request.user&#10;        vendita.data_pubblicazione = datetime.now()&#10;        auto = vendita.auto&#10;        auto.tipologia_possessore, auto.id_possessore = user_or_concessionaria(self.request.user)&#10;        auto_affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;        if auto_affitto:&#10;            auto_affitto.affittuario_tipologia, auto_affitto.affittuario_id = user_or_concessionaria(self.request.user)&#10;            auto_affitto.affittante_id, auto_affitto.affittante_tipologia = None, None&#10;        auto_affitto.save()&#10;        auto.save()&#10;        vendita.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoPrenotaView(CreateView):&#10;    model = AutoPrenotazione&#10;    template_name = 'Auto/prenota_auto.html'&#10;    form_class = PrenotazioneAutoForm&#10;&#10;    def form_valid(self, form):&#10;        prenotazione = form.save(commit=False)&#10;        auto = Auto.objects.get(pk=self.kwargs['pk'])&#10;        prenotazione.auto = auto&#10;        prenotazione.data_inizio = datetime.now()&#10;        prenotazione.data_fine = prenotazione.data_inizio + timedelta(hours=24)&#10;        prenotazione.proprietario = auto.id_possessore&#10;        prenotazione.prenotante_id, prenotazione.prenotante_tipologia = user_or_concessionaria(self.request.user)&#10;        prenotazione.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoInContrattazioneView(UpdateView):&#10;    model = AutoContrattazione&#10;    template_name = 'Auto/contrattazione_auto.html'&#10;    form_class = ContrattoAutoForm&#10;&#10;    def form_valid(self, form):&#10;        contrattazione = form.save(commit=False)&#10;        auto = Auto.objects.get(pk=self.kwargs['pk'])&#10;        contrattazione.auto = auto&#10;        contrattazione.acquirente_id, contrattazione.acquirente_tipologia = user_or_concessionaria(self.request.user)&#10;        autovendita = AutoVendita.objects.filter(auto=auto).first()&#10;        if autovendita:&#10;            contrattazione.prezzo_iniziale = autovendita.prezzo_vendita&#10;        contrattazione.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoFineContrattazioneView(UpdateView):&#10;    model = AutoContrattazione&#10;    template_name = 'Auto/fine_contrattazione_auto.html'&#10;    form_class = ContrattoAutoForm&#10;&#10;    def form_valid(self, form):&#10;        contrattazione = form.save(commit=False)&#10;        contrattazione.prezzo_finale = contrattazione.prezzo_attuale&#10;        contrattazione.data_fine = datetime.now(timezone.utc)&#10;        contrattazione.save()&#10;&#10;        # Trasferimento proprietÃ  auto&#10;        auto = contrattazione.auto&#10;        auto.tipologia_possessore = contrattazione.acquirente_tipologia&#10;        auto.id_possessore = contrattazione.acquirente_id&#10;        auto_affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;        if auto_affitto:&#10;            auto_affitto.affittante_id, auto_affitto.affittante_tipologia = None, None&#10;            auto_affitto.affittuario_id, auto_affitto.affittuario_tipologia = contrattazione.acquirente_id, contrattazione.acquirente_tipologia&#10;            auto_affitto.save()&#10;        auto_vendita = AutoVendita.objects.filter(auto=auto).first()&#10;        if auto_vendita:&#10;            auto_vendita.venditore = contrattazione.venditore_id&#10;            auto_vendita.save()&#10;        auto.save()&#10;        # Rimuovi l'auto dalle vendite&#10;        AutoVendita.objects.filter(auto=auto).delete()&#10;&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;class AutoDetailView(DetailView):&#10;    model = Auto&#10;    template_name = 'Auto/auto_detail.html'&#10;    context_object_name = 'auto'&#10;&#10;&#10;@login_required&#10;def user_autos_view(request):&#10;    autos = Auto.objects.filter(user_auto=request.user)&#10;    is_utente = request.user.groups.filter(name='utente').exists()&#10;    is_concessionaria = request.user.groups.filter(name='concessionaria').exists()&#10;    form = AddAutoForm()&#10;    return render(request, 'Auto/user_autos.html', {&#10;        'autos': autos,&#10;        'is_utente': is_utente,&#10;        'is_concessionaria': is_concessionaria,&#10;        'form': form,&#10;        'TIPOLOGIE_CARBURANTE': TIPOLOGIE_CARBURANTE,&#10;        'TIPOLOGIE_TRAZIONE': TIPOLOGIE_TRAZIONE,&#10;        'DISPONIBILITA': DISPONIBILITA&#10;    })&#10;" />
              <option name="updatedContent" value="from datetime import timezone, datetime, timedelta&#10;&#10;from django.core.paginator import Paginator&#10;from django.http import HttpResponse, HttpResponseForbidden&#10;from django.shortcuts import render, get_object_or_404, redirect&#10;from django.utils.decorators import method_decorator&#10;from django.views.generic import CreateView, DeleteView, UpdateView, DetailView&#10;from django.views.decorators.csrf import csrf_exempt&#10;from django.contrib.auth.decorators import login_required&#10;&#10;from .auto_utils import gestione_vendita_affitto&#10;from .form import AddAutoForm, ModifyAutoForm, AffittoAutoForm, PrenotazioneAutoForm, VenditaAutoForm, ContrattoAutoForm&#10;from .mixin import UserIsOwnerMixin&#10;from .models import Auto, AutoAffitto, AutoVendita, AutoPrenotazione, AutoContrattazione, TIPOLOGIE_CARBURANTE, TIPOLOGIE_TRAZIONE, DISPONIBILITA&#10;from ..decorator import user_or_concessionaria_required&#10;from ..utils import user_or_concessionaria, get_success_url_by_possessore, is_possessore_auto&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoAddView(CreateView):&#10;    model = Auto&#10;    template_name = 'Auto/add_auto_template.html'  # Cambiato il template&#10;    form_class = AddAutoForm&#10;&#10;    def form_valid(self, form):&#10;        auto = form.save(commit=False)&#10;        auto.tipologia_possessore, auto.id_possessore = user_or_concessionaria(self.request.user)&#10;        auto.user_auto = self.request.user  # Associa l'utente autenticato&#10;        auto.save()&#10;        prezzo_vendita = form.cleaned_data.get('prezzo_vendita')&#10;        prezzo_affitto = form.cleaned_data.get('prezzo_affitto')&#10;        if prezzo_vendita:&#10;            AutoVendita.objects.create(auto=auto, prezzo_vendita=prezzo_vendita, venditore=auto.id_possessore)&#10;        if prezzo_affitto:&#10;            AutoAffitto.objects.create(auto=auto, prezzo_affitto=prezzo_affitto, affittante_id=auto.id_possessore, affittante_tipologia=auto.tipologia_possessore)&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoDeleteView(UserIsOwnerMixin, DeleteView):&#10;    model = Auto&#10;    template_name = 'Autosalone/confirm_delete_popup.html'&#10;&#10;    def delete(self, request, *args, **kwargs):&#10;        auto = self.get_object()&#10;        # Elimina le istanze collegate in AutoVendita e AutoAffitto&#10;        AutoVendita.objects.filter(auto=auto).delete()&#10;        AutoAffitto.objects.filter(auto=auto).delete()&#10;        return super().delete(request, *args, **kwargs)&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoModifyView(UserIsOwnerMixin, UpdateView):&#10;    model = Auto&#10;    template_name = 'Auto/modify_auto.html'&#10;    form_class = ModifyAutoForm&#10;&#10;    def get_initial(self):&#10;        initial = super().get_initial()&#10;        auto = self.get_object()&#10;        vendita = AutoVendita.objects.filter(auto=auto).first()&#10;        affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;        # Imposta la disponibilitÃ  in base a cosa esiste&#10;        if vendita and affitto:&#10;            initial['disponibilita'] = '2'  # Vendita e Affitto&#10;        elif vendita:&#10;            initial['disponibilita'] = '0'  # Solo Vendita&#10;        elif affitto:&#10;            initial['disponibilita'] = '1'  # Solo Affitto&#10;        if vendita:&#10;            initial['prezzo_vendita'] = vendita.prezzo_vendita&#10;        if affitto:&#10;            initial['prezzo_affitto'] = affitto.prezzo_affitto&#10;        return initial&#10;&#10;    def form_valid(self, form):&#10;        auto = form.save(commit=False)&#10;        auto.tipologia_possessore, auto.id_possessore = user_or_concessionaria(self.request.user)&#10;        auto.save()&#10;        # Recupera i valori originali&#10;        original_auto = Auto.objects.get(pk=auto.id)&#10;        original_vendita = AutoVendita.objects.filter(auto=original_auto).first() or None&#10;        original_affitto = AutoAffitto.objects.filter(auto=original_auto).first() or None&#10;        # Nuovi valori dal form&#10;        prezzo_vendita = form.cleaned_data.get('prezzo_vendita')&#10;        prezzo_affitto = form.cleaned_data.get('prezzo_affitto')&#10;        # Gestione della logica di vendita e affitto&#10;        gestione_vendita_affitto(prezzo_vendita, prezzo_affitto, original_auto, original_vendita, original_affitto)&#10;        return super().form_valid(form)&#10;&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form, 'auto': self.get_object()})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoAffittoView(UpdateView):&#10;    model = AutoAffitto&#10;    form_class = AffittoAutoForm&#10;    template_name = 'Auto/affitto_auto.html'&#10;&#10;    def form_valid(self, form):&#10;        affitto = form.save(commit=False)&#10;        affitto.auto = self.get_object()&#10;        affitto.affittuario_id, affitto.affittuario_tipologia = user_or_concessionaria(self.request.user)&#10;        affitto.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form, 'auto': self.get_object()})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoAcquistoView(UpdateView):&#10;    model = AutoVendita&#10;    form_class = VenditaAutoForm  # Assuming the same form is used for both&#10;    template_name = 'Auto/acquisto_auto.html'&#10;&#10;    def form_valid(self, form):&#10;        vendita = form.save(commit=False)&#10;        vendita.auto = self.get_object()&#10;        vendita.venditore = self.request.user&#10;        vendita.data_pubblicazione = datetime.now()&#10;        auto = vendita.auto&#10;        auto.tipologia_possessore, auto.id_possessore = user_or_concessionaria(self.request.user)&#10;        auto_affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;        if auto_affitto:&#10;            auto_affitto.affittuario_tipologia, auto_affitto.affittuario_id = user_or_concessionaria(self.request.user)&#10;            auto_affitto.affittante_id, auto_affitto.affittante_tipologia = None, None&#10;        auto_affitto.save()&#10;        auto.save()&#10;        vendita.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoPrenotaView(CreateView):&#10;    model = AutoPrenotazione&#10;    template_name = 'Auto/prenota_auto.html'&#10;    form_class = PrenotazioneAutoForm&#10;&#10;    def form_valid(self, form):&#10;        prenotazione = form.save(commit=False)&#10;        auto = Auto.objects.get(pk=self.kwargs['pk'])&#10;        prenotazione.auto = auto&#10;        prenotazione.data_inizio = datetime.now()&#10;        prenotazione.data_fine = prenotazione.data_inizio + timedelta(hours=24)&#10;        prenotazione.proprietario = auto.id_possessore&#10;        prenotazione.prenotante_id, prenotazione.prenotante_tipologia = user_or_concessionaria(self.request.user)&#10;        prenotazione.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoInContrattazioneView(UpdateView):&#10;    model = AutoContrattazione&#10;    template_name = 'Auto/contrattazione_auto.html'&#10;    form_class = ContrattoAutoForm&#10;&#10;    def form_valid(self, form):&#10;        contrattazione = form.save(commit=False)&#10;        auto = Auto.objects.get(pk=self.kwargs['pk'])&#10;        contrattazione.auto = auto&#10;        contrattazione.acquirente_id, contrattazione.acquirente_tipologia = user_or_concessionaria(self.request.user)&#10;        autovendita = AutoVendita.objects.filter(auto=auto).first()&#10;        if autovendita:&#10;            contrattazione.prezzo_iniziale = autovendita.prezzo_vendita&#10;        contrattazione.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoFineContrattazioneView(UpdateView):&#10;    model = AutoContrattazione&#10;    template_name = 'Auto/fine_contrattazione_auto.html'&#10;    form_class = ContrattoAutoForm&#10;&#10;    def form_valid(self, form):&#10;        contrattazione = form.save(commit=False)&#10;        contrattazione.prezzo_finale = contrattazione.prezzo_attuale&#10;        contrattazione.data_fine = datetime.now(timezone.utc)&#10;        contrattazione.save()&#10;&#10;        # Trasferimento proprietÃ  auto&#10;        auto = contrattazione.auto&#10;        auto.tipologia_possessore = contrattazione.acquirente_tipologia&#10;        auto.id_possessore = contrattazione.acquirente_id&#10;        auto_affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;        if auto_affitto:&#10;            auto_affitto.affittante_id, auto_affitto.affittante_tipologia = None, None&#10;            auto_affitto.affittuario_id, auto_affitto.affittuario_tipologia = contrattazione.acquirente_id, contrattazione.acquirente_tipologia&#10;            auto_affitto.save()&#10;        auto_vendita = AutoVendita.objects.filter(auto=auto).first()&#10;        if auto_vendita:&#10;            auto_vendita.venditore = contrattazione.venditore_id&#10;            auto_vendita.save()&#10;        auto.save()&#10;        # Rimuovi l'auto dalle vendite&#10;        AutoVendita.objects.filter(auto=auto).delete()&#10;&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;class AutoDetailView(DetailView):&#10;    model = Auto&#10;    template_name = 'Auto/auto_detail.html'&#10;    context_object_name = 'auto'&#10;&#10;&#10;@login_required&#10;def user_autos_view(request):&#10;    autos = Auto.objects.filter(user_auto=request.user)&#10;    # Filtri da GET&#10;    marca = request.GET.get('marca', '').strip()&#10;    modello = request.GET.get('modello', '').strip()&#10;    anno = request.GET.get('anno', '').strip()&#10;    chilometri = request.GET.get('chilometri', '').strip()&#10;    cilindrata = request.GET.get('cilindrata', '').strip()&#10;    carburante = request.GET.get('carburante', '').strip()&#10;    trazione = request.GET.get('trazione', '').strip()&#10;    disponibilita = request.GET.get('disponibilita', '').strip()&#10;&#10;    if marca:&#10;        autos = autos.filter(marca__icontains=marca)&#10;    if modello:&#10;        autos = autos.filter(modello__icontains=modello)&#10;    if anno:&#10;        autos = autos.filter(anno=anno)&#10;    if chilometri:&#10;        autos = autos.filter(chilometraggio=chilometri)&#10;    if cilindrata:&#10;        autos = autos.filter(cilindrata=cilindrata)&#10;    if carburante:&#10;        autos = autos.filter(carburante=carburante)&#10;    if trazione:&#10;        autos = autos.filter(trazione=trazione)&#10;    if disponibilita:&#10;        autos = autos.filter(disponibilita=disponibilita)&#10;&#10;    paginator = Paginator(autos, 9)  # 9 auto per pagina&#10;    page_number = request.GET.get('page')&#10;    autos_page = paginator.get_page(page_number)&#10;&#10;    is_utente = request.user.groups.filter(name='utente').exists()&#10;    is_concessionaria = request.user.groups.filter(name='concessionaria').exists()&#10;    form = AddAutoForm()&#10;    return render(request, 'Auto/user_autos.html', {&#10;        'autos': autos_page,&#10;        'is_utente': is_utente,&#10;        'is_concessionaria': is_concessionaria,&#10;        'form': form,&#10;        'TIPOLOGIE_CARBURANTE': TIPOLOGIE_CARBURANTE,&#10;        'TIPOLOGIE_TRAZIONE': TIPOLOGIE_TRAZIONE,&#10;        'DISPONIBILITA': DISPONIBILITA&#10;    })" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/apps/Concessionaria/forms.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/apps/Concessionaria/forms.py" />
              <option name="originalContent" value="from django import forms&#10;from django.contrib.auth import authenticate&#10;from django.contrib.auth.models import User&#10;from django.core.exceptions import ValidationError&#10;&#10;from .models import Concessionaria&#10;&#10;class ConcessionariaLoginForm(forms.Form):&#10;    email = forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}))&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}))&#10;&#10;    def clean(self):&#10;        cleaned_data = super().clean()&#10;        email = cleaned_data.get('email')&#10;        password = cleaned_data.get('password')&#10;        if email and password:&#10;            user = authenticate(email=email, password=password)&#10;            if user is None:&#10;                raise forms.ValidationError('Email o password non validi')&#10;            cleaned_data['user'] = user&#10;        return cleaned_data&#10;&#10;    def get_user(self):&#10;        return self.cleaned_data.get('user', None)&#10;&#10;class ConcessionariaForm(forms.ModelForm):&#10;    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;    username = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;&#10;    class Meta:&#10;        model = Concessionaria&#10;        fields = ['username', 'email', 'password', 'partita_iva', 'codice_fiscale']&#10;        widgets = {&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;    def save(self, commit=True):&#10;        user = User.objects.create_user(&#10;            username=self.cleaned_data['username'],&#10;            email=self.cleaned_data['email'],&#10;            password=self.cleaned_data['password']&#10;        )&#10;        concessionaria = super().save(commit=False)&#10;        concessionaria.user = user&#10;        if commit:&#10;            concessionaria.save()&#10;        return concessionaria&#10;&#10;class ConcessionariaUpdateForm(forms.ModelForm):&#10;    class Meta:&#10;        model = Concessionaria&#10;        fields = ['partita_iva', 'codice_fiscale']&#10;        widgets = {&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;class ConcessionariaCreateForm(forms.ModelForm):&#10;    password = forms.CharField(widget=forms.PasswordInput, label=&quot;Password&quot;)&#10;    conferma_password = forms.CharField(widget=forms.PasswordInput, label=&quot;Conferma Password&quot;)&#10;    partita_iva = forms.CharField(max_length=11, label=&quot;Partita IVA&quot;)&#10;    codice_fiscale = forms.CharField(max_length=16, label=&quot;Codice Fiscale&quot;)&#10;&#10;    class Meta:&#10;        model = User&#10;        fields = ['username', 'email', 'password']&#10;&#10;    def clean(self):&#10;        cleaned_data = super().clean()&#10;        password = cleaned_data.get('password')&#10;        conferma_password = cleaned_data.get('conferma_password')&#10;        if password != conferma_password:&#10;            raise ValidationError(&quot;Le password non corrispondono.&quot;)&#10;        return cleaned_data&#10;&#10;    def clean_username(self):&#10;        username = self.cleaned_data.get('username')&#10;        if User.objects.filter(username=username).exists():&#10;            raise ValidationError(&quot;Il nome utente Ã¨ giÃ  in uso. Scegli un altro nome utente.&quot;)&#10;        return username&#10;&#10;    def save(self, commit=True):&#10;        user = super().save(commit=True)&#10;        Concessionaria.objects.create(&#10;            user=user,&#10;            partita_iva=self.cleaned_data['partita_iva'],&#10;            codice_fiscale=self.cleaned_data['codice_fiscale']&#10;        )&#10;        return user&#10;" />
              <option name="updatedContent" value="from django import forms&#13;&#10;from django.contrib.auth import authenticate&#13;&#10;from django.contrib.auth.models import User&#13;&#10;from django.core.exceptions import ValidationError&#13;&#10;&#13;&#10;from .models import Concessionaria&#13;&#10;&#13;&#10;class ConcessionariaLoginForm(forms.Form):&#13;&#10;    email = forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;&#13;&#10;    def clean(self):&#13;&#10;        cleaned_data = super().clean()&#13;&#10;        email = cleaned_data.get('email')&#13;&#10;        password = cleaned_data.get('password')&#13;&#10;        if email and password:&#13;&#10;            user = authenticate(email=email, password=password)&#13;&#10;            if user is None:&#13;&#10;                raise forms.ValidationError('Email o password non validi')&#13;&#10;            cleaned_data['user'] = user&#13;&#10;        return cleaned_data&#13;&#10;&#13;&#10;    def get_user(self):&#13;&#10;        return self.cleaned_data.get('user', None)&#13;&#10;&#13;&#10;class ConcessionariaForm(forms.ModelForm):&#13;&#10;    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;    username = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;&#13;&#10;    class Meta:&#13;&#10;        model = Concessionaria&#13;&#10;        fields = ['username', 'email', 'password', 'partita_iva', 'codice_fiscale']&#13;&#10;        widgets = {&#13;&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;    def save(self, commit=True):&#13;&#10;        user = User.objects.create_user(&#13;&#10;            username=self.cleaned_data['username'],&#13;&#10;            email=self.cleaned_data['email'],&#13;&#10;            password=self.cleaned_data['password']&#13;&#10;        )&#13;&#10;        concessionaria = super().save(commit=False)&#13;&#10;        concessionaria.user = user&#13;&#10;        if commit:&#13;&#10;            concessionaria.save()&#13;&#10;        return concessionaria&#13;&#10;&#13;&#10;class ConcessionariaUpdateForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = Concessionaria&#13;&#10;        fields = ['partita_iva', 'codice_fiscale']&#13;&#10;        widgets = {&#13;&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class ConcessionariaCreateForm(forms.ModelForm):&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput, label=&quot;Password&quot;)&#13;&#10;    conferma_password = forms.CharField(widget=forms.PasswordInput, label=&quot;Conferma Password&quot;)&#13;&#10;    partita_iva = forms.CharField(max_length=11, label=&quot;Partita IVA&quot;)&#13;&#10;    codice_fiscale = forms.CharField(max_length=16, label=&quot;Codice Fiscale&quot;)&#13;&#10;&#13;&#10;    class Meta:&#13;&#10;        model = User&#13;&#10;        fields = ['username', 'email', 'password']&#13;&#10;&#13;&#10;    def clean(self):&#13;&#10;        cleaned_data = super().clean()&#13;&#10;        password = cleaned_data.get('password')&#13;&#10;        conferma_password = cleaned_data.get('conferma_password')&#13;&#10;        if password != conferma_password:&#13;&#10;            raise ValidationError(&quot;Le password non corrispondono.&quot;)&#13;&#10;        return cleaned_data&#13;&#10;&#13;&#10;    def save(self, commit=True):&#13;&#10;        user = super().save(commit=True)  # Salva l'oggetto User prima&#13;&#10;&#13;&#10;        # Creazione del modello Concessionaria&#13;&#10;        Concessionaria.objects.create(&#13;&#10;            user=user,&#13;&#10;            partita_iva=self.cleaned_data['partita_iva'],&#13;&#10;            codice_fiscale=self.cleaned_data['codice_fiscale']&#13;&#10;        )&#13;&#10;        return user" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/static/css/user_autos_custom.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/static/css/user_autos_custom.css" />
              <option name="originalContent" value="/* CSS personalizzato per il filtro centrale in user_autos.html */&#10;.filter-section {&#10;    background: #fff;&#10;    border-radius: 0.5rem;&#10;    box-shadow: 0 2px 16px #2563eb22;&#10;    border: 1.5px solid #e0e0e0;&#10;    margin-bottom: 2rem;&#10;    max-width: 1200px;&#10;    min-width: 700px;&#10;    width: 90vw;&#10;    margin-left: auto;&#10;    margin-right: auto;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;}&#10;.filter-section form {&#10;    width: 100%;&#10;}&#10;.filter-section .row.g-3.filter-grid {&#10;    flex-wrap: nowrap;&#10;    gap: 1.2rem;&#10;    justify-content: flex-start;&#10;}&#10;.filter-grid-custom {&#10;    display: flex;&#10;    flex-wrap: nowrap;&#10;    gap: 0.7rem;&#10;    justify-content: flex-start;&#10;}&#10;.filter-grid-custom.filter-grid-2rows {&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: 0.7rem;&#10;}&#10;.filter-row {&#10;    display: flex;&#10;    flex-direction: row;&#10;    gap: 0.7rem;&#10;}&#10;.filter-col {&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: flex-start;&#10;    width: 80px;&#10;    min-width: 60px;&#10;    max-width: 90px;&#10;    margin: 0;&#10;    padding: 0;&#10;    flex: 1 1 0;&#10;    min-width: 120px;&#10;    max-width: 220px;&#10;}&#10;.filter-section .filter-col {&#10;    flex: 1 1 0;&#10;    min-width: 120px;&#10;    max-width: 220px;&#10;    width: 100%;&#10;    /* Nuove dimensioni per riquadri piÃ¹ stretti e lunghi */&#10;    padding-left: 0;&#10;    padding-right: 0;&#10;}&#10;.filter-section .form-control, .filter-section .form-select {&#10;    border-radius: 0.3rem !important; /* meno rotondo */&#10;    border: 1.5px solid #e0e0e0;&#10;    box-shadow: 0 1px 4px #0001;&#10;    transition: border-color 0.2s;&#10;    font-size: 0.92rem;&#10;    padding: 0.3rem 0.4rem;&#10;    width: 100%;&#10;    min-width: 0;&#10;    max-width: 100%;&#10;    font-size: 1rem;&#10;    padding: 0.5rem 0.7rem;&#10;    /* Altezza maggiore per input piÃ¹ lunghi */&#10;    height: 2.5rem;&#10;}&#10;.filter-input {&#10;    width: 100%;&#10;    min-width: 0;&#10;    max-width: 100%;&#10;    font-size: 0.92rem;&#10;    padding: 0.3rem 0.4rem;&#10;    box-sizing: border-box;&#10;}&#10;.filter-section .form-control:focus, .filter-section .form-select:focus {&#10;    border-color: #2563eb;&#10;    box-shadow: 0 0 0 0.15rem #2563eb33;&#10;}&#10;.filter-label {&#10;    font-weight: 600;&#10;    color: #1e3a8a;&#10;    margin-bottom: 0.3rem;&#10;}&#10;.btn-primary {&#10;    border-radius: 0.5rem;&#10;    background: linear-gradient(90deg, #2563eb 60%, #1e40af 100%);&#10;    border: none;&#10;    font-weight: 600;&#10;    font-size: 1.1rem;&#10;    letter-spacing: 0.5px;&#10;    box-shadow: 0 2px 8px #2563eb22;&#10;}&#10;.filter-section .filter-actions {&#10;    width: 100%;&#10;    display: flex;&#10;    justify-content: flex-end;&#10;    margin-top: 1.2rem;&#10;}&#10;@media (max-width: 1300px) {&#10;    .filter-section {&#10;        max-width: 98vw;&#10;        min-width: 0;&#10;        width: 98vw;&#10;    }&#10;    .filter-section .row.g-3.filter-grid {&#10;        gap: 1.2rem;&#10;    }&#10;}&#10;@media (max-width: 900px) {&#10;    .filter-section {&#10;        min-width: 90vw !important;&#10;        max-width: 98vw !important;&#10;        padding: 1.2rem !important;&#10;    }&#10;    .filter-section .row.g-3 {&#10;        flex-direction: column;&#10;        gap: 0.7rem;&#10;    }&#10;    .filter-section .col.filter-col {&#10;        width: 100%;&#10;        margin-bottom: 0.7rem;&#10;        max-width: 100%;&#10;    }&#10;    .filter-row {&#10;        flex-direction: column;&#10;        gap: 0.7rem;&#10;    }&#10;    .filter-col {&#10;        max-width: 100%;&#10;        min-width: 0;&#10;    }&#10;}&#10;@media (min-width: 768px) {&#10;    .filter-section .filter-col {&#10;        min-width: 180px;&#10;        max-width: 320px;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/* CSS personalizzato per il filtro centrale in user_autos.html */&#10;.filter-section {&#10;    background: #fff;&#10;    border-radius: 0.5rem;&#10;    box-shadow: 0 2px 16px #2563eb22;&#10;    border: 1.5px solid #e0e0e0;&#10;    margin-bottom: 2rem;&#10;    max-width: 1200px;&#10;    min-width: 700px;&#10;    width: 90vw;&#10;    margin-left: auto;&#10;    margin-right: auto;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;}&#10;.filter-section form {&#10;    width: 100%;&#10;}&#10;.filter-section .row.g-3.filter-grid {&#10;    flex-wrap: wrap;&#10;    gap: 1.2rem 0.5rem;&#10;    justify-content: flex-start;&#10;}&#10;.filter-grid-custom {&#10;    display: flex;&#10;    flex-wrap: nowrap;&#10;    gap: 0.7rem;&#10;    justify-content: flex-start;&#10;}&#10;.filter-grid-custom.filter-grid-2rows {&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: 0.7rem;&#10;}&#10;.filter-row {&#10;    display: flex;&#10;    flex-direction: row;&#10;    gap: 0.7rem;&#10;}&#10;.filter-col {&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: flex-start;&#10;    width: 80px;&#10;    min-width: 60px;&#10;    max-width: 90px;&#10;    margin: 0;&#10;    padding: 0;&#10;    flex: 1 1 0;&#10;    min-width: 120px;&#10;    max-width: 220px;&#10;}&#10;.filter-section .filter-col {&#10;    flex: 0 0 22%;&#10;    max-width: 22%;&#10;    min-width: 180px;&#10;    padding-left: 0;&#10;    padding-right: 0;&#10;    margin-bottom: 0.5rem;&#10;}&#10;.filter-section .form-control, .filter-section .form-select {&#10;    width: 100%;&#10;    min-width: 0;&#10;    max-width: 100%;&#10;    font-size: 1rem;&#10;    padding: 0.5rem 0.7rem;&#10;    height: 2.7rem;&#10;}&#10;.filter-input {&#10;    width: 100%;&#10;    min-width: 0;&#10;    max-width: 100%;&#10;    font-size: 0.92rem;&#10;    padding: 0.3rem 0.4rem;&#10;    box-sizing: border-box;&#10;}&#10;.filter-section .form-control:focus, .filter-section .form-select:focus {&#10;    border-color: #2563eb;&#10;    box-shadow: 0 0 0 0.15rem #2563eb33;&#10;}&#10;.filter-label {&#10;    font-weight: 600;&#10;    color: #1e3a8a;&#10;    margin-bottom: 0.3rem;&#10;}&#10;.btn-primary {&#10;    border-radius: 0.5rem;&#10;    background: linear-gradient(90deg, #2563eb 60%, #1e40af 100%);&#10;    border: none;&#10;    font-weight: 600;&#10;    font-size: 1.1rem;&#10;    letter-spacing: 0.5px;&#10;    box-shadow: 0 2px 8px #2563eb22;&#10;}&#10;.filter-section .filter-actions {&#10;    width: 100%;&#10;    display: flex;&#10;    justify-content: flex-end;&#10;    margin-top: 1.2rem;&#10;}&#10;@media (max-width: 1300px) {&#10;    .filter-section {&#10;        max-width: 98vw;&#10;        min-width: 0;&#10;        width: 98vw;&#10;    }&#10;    .filter-section .row.g-3.filter-grid {&#10;        gap: 1.2rem;&#10;    }&#10;}&#10;@media (max-width: 1200px) {&#10;    .filter-section .filter-col {&#10;        flex: 0 0 45%;&#10;        max-width: 45%;&#10;        min-width: 140px;&#10;    }&#10;}&#10;@media (max-width: 900px) {&#10;    .filter-section {&#10;        min-width: 90vw !important;&#10;        max-width: 98vw !important;&#10;        padding: 1.2rem !important;&#10;    }&#10;    .filter-section .row.g-3 {&#10;        flex-direction: column;&#10;        gap: 0.7rem;&#10;    }&#10;    .filter-section .col.filter-col {&#10;        width: 100%;&#10;        margin-bottom: 0.7rem;&#10;        max-width: 100%;&#10;    }&#10;    .filter-row {&#10;        flex-direction: column;&#10;        gap: 0.7rem;&#10;    }&#10;    .filter-col {&#10;        max-width: 100%;&#10;        min-width: 0;&#10;    }&#10;}&#10;@media (min-width: 768px) {&#10;    .filter-section .filter-col {&#10;        min-width: 180px;&#10;        max-width: 320px;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/add_auto_form.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/add_auto_form.html" />
              <option name="updatedContent" value="{# Template parziale per il form di aggiunta auto #}&#10;{% for field in form %}&#10;  &lt;div class=&quot;mb-3&quot;&gt;&#10;    {{ field.label_tag }}&#10;    {{ field }}&#10;    {% if field.help_text %}&lt;small class=&quot;form-text text-muted&quot;&gt;{{ field.help_text }}&lt;/small&gt;{% endif %}&#10;    {% for error in field.errors %}&#10;      &lt;div class=&quot;text-danger small&quot;&gt;{{ error }}&lt;/div&gt;&#10;    {% endfor %}&#10;  &lt;/div&gt;&#10;{% endfor %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/add_auto_template.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/add_auto_template.html" />
              <option name="originalContent" value="{% extends &quot;base.html&quot; %}&#10;&#10;{% block content %}&#10;&lt;div class=&quot;container mt-5&quot;&gt;&#10;     &lt;div class=&quot;row justify-content-center&quot; style=&quot;width: 100%;&quot;&gt;&#10;        &lt;div class=&quot;col-md-10&quot; style=&quot;width: 100%;&quot;&gt;&#10;            &lt;div class=&quot;card shadow-lg border-0&quot; style=&quot;border-radius: 18px; width: 100%;&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-gradient bg-primary text-white rounded-top-4 py-3 d-flex align-items-center&quot;&gt;&#10;                    &lt;i class=&quot;bi bi-plus-circle fs-3 me-2&quot;&gt;&lt;/i&gt;&#10;                    &lt;h3 class=&quot;mb-0&quot;&gt;Aggiungi una nuova auto&lt;/h3&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body bg-light rounded-bottom-4&quot;&gt;&#10;                    &lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; id=&quot;add-auto-form&quot; class=&quot;needs-validation&quot; novalidate&gt;&#10;                        {% csrf_token %}&#10;                        &lt;div class=&quot;row&quot;&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.marca.label_tag }}{{ form.marca }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.cilindrata.label_tag }}{{ form.cilindrata }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.carburante.label_tag }}{{ form.carburante }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.cambio.label_tag }}{{ form.cambio }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.anno.label_tag }}{{ form.anno }}&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.modello.label_tag }}{{ form.modello }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.chilometraggio.label_tag }}{{ form.chilometraggio }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.trazione.label_tag }}{{ form.trazione }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;&#10;                                    &lt;label for=&quot;id_disponibilita&quot; class=&quot;form-label&quot;&gt;DisponibilitÃ &lt;/label&gt;&#10;                                    &lt;select name=&quot;disponibilita&quot; id=&quot;id_disponibilita&quot; class=&quot;form-select&quot;&gt;&#10;                                        &lt;option value=&quot;0&quot; {% if form.disponibilita.value == '0' %}selected{% endif %}&gt;Vendita&lt;/option&gt;&#10;                                        &lt;option value=&quot;1&quot; {% if form.disponibilita.value == '1' %}selected{% endif %}&gt;Affitto&lt;/option&gt;&#10;                                        &lt;option value=&quot;2&quot; {% if form.disponibilita.value == '2' %}selected{% endif %}&gt;Vendita e Affitto&lt;/option&gt;&#10;                                    &lt;/select&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot; id=&quot;prezzo-vendita-group&quot; style=&quot;display:none;&quot;&gt;&#10;                                    {{ form.prezzo_vendita.label_tag }}{{ form.prezzo_vendita }}&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot; id=&quot;prezzo-affitto-group&quot; style=&quot;display:none;&quot;&gt;&#10;                                    {{ form.prezzo_affitto.label_tag }}{{ form.prezzo_affitto }}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;row mt-4&quot;&gt;&#10;                            &lt;div class=&quot;col-12 d-flex justify-content-center mb-3&quot;&gt;&#10;                                &lt;div style=&quot;min-width:300px; max-width:400px; width:100%;&quot;&gt;&#10;                                    {{ form.immagine.label_tag }}{{ form.immagine }}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;col-12 d-flex justify-content-center&quot;&gt;&#10;                                &lt;div style=&quot;min-width:300px; max-width:600px; width:100%;&quot;&gt;&#10;                                    {{ form.descrizione.label_tag }}{{ form.descrizione }}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;d-flex justify-content-between mt-4&quot;&gt;&#10;                            &lt;a href=&quot;{% url 'Auto:user_autos' %}&quot; class=&quot;btn btn-outline-secondary&quot;&gt;Chiudi&lt;/a&gt;&#10;                            &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary px-4&quot;&gt;Salva&lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&lt;script&gt;&#10;    function togglePrezzi() {&#10;        var disp = document.getElementById('id_disponibilita').value;&#10;        document.getElementById('prezzo-vendita-group').style.display = (disp === '0' || disp === '2') ? '' : 'none';&#10;        document.getElementById('prezzo-affitto-group').style.display = (disp === '1' || disp === '2') ? '' : 'none';&#10;    }&#10;    document.getElementById('id_disponibilita').addEventListener('change', togglePrezzi);&#10;    window.addEventListener('DOMContentLoaded', togglePrezzi);&#10;&lt;/script&gt;&#10;{% endblock %}&#10;" />
              <option name="updatedContent" value="{% extends &quot;base.html&quot; %}&#10;&#10;{% block content %}&#10;&lt;div class=&quot;container mt-5&quot;&gt;&#10;     &lt;div class=&quot;row justify-content-center&quot; style=&quot;width: 100%;&quot;&gt;&#10;        &lt;div class=&quot;col-md-10&quot; style=&quot;width: 100%;&quot;&gt;&#10;            &lt;div class=&quot;card shadow-lg border-0&quot; style=&quot;border-radius: 18px; width: 100%;&quot;&gt;&#10;                &lt;div class=&quot;card-header bg-gradient bg-primary text-white rounded-top-4 py-3 d-flex align-items-center&quot;&gt;&#10;                    &lt;i class=&quot;bi bi-plus-circle fs-3 me-2&quot;&gt;&lt;/i&gt;&#10;                    &lt;h3 class=&quot;mb-0&quot;&gt;Aggiungi una nuova auto&lt;/h3&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;card-body bg-light rounded-bottom-4&quot;&gt;&#10;                    &lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; id=&quot;add-auto-form&quot; class=&quot;needs-validation&quot; novalidate&gt;&#10;                        {% csrf_token %}&#10;                        &lt;div class=&quot;row&quot;&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.marca.label_tag }}{{ form.marca }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.cilindrata.label_tag }}{{ form.cilindrata }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.carburante.label_tag }}{{ form.carburante }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.cambio.label_tag }}{{ form.cambio }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.anno.label_tag }}{{ form.anno }}&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.modello.label_tag }}{{ form.modello }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.chilometraggio.label_tag }}{{ form.chilometraggio }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;{{ form.trazione.label_tag }}{{ form.trazione }}&lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot;&gt;&#10;                                    &lt;label for=&quot;id_disponibilita&quot; class=&quot;form-label&quot;&gt;DisponibilitÃ &lt;/label&gt;&#10;                                    &lt;select name=&quot;disponibilita&quot; id=&quot;id_disponibilita&quot; class=&quot;form-select&quot; required&gt;&#10;                                        &lt;option value=&quot;0&quot; {% if form.disponibilita.value == '0' %}selected{% endif %}&gt;Vendita&lt;/option&gt;&#10;                                        &lt;option value=&quot;1&quot; {% if form.disponibilita.value == '1' %}selected{% endif %}&gt;Affitto&lt;/option&gt;&#10;                                        &lt;option value=&quot;2&quot; {% if form.disponibilita.value == '2' %}selected{% endif %}&gt;Vendita e Affitto&lt;/option&gt;&#10;                                    &lt;/select&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot; id=&quot;prezzo-vendita-group&quot; style=&quot;display:none;&quot;&gt;&#10;                                    {{ form.prezzo_vendita.label_tag }}&#10;                                    &lt;input type=&quot;number&quot; name=&quot;prezzo_vendita&quot; id=&quot;id_prezzo_vendita&quot; class=&quot;form-control&quot; step=&quot;0.01&quot; min=&quot;0&quot; value=&quot;{{ form.prezzo_vendita.value|default:'' }}&quot; required&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;mb-3&quot; id=&quot;prezzo-affitto-group&quot; style=&quot;display:none;&quot;&gt;&#10;                                    {{ form.prezzo_affitto.label_tag }}&#10;                                    &lt;input type=&quot;number&quot; name=&quot;prezzo_affitto&quot; id=&quot;id_prezzo_affitto&quot; class=&quot;form-control&quot; step=&quot;0.01&quot; min=&quot;0&quot; value=&quot;{{ form.prezzo_affitto.value|default:'' }}&quot; required&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;row mt-4&quot;&gt;&#10;                            &lt;div class=&quot;col-12 d-flex justify-content-center mb-3&quot;&gt;&#10;                                &lt;div style=&quot;min-width:300px; max-width:400px; width:100%;&quot;&gt;&#10;                                    {{ form.immagine.label_tag }}{{ form.immagine }}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;col-12 d-flex justify-content-center&quot;&gt;&#10;                                &lt;div style=&quot;min-width:300px; max-width:600px; width:100%;&quot;&gt;&#10;                                    {{ form.descrizione.label_tag }}{{ form.descrizione }}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;d-flex justify-content-between mt-4&quot;&gt;&#10;                            &lt;a href=&quot;{% url 'Auto:user_autos' %}&quot; class=&quot;btn btn-outline-secondary&quot;&gt;Chiudi&lt;/a&gt;&#10;                            &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary px-4&quot;&gt;Salva&lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&lt;script&gt;&#10;    function togglePrezzi() {&#10;        var disp = document.getElementById('id_disponibilita').value;&#10;        var vendita = document.getElementById('prezzo-vendita-group');&#10;        var affitto = document.getElementById('prezzo-affitto-group');&#10;        var venditaInput = document.getElementById('id_prezzo_vendita');&#10;        var affittoInput = document.getElementById('id_prezzo_affitto');&#10;        if (disp === '0') {&#10;            vendita.style.display = '';&#10;            affitto.style.display = 'none';&#10;            venditaInput.required = true;&#10;            affittoInput.required = false;&#10;            affittoInput.value = '';&#10;        } else if (disp === '1') {&#10;            vendita.style.display = 'none';&#10;            affitto.style.display = '';&#10;            venditaInput.required = false;&#10;            affittoInput.required = true;&#10;            venditaInput.value = '';&#10;        } else if (disp === '2') {&#10;            vendita.style.display = '';&#10;            affitto.style.display = '';&#10;            venditaInput.required = true;&#10;            affittoInput.required = true;&#10;        }&#10;    }&#10;    document.getElementById('id_disponibilita').addEventListener('change', togglePrezzi);&#10;    window.addEventListener('DOMContentLoaded', togglePrezzi);&#10;&lt;/script&gt;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_confirm_delete.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_confirm_delete.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/base.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/base.html" />
              <option name="originalContent" value="{% load static %}&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;{% block title %}Autosalone Modena{% endblock %}&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{% static 'bootstrap/css/bootstrap.min.css' %}&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{% static 'css/home_custom.css' %}&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;header class=&quot;mb-4&quot;&gt;&#10;        &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark&quot; style=&quot;background-color: darkblue; border-bottom: none; box-shadow: none;&quot;&gt;&#10;            &lt;div class=&quot;container-fluid&quot;&gt;&#10;                &lt;a class=&quot;navbar-brand d-flex align-items-center&quot; href=&quot;/&quot; style=&quot;gap: 10px;&quot;&gt;&#10;                    &lt;span class=&quot;header-title text-end&quot; style=&quot;font-family: 'Pacifico', cursive; font-size:2.7rem; font-weight:900; letter-spacing:2px; color:#fff; text-shadow:2px 2px 8px #1e3a8a, 0 0 12px #2563eb; margin:0 18px 0 0; flex:1;&quot;&gt;Autosaloon&lt;span style=&quot;color:#2563eb;&quot;&gt;Modena&lt;/span&gt;&lt;/span&gt;&#10;                &lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/nav&gt;&#10;    &lt;/header&gt;&#10;    &lt;main&gt;&#10;        &lt;div class=&quot;bg-light&quot; style=&quot;min-height:80vh;&quot;&gt;&#10;            &lt;div class=&quot;w-100&quot; style=&quot;max-width:1200px; margin: 0 auto;&quot;&gt;&#10;                {% block content %}{% endblock %}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/main&gt;&#10;    &lt;footer class=&quot;mt-5 text-center text-muted py-3&quot;&gt;&#10;       &lt;div style=&quot;text-align:center;&quot;&gt;&#10;            &lt;div style=&quot;margin-bottom: 10px;&quot;&gt;&#10;                &lt;a href=&quot;https://facebook.com&quot; target=&quot;_blank&quot; style=&quot;margin:0 8px;display:inline-block;&quot;&gt;&#10;                    &lt;img src=&quot;https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/facebook.svg&quot; alt=&quot;Facebook&quot; style=&quot;width:32px;height:32px;filter:grayscale(1);&quot;&gt;&#10;                &lt;/a&gt;&#10;                &lt;a href=&quot;https://wa.me/&quot; target=&quot;_blank&quot; style=&quot;margin:0 8px;display:inline-block;&quot;&gt;&#10;                    &lt;img src=&quot;https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/whatsapp.svg&quot; alt=&quot;WhatsApp&quot; style=&quot;width:32px;height:32px;filter:grayscale(1);&quot;&gt;&#10;                &lt;/a&gt;&#10;                &lt;a href=&quot;https://instagram.com&quot; target=&quot;_blank&quot; style=&quot;margin:0 8px;display:inline-block;&quot;&gt;&#10;                    &lt;img src=&quot;https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/instagram.svg&quot; alt=&quot;Instagram&quot; style=&quot;width:32px;height:32px;filter:grayscale(1);&quot;&gt;&#10;                &lt;/a&gt;&#10;                &lt;a href=&quot;mailto:info@autosaloonmodena.it&quot; target=&quot;_blank&quot; style=&quot;margin:0 8px;display:inline-block;&quot;&gt;&#10;                    &lt;img src=&quot;https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/gmail.svg&quot; alt=&quot;Gmail&quot; style=&quot;width:32px;height:32px;filter:grayscale(1);&quot;&gt;&#10;                &lt;/a&gt;&#10;                &lt;a href=&quot;https://linkedin.com&quot; target=&quot;_blank&quot; style=&quot;margin:0 8px;display:inline-block;&quot;&gt;&#10;                    &lt;img src=&quot;https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/linkedin.svg&quot; alt=&quot;LinkedIn&quot; style=&quot;width:32px;height:32px;filter:grayscale(1);&quot;&gt;&#10;                &lt;/a&gt;&#10;            &lt;/div&gt;&#10;            &lt;p&gt;&#10;                Copyright Â© 2025 AutoSalonModena S.p.A., societÃ  ad azionista unico sottoposta a direzione e coordinamento da parte della MutinaAutoSalon.&lt;br&gt;&#10;                Tutti i diritti riservati. P.IVA n. ???????????&#10;            &lt;/p&gt;&#10;        &lt;/div&gt;&#10;    &lt;/footer&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="{% load static %}&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;it&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;{% block title %}Autosalone Modena{% endblock %}&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{% static 'bootstrap/css/bootstrap.min.css' %}&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{% static 'css/home_custom.css' %}&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;header class=&quot;mb-4&quot;&gt;&#10;        &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark&quot; style=&quot;background-color: darkblue; border-bottom: none; box-shadow: none;&quot;&gt;&#10;            &lt;div class=&quot;container-fluid&quot;&gt;&#10;                &lt;a class=&quot;navbar-brand d-flex align-items-center&quot; href=&quot;/&quot; style=&quot;gap: 10px;&quot;&gt;&#10;                    &lt;span class=&quot;header-title text-end&quot; style=&quot;font-family: 'Pacifico', cursive; font-size:2.7rem; font-weight:900; letter-spacing:2px; color:#fff; text-shadow:2px 2px 8px #1e3a8a, 0 0 12px #2563eb; margin:0 18px 0 0; flex:1;&quot;&gt;Autosaloon&lt;span style=&quot;color:#2563eb;&quot;&gt;Modena&lt;/span&gt;&lt;/span&gt;&#10;                &lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/nav&gt;&#10;    &lt;/header&gt;&#10;    &lt;main&gt;&#10;        &lt;div class=&quot;bg-light&quot; style=&quot;min-height:80vh;&quot;&gt;&#10;            &lt;div class=&quot;w-100&quot; style=&quot;max-width:1200px; margin: 0 auto; padding-top: 0;&quot;&gt;&#10;                {% block content %}{% endblock %}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/main&gt;&#10;    &lt;footer class=&quot;mt-5 text-center text-muted py-3&quot;&gt;&#10;       &lt;div style=&quot;text-align:center;&quot;&gt;&#10;            &lt;div style=&quot;margin-bottom: 10px;&quot;&gt;&#10;                &lt;a href=&quot;https://facebook.com&quot; target=&quot;_blank&quot; style=&quot;margin:0 8px;display:inline-block;&quot;&gt;&#10;                    &lt;img src=&quot;https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/facebook.svg&quot; alt=&quot;Facebook&quot; style=&quot;width:32px;height:32px;filter:grayscale(1);&quot;&gt;&#10;                &lt;/a&gt;&#10;                &lt;a href=&quot;https://wa.me/&quot; target=&quot;_blank&quot; style=&quot;margin:0 8px;display:inline-block;&quot;&gt;&#10;                    &lt;img src=&quot;https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/whatsapp.svg&quot; alt=&quot;WhatsApp&quot; style=&quot;width:32px;height:32px;filter:grayscale(1);&quot;&gt;&#10;                &lt;/a&gt;&#10;                &lt;a href=&quot;https://instagram.com&quot; target=&quot;_blank&quot; style=&quot;margin:0 8px;display:inline-block;&quot;&gt;&#10;                    &lt;img src=&quot;https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/instagram.svg&quot; alt=&quot;Instagram&quot; style=&quot;width:32px;height:32px;filter:grayscale(1);&quot;&gt;&#10;                &lt;/a&gt;&#10;                &lt;a href=&quot;mailto:info@autosaloonmodena.it&quot; target=&quot;_blank&quot; style=&quot;margin:0 8px;display:inline-block;&quot;&gt;&#10;                    &lt;img src=&quot;https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/gmail.svg&quot; alt=&quot;Gmail&quot; style=&quot;width:32px;height:32px;filter:grayscale(1);&quot;&gt;&#10;                &lt;/a&gt;&#10;                &lt;a href=&quot;https://linkedin.com&quot; target=&quot;_blank&quot; style=&quot;margin:0 8px;display:inline-block;&quot;&gt;&#10;                    &lt;img src=&quot;https://cdn.jsdelivr.net/gh/simple-icons/simple-icons/icons/linkedin.svg&quot; alt=&quot;LinkedIn&quot; style=&quot;width:32px;height:32px;filter:grayscale(1);&quot;&gt;&#10;                &lt;/a&gt;&#10;            &lt;/div&gt;&#10;            &lt;p&gt;&#10;                Copyright Â© 2025 AutoSalonModena S.p.A., societÃ  ad azionista unico sottoposta a direzione e coordinamento da parte della MutinaAutoSalon.&lt;br&gt;&#10;                Tutti i diritti riservati. P.IVA n. ???????????&#10;            &lt;/p&gt;&#10;        &lt;/div&gt;&#10;    &lt;/footer&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Drusi/Progetto_TecWeb/Autosaloon_Modena/apps/Auto/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Drusi/Progetto_TecWeb/Autosaloon_Modena/apps/Auto/views.py" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Auto/user_autos.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Auto/user_autos.html" />
              <option name="originalContent" value="&#10;&#10;&#10;" />
              <option name="updatedContent" value="{% extends 'base.html' %}&#10;&#10;{% block content %}&#10;&#10;                    &lt;a href=&quot;{% url 'Auto:edit_auto' auto.pk %}&quot; class=&quot;btn btn-primary btn-sm&quot;&gt;Modifica&lt;/a&gt;&#10;                    &lt;form method=&quot;post&quot; action=&quot;{% url 'Auto:delete_auto' auto.pk %}&quot; style=&quot;display:inline;&quot;&gt;&#10;                        {% csrf_token %}&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-danger btn-sm delete-auto-btn&quot;&gt;Elimina&lt;/button&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&lt;/div&gt;&#10;&#10;{% include 'Autosalone/confirm_delete_popup.html' %}&#10;&lt;script&gt;&#10;document.addEventListener('DOMContentLoaded', function() {&#10;    let formToDelete = null;&#10;    document.querySelectorAll('.delete-auto-btn').forEach(function(btn) {&#10;        btn.addEventListener('click', function(e) {&#10;            e.preventDefault();&#10;            formToDelete = btn.closest('form');&#10;            var modal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));&#10;            var confirmBtn = document.getElementById('confirmDeleteBtn');&#10;            confirmBtn.onclick = function() {&#10;                if(formToDelete) formToDelete.submit();&#10;                modal.hide();&#10;            };&#10;            modal.show();&#10;        });&#10;    });&#10;});&#10;&lt;/script&gt;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Autosalone/confirm_delete_popup.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Autosalone/confirm_delete_popup.html" />
              <option name="updatedContent" value="&lt;!-- Popup di conferma eliminazione generico e riutilizzabile --&gt;&#10;&lt;div class=&quot;modal fade&quot; id=&quot;confirmDeleteModal&quot; tabindex=&quot;-1&quot; aria-labelledby=&quot;confirmDeleteModalLabel&quot; aria-hidden=&quot;true&quot;&gt;&#10;  &lt;div class=&quot;modal-dialog modal-dialog-centered&quot;&gt;&#10;    &lt;div class=&quot;modal-content&quot;&gt;&#10;      &lt;div class=&quot;modal-header&quot;&gt;&#10;        &lt;h5 class=&quot;modal-title&quot; id=&quot;confirmDeleteModalLabel&quot;&gt;Conferma eliminazione&lt;/h5&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;modal&quot; aria-label=&quot;Chiudi&quot;&gt;&lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;modal-body&quot;&gt;&#10;        Sei sicuro di voler eliminare questo elemento? Questa azione non puÃ² essere annullata.&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;modal-footer&quot;&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-bs-dismiss=&quot;modal&quot;&gt;Annulla&lt;/button&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot; id=&quot;confirmDeleteBtn&quot;&gt;Elimina&lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/base.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/base.html" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>