<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/Autosaloon_Modena/settings.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/Autosaloon_Modena/settings.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Django settings for Autosaloon_Modena project.&#10;&#10;Generated by 'django-admin startproject' using Django 5.1.3.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/5.1/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/5.1/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;from pathlib import Path&#10;# Build paths inside the project like this: BASE_DIR / 'subdir'.&#10;BASE_DIR = Path(__file__).resolve().parent.parent&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = 'django-insecure-4!34hlju3!853arjxj2kdux&amp;kw89=q0pt8crocxqp-#@pa!#me'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'apps.Autosalone.apps.AutosaloneConfig',&#10;    'apps.Utente.apps.UtenteConfig',&#10;    'apps.Concessionaria.apps.ConcessionariaConfig',&#10;    'apps.Auto.apps.AutoConfig',&#10;    'django_registration',&#10;    'django_celery_results',&#10;    'django_celery_beat',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'Autosaloon_Modena.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [BASE_DIR / 'templates'],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'Autosaloon_Modena.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/5.1/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': BASE_DIR / 'db.sqlite3',&#10;    }&#10;}&#10;&#10;&#10;AUTHENTICATION_BACKENDS = [&#10;    'django.contrib.auth.backends.ModelBackend',  # Per il modello User&#10;    'apps.Concessionaria.backends.ConcessionariaBackend',    # Per il modello Concessionaria&#10;]&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/5.1/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/5.1/howto/static-files/&#10;&#10;STATIC_URL = 'static/'&#10;STATICFILES_DIRS = [BASE_DIR / 'static']&#10;&#10;MEDIA_URL = '/media/'&#10;MEDIA_ROOT = BASE_DIR / 'media'&#10;&#10;&#10;# Default primary key field type&#10;# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field&#10;&#10;DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'&#10;&#10;# django-registration settings&#10;# ACCOUNT_ACTIVATION_DAYS = 7  # giorni per attivare l'account via email&#10;REGISTRATION_AUTO_LOGIN = True  # login automatico dopo la registrazione&#10;LOGIN_REDIRECT_URL = '/'&#10;LOGOUT_REDIRECT_URL = '/'&#10;&#10;CELERY_BROKER_URL = 'redis://localhost:6379/0'&#10;CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'&#10;CELERY_BEAT_SCHEDULE = {&#10;    'check_auto_disponibilita_ogni_ora': {&#10;    'check_auto_disponibilita_ogni_ora': {&#10;        'schedule': 6.0,  # ogni 6 secondi&#10;    },&#10;        'schedule': 6.0,  # ogni 6 secondi&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Django settings for Autosaloon_Modena project.&#10;&#10;Generated by 'django-admin startproject' using Django 5.1.3.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/5.1/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/5.1/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;from pathlib import Path&#10;from celery.schedules import crontab&#10;&#10;# Build paths inside the project like this: BASE_DIR / 'subdir'.&#10;BASE_DIR = Path(__file__).resolve().parent.parent&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = 'django-insecure-4!34hlju3!853arjxj2kdux&amp;kw89=q0pt8crocxqp-#@pa!#me'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'apps.Autosalone.apps.AutosaloneConfig',&#10;    'apps.Utente.apps.UtenteConfig',&#10;    'apps.Concessionaria.apps.ConcessionariaConfig',&#10;    'apps.Auto.apps.AutoConfig',&#10;    'django_registration',&#10;    'django_celery_results',&#10;    'django_celery_beat',&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'Autosaloon_Modena.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [BASE_DIR / 'templates'],&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.debug',&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'Autosaloon_Modena.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/5.1/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': BASE_DIR / 'db.sqlite3',&#10;    }&#10;}&#10;&#10;&#10;AUTHENTICATION_BACKENDS = [&#10;    'django.contrib.auth.backends.ModelBackend',  # Per il modello User&#10;    'apps.Concessionaria.backends.ConcessionariaBackend',    # Per il modello Concessionaria&#10;]&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/5.1/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/5.1/howto/static-files/&#10;&#10;STATIC_URL = 'static/'&#10;STATICFILES_DIRS = [BASE_DIR / 'static']&#10;&#10;MEDIA_URL = '/media/'&#10;MEDIA_ROOT = BASE_DIR / 'media'&#10;&#10;&#10;# Default primary key field type&#10;# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field&#10;&#10;DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'&#10;&#10;# django-registration settings&#10;# ACCOUNT_ACTIVATION_DAYS = 7  # giorni per attivare l'account via email&#10;REGISTRATION_AUTO_LOGIN = True  # login automatico dopo la registrazione&#10;LOGIN_REDIRECT_URL = '/'&#10;LOGOUT_REDIRECT_URL = '/'&#10;&#10;CELERY_BROKER_URL = 'redis://localhost:6379/0'&#10;CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'&#10;CELERY_BEAT_SCHEDULE = {&#10;    'check_auto_disponibilita_ogni_minuto': {&#10;        'task': 'apps.Auto.tasks.check_auto_disponibilita_task',&#10;        'schedule': crontab(minute='*/1'),  # ogni minuto&#10;    },&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/apps/Auto/auto_utils.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/apps/Auto/auto_utils.py" />
              <option name="originalContent" value="from .models import AutoVendita, AutoAffitto, AutoListaAffitto&#10;&#10;&#10;def gestione_vendita_affitto(prezzo_vendita, prezzo_affitto, auto, original_vendita, original_affitto):&#10;    &quot;&quot;&quot;&#10;    Gestisce la logica di vendita e affitto delle auto.&#10;    Questa funzione può essere utilizzata per implementare la logica di business&#10;    relativa alla gestione delle vendite e degli affitti delle auto.&#10;    &quot;&quot;&quot;&#10;    # Implementa qui la logica per gestire le vendite e gli affitti delle auto&#10;    # Gestione AutoVendita&#10;    if prezzo_vendita and not original_vendita:&#10;        AutoVendita.objects.create(auto=auto, prezzo_vendita=prezzo_vendita, venditore=auto.id_possessore)&#10;    elif not prezzo_vendita and original_vendita:&#10;        original_vendita.delete()&#10;    elif prezzo_vendita and original_vendita:&#10;        original_vendita.delete()&#10;        AutoVendita.objects.create(auto=auto, prezzo_vendita=prezzo_vendita, venditore=auto.id_possessore)&#10;&#10;    # Gestione AutoAffitto&#10;    if prezzo_affitto and not original_affitto:&#10;        AutoAffitto.objects.create(auto=auto, prezzo_affitto=prezzo_affitto, affittante=auto.id_possessore)&#10;    elif not prezzo_affitto and original_affitto:&#10;        original_affitto.delete()&#10;    elif prezzo_affitto and original_affitto:&#10;        original_affitto.delete()&#10;        AutoAffitto.objects.create(auto=auto, prezzo_affitto=prezzo_affitto, affittante=auto.id_possessore)&#10;&#10;def check_affittata_in_periodo (auto, data_inizio, data_fine):&#10;    &quot;&quot;&quot;&#10;    Controlla se l'auto è affittata in un determinato periodo.&#10;    &quot;&quot;&quot;&#10;    print(&quot;data_inizio:&quot;, data_inizio)&#10;    print(&quot;data_fine:&quot;, data_fine)&#10;    affitti = AutoListaAffitto.objects.filter(auto=auto, data_inizio__lte=data_fine, data_fine__gte=data_inizio)&#10;    return affitti.exists()&#10;" />
              <option name="updatedContent" value="from .models import AutoVendita, AutoAffitto, AutoListaAffitto&#10;&#10;&#10;def gestione_vendita_affitto(prezzo_vendita, prezzo_affitto, auto, original_vendita, original_affitto):&#10;    &quot;&quot;&quot;&#10;    Gestisce la logica di vendita e affitto delle auto.&#10;    Questa funzione può essere utilizzata per implementare la logica di business&#10;    relativa alla gestione delle vendite e degli affitti delle auto.&#10;    &quot;&quot;&quot;&#10;    # Implementa qui la logica per gestire le vendite e gli affitti delle auto&#10;    # Gestione AutoVendita&#10;    if prezzo_vendita and not original_vendita:&#10;        AutoVendita.objects.create(auto=auto, prezzo_vendita=prezzo_vendita, venditore=auto.id_possessore)&#10;    elif not prezzo_vendita and original_vendita:&#10;        original_vendita.delete()&#10;    elif prezzo_vendita and original_vendita:&#10;        original_vendita.delete()&#10;        AutoVendita.objects.create(auto=auto, prezzo_vendita=prezzo_vendita, venditore=auto.id_possessore)&#10;&#10;    # Gestione AutoAffitto&#10;    if prezzo_affitto and not original_affitto:&#10;        AutoAffitto.objects.create(auto=auto, prezzo_affitto=prezzo_affitto, affittante=auto.id_possessore)&#10;    elif not prezzo_affitto and original_affitto:&#10;        original_affitto.delete()&#10;    elif prezzo_affitto and original_affitto:&#10;        original_affitto.delete()&#10;        AutoAffitto.objects.create(auto=auto, prezzo_affitto=prezzo_affitto, affittante=auto.id_possessore)&#10;&#10;def check_affittata_in_periodo (auto, data_inizio, data_fine):&#10;    &quot;&quot;&quot;&#10;    Controlla se l'auto è affittata in un determinato periodo.&#10;    &quot;&quot;&quot;&#10;    print(&quot;data_inizio:&quot;, data_inizio)&#10;    print(&quot;data_fine:&quot;, data_fine)&#10;    affitti = AutoListaAffitto.objects.filter(auto=auto, data_inizio__lte=data_fine, data_fine__gte=data_inizio)&#10;    print(&quot;Queryset affitti:&quot;, affitti)&#10;    print(&quot;Numero affitti trovati:&quot;, affitti.count())&#10;    for affitto in affitti:&#10;        print(f&quot;Affitto trovato: id={affitto.id}, auto={affitto.auto_id}, data_inizio={affitto.data_inizio}, data_fine={affitto.data_fine}&quot;)&#10;    return affitti.exists()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/apps/Auto/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/apps/Auto/views.py" />
              <option name="originalContent" value="from datetime import timezone, datetime, timedelta&#10;&#10;from django.core.paginator import Paginator&#10;from django.http import HttpResponse, HttpResponseForbidden&#10;from django.shortcuts import render, get_object_or_404, redirect&#10;from django.utils.decorators import method_decorator&#10;from django.views.generic import CreateView, DeleteView, UpdateView, DetailView&#10;from django.views.decorators.csrf import csrf_exempt&#10;from django.contrib.auth.decorators import login_required&#10;&#10;from .auto_utils import gestione_vendita_affitto, check_affittata_in_periodo&#10;from .form import AddAutoForm, ModifyAutoForm, AffittoAutoForm, PrenotazioneAutoForm, VenditaAutoForm, ContrattoAutoForm&#10;from .mixin import UserIsOwnerMixin&#10;from .models import Auto, AutoAffitto, AutoVendita, AutoPrenotazione, AutoContrattazione, TIPOLOGIE_CARBURANTE, \&#10;    TIPOLOGIE_TRAZIONE, DISPONIBILITA, AutoListaAffitto&#10;from ..decorator import user_or_concessionaria_required&#10;from ..utils import user_or_concessionaria, get_success_url_by_possessore, is_possessore_auto&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoAddView(CreateView):&#10;    model = Auto&#10;    template_name = 'Auto/add_auto_template.html'  # Cambiato il template&#10;    form_class = AddAutoForm&#10;&#10;    def form_valid(self, form):&#10;        auto = form.save(commit=False)&#10;        auto.tipologia_possessore, auto.id_possessore = user_or_concessionaria(self.request.user)&#10;        auto.user_auto = self.request.user  # Associa l'utente autenticato&#10;        auto.save()&#10;        prezzo_vendita = form.cleaned_data.get('prezzo_vendita')&#10;        prezzo_affitto = form.cleaned_data.get('prezzo_affitto')&#10;        if prezzo_vendita:&#10;            AutoVendita.objects.create(auto=auto, prezzo_vendita=prezzo_vendita, venditore=auto.id_possessore)&#10;        if prezzo_affitto:&#10;            AutoAffitto.objects.create(auto=auto, prezzo_affitto=prezzo_affitto, affittante=auto.id_possessore)&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoDeleteView(UserIsOwnerMixin, DeleteView):&#10;    model = Auto&#10;    template_name = 'Autosalone/confirm_delete_popup.html'&#10;&#10;    def delete(self, request, *args, **kwargs):&#10;        auto = self.get_object()&#10;        # Elimina le istanze collegate in AutoVendita e AutoAffitto&#10;        AutoVendita.objects.filter(auto=auto).delete()&#10;        AutoAffitto.objects.filter(auto=auto).delete()&#10;        return super().delete(request, *args, **kwargs)&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoModifyView(UserIsOwnerMixin, UpdateView):&#10;    model = Auto&#10;    template_name = 'Auto/modify_auto.html'&#10;    form_class = ModifyAutoForm&#10;&#10;    def get_initial(self):&#10;        initial = super().get_initial()&#10;        auto = self.get_object()&#10;        vendita = AutoVendita.objects.filter(auto=auto).first()&#10;        affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;        # Imposta la disponibilità in base a cosa esiste&#10;        if vendita and affitto:&#10;            initial['disponibilita'] = '2'  # Vendita e Affitto&#10;        elif vendita:&#10;            initial['disponibilita'] = '0'  # Solo Vendita&#10;        elif affitto:&#10;            initial['disponibilita'] = '1'  # Solo Affitto&#10;        if vendita:&#10;            initial['prezzo_vendita'] = vendita.prezzo_vendita&#10;        if affitto:&#10;            initial['prezzo_affitto'] = affitto.prezzo_affitto&#10;        return initial&#10;&#10;    def form_valid(self, form):&#10;        auto = form.save(commit=False)&#10;        auto.tipologia_possessore, auto.id_possessore = user_or_concessionaria(self.request.user)&#10;        auto.save()&#10;        # Recupera i valori originali&#10;        original_auto = Auto.objects.get(pk=auto.id)&#10;        original_vendita = AutoVendita.objects.filter(auto=original_auto).first() or None&#10;        original_affitto = AutoAffitto.objects.filter(auto=original_auto).first() or None&#10;        # Nuovi valori dal form&#10;        prezzo_vendita = form.cleaned_data.get('prezzo_vendita')&#10;        prezzo_affitto = form.cleaned_data.get('prezzo_affitto')&#10;        # Gestione della logica di vendita e affitto&#10;        gestione_vendita_affitto(prezzo_vendita, prezzo_affitto, original_auto, original_vendita, original_affitto)&#10;        return super().form_valid(form)&#10;&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form, 'auto': self.get_object()})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoAffittoView(CreateView):&#10;    model = AutoListaAffitto&#10;    form_class = AffittoAutoForm&#10;    template_name = 'Auto/affitto_auto.html'&#10;&#10;    def form_valid(self, form):&#10;        auto_id = self.kwargs.get('pk')&#10;        auto = Auto.objects.get(pk=auto_id)&#10;        affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;        lista_affitto = form.save(commit=False)&#10;        print(&quot;Affitto auto:&quot;, affitto)&#10;        lista_affitto = AutoListaAffitto.objects.create(&#10;            lista_auto_affitto=affitto,&#10;            data_pubblicazione=datetime.now(),&#10;            prezzo_affitto=affitto.prezzo_affitto,&#10;            affittante = self.request.user.id,&#10;            affittante_tipologia = self.request.user.groups.first().name,&#10;            data_inizio = form.cleaned_data.get('data_inizio'),&#10;            data_fine = form.cleaned_data.get('data_fine'),&#10;        )&#10;        lista_affitto.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form, 'auto': self.get_object()})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoAcquistoView(UpdateView):&#10;    model = Auto&#10;    form_class = VenditaAutoForm  # Assuming the same form is used for both&#10;    template_name = 'Auto/acquisto_auto.html'&#10;&#10;    def form_valid(self, form):&#10;        auto = form.save(commit=False)&#10;        vendita = AutoVendita.objects.filter(auto=auto).first()&#10;        if vendita:&#10;            vendita.venditore = self.request.user.id&#10;            vendita.data_pubblicazione = datetime.now()&#10;        auto.tipologia_possessore, auto.id_possessore = user_or_concessionaria(self.request.user)&#10;        print(auto.id_possessore, auto.tipologia_possessore)&#10;        auto.user_auto_id = self.request.user.id  # Associa l'utente autenticato&#10;        auto_affitto = AutoAffitto.objects.filter(auto_id=auto.id).first()&#10;        if auto_affitto:&#10;            auto_affitto.affittuario_tipologia, auto_affitto.affittuario = user_or_concessionaria(self.request.user)&#10;            auto_affitto.affittante = None&#10;            auto_affitto.save()&#10;        auto.save()&#10;        if vendita:&#10;            vendita.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoPrenotaView(CreateView):&#10;    model = AutoPrenotazione&#10;    template_name = 'Auto/prenota_auto.html'&#10;    form_class = PrenotazioneAutoForm&#10;&#10;    def form_valid(self, form):&#10;        prenotazione = form.save(commit=False)&#10;        auto = Auto.objects.get(pk=self.kwargs['pk'])&#10;        prenotazione.auto = auto&#10;        prenotazione.data_inizio = datetime.now()&#10;        prenotazione.data_fine = prenotazione.data_inizio + timedelta(hours=24)&#10;        prenotazione.proprietario = auto.id_possessore&#10;        prenotazione.prenotante_id, prenotazione.prenotante_tipologia = user_or_concessionaria(self.request.user)&#10;        prenotazione.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoInContrattazioneView(UpdateView):&#10;    model = AutoContrattazione&#10;    template_name = 'Auto/contrattazione_auto.html'&#10;    form_class = ContrattoAutoForm&#10;&#10;    def form_valid(self, form):&#10;        contrattazione = form.save(commit=False)&#10;        auto = Auto.objects.get(pk=self.kwargs['pk'])&#10;        contrattazione.auto = auto&#10;        contrattazione.acquirente_id, contrattazione.acquirente_tipologia = user_or_concessionaria(self.request.user)&#10;        autovendita = AutoVendita.objects.filter(auto=auto).first()&#10;        if autovendita:&#10;            contrattazione.prezzo_iniziale = autovendita.prezzo_vendita&#10;        contrattazione.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoFineContrattazioneView(UpdateView):&#10;    model = AutoContrattazione&#10;    template_name = 'Auto/fine_contrattazione_auto.html'&#10;    form_class = ContrattoAutoForm&#10;&#10;    def form_valid(self, form):&#10;        contrattazione = form.save(commit=False)&#10;        contrattazione.prezzo_finale = contrattazione.prezzo_attuale&#10;        contrattazione.data_fine = datetime.now(timezone.utc)&#10;        contrattazione.save()&#10;&#10;        # Trasferimento proprietà auto&#10;        auto = contrattazione.auto&#10;        auto.tipologia_possessore = contrattazione.acquirente_tipologia&#10;        auto.id_possessore = contrattazione.acquirente_id&#10;        auto_affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;        if auto_affitto:&#10;            auto_affitto.affittante_id, auto_affitto.affittante_tipologia = None, None&#10;            auto_affitto.affittuario_id, auto_affitto.affittuario_tipologia = contrattazione.acquirente_id, contrattazione.acquirente_tipologia&#10;            auto_affitto.save()&#10;        auto_vendita = AutoVendita.objects.filter(auto=auto).first()&#10;        if auto_vendita:&#10;            auto_vendita.venditore = contrattazione.venditore_id&#10;            auto_vendita.save()&#10;        auto.save()&#10;        # Rimuovi l'auto dalle vendite&#10;        AutoVendita.objects.filter(auto=auto).delete()&#10;&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;class AutoDetailView(DetailView):&#10;    model = Auto&#10;    template_name = 'Auto/auto_detail.html'&#10;    context_object_name = 'auto'&#10;&#10;    def get_context_data(self, **kwargs):&#10;        context = super().get_context_data(**kwargs)&#10;        user = self.request.user&#10;        context['is_utente'] = False&#10;        if user.is_authenticated:&#10;            try:&#10;                context['is_utente'] = user.groups.filter(name=&quot;utente&quot;).exists()&#10;            except Exception:&#10;                context['is_utente'] = False&#10;        # Aggiunta variabile per disponibilità&#10;        DISPONIBILITA_CODES = [0, 1, 2, 8]  # Sostituisci con i codici che vuoi considerare&#10;        context['is_in_disponibilita'] = self.object.disponibilita in DISPONIBILITA_CODES&#10;        return context&#10;&#10;&#10;@login_required&#10;def user_autos_view(request):&#10;    autos = Auto.objects.filter(user_auto=request.user)&#10;    # Filtri da GET&#10;    marca = request.GET.get('marca', '').strip()&#10;    modello = request.GET.get('modello', '').strip()&#10;    anno = request.GET.get('anno', '').strip()&#10;    chilometri = request.GET.get('chilometri', '').strip()&#10;    cilindrata = request.GET.get('cilindrata', '').strip()&#10;    carburante = request.GET.get('carburante', '').strip()&#10;    trazione = request.GET.get('trazione', '').strip()&#10;    disponibilita = request.GET.get('disponibilita', '').strip()&#10;&#10;    if marca:&#10;        autos = autos.filter(marca__icontains=marca)&#10;    if modello:&#10;        autos = autos.filter(modello__icontains=modello)&#10;    if anno:&#10;        autos = autos.filter(anno=anno)&#10;    if chilometri:&#10;        autos = autos.filter(chilometraggio=chilometri)&#10;    if cilindrata:&#10;        autos = autos.filter(cilindrata=cilindrata)&#10;    if carburante:&#10;        autos = autos.filter(carburante=carburante)&#10;    if trazione:&#10;        autos = autos.filter(trazione=trazione)&#10;    if disponibilita:&#10;        autos = autos.filter(disponibilita=disponibilita)&#10;&#10;    paginator = Paginator(autos, 9)  # 9 auto per pagina&#10;    page_number = request.GET.get('page')&#10;    autos_page = paginator.get_page(page_number)&#10;    is_utente = request.user.groups.filter(name='utente').exists()&#10;    is_concessionaria = request.user.groups.filter(name='concessionaria').exists()&#10;    form = AddAutoForm()&#10;    return render(request, 'Auto/user_autos.html', {&#10;        'autos': autos,&#10;        'is_utente': is_utente,&#10;        'is_concessionaria': is_concessionaria,&#10;        'form': form,&#10;        'TIPOLOGIE_CARBURANTE': TIPOLOGIE_CARBURANTE,&#10;        'TIPOLOGIE_TRAZIONE': TIPOLOGIE_TRAZIONE,&#10;        'DISPONIBILITA': DISPONIBILITA&#10;    })&#10;&#10;@login_required&#10;def AffittaAutoRiepilogoView(request, pk):&#10;    auto = get_object_or_404(Auto, pk=pk)&#10;    auto_affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;    if is_possessore_auto(request.user, auto):&#10;        return HttpResponseForbidden(&quot;Non hai i permessi per affittare questa auto.&quot;)&#10;&#10;    data_inizio = request.POST.get('data_inizio') or request.GET.get('data_inizio')&#10;    data_fine = request.POST.get('data_fine') or request.GET.get('data_fine')&#10;    errore_date = None&#10;&#10;    # Controllo validità date&#10;    if data_inizio and data_fine:&#10;        try:&#10;            print(&quot;data_inizio:&quot;, data_inizio)&#10;            print(&quot;data_fine:&quot;, data_fine)&#10;            data_inizio_dt = datetime.strptime(data_inizio, &quot;%Y-%m-%d&quot;)&#10;            data_fine_dt = datetime.strptime(data_fine, &quot;%Y-%m-%d&quot;)&#10;            if data_fine_dt &lt; data_inizio_dt:&#10;                errore_date = &quot;La data di fine non può essere precedente alla data di inizio.&quot;&#10;            if check_affittata_in_periodo(auto_affitto, data_inizio, data_fine):&#10;                errore_date = &quot;L'auto è già affittata in questo periodo.&quot;&#10;        except Exception:&#10;            errore_date = &quot;Formato data non valido.&quot;&#10;&#10;    if errore_date:&#10;        return HttpResponseForbidden(f&quot;Errore: {errore_date}&quot;)&#10;&#10;    return render(request, 'Auto/affitta_auto.html', {&#10;        'object': auto,&#10;        'data_inizio': data_inizio,&#10;        'data_fine': data_fine,&#10;    })&#10;" />
              <option name="updatedContent" value="from datetime import timezone, datetime, timedelta&#10;&#10;from django.core.paginator import Paginator&#10;from django.http import HttpResponse, HttpResponseForbidden&#10;from django.shortcuts import render, get_object_or_404, redirect&#10;from django.utils.decorators import method_decorator&#10;from django.views.generic import CreateView, DeleteView, UpdateView, DetailView&#10;from django.views.decorators.csrf import csrf_exempt&#10;from django.contrib.auth.decorators import login_required&#10;&#10;from .auto_utils import gestione_vendita_affitto, check_affittata_in_periodo&#10;from .form import AddAutoForm, ModifyAutoForm, AffittoAutoForm, PrenotazioneAutoForm, VenditaAutoForm, ContrattoAutoForm&#10;from .mixin import UserIsOwnerMixin&#10;from .models import Auto, AutoAffitto, AutoVendita, AutoPrenotazione, AutoContrattazione, TIPOLOGIE_CARBURANTE, \&#10;    TIPOLOGIE_TRAZIONE, DISPONIBILITA, AutoListaAffitto&#10;from ..decorator import user_or_concessionaria_required&#10;from ..utils import user_or_concessionaria, get_success_url_by_possessore, is_possessore_auto&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoAddView(CreateView):&#10;    model = Auto&#10;    template_name = 'Auto/add_auto_template.html'  # Cambiato il template&#10;    form_class = AddAutoForm&#10;&#10;    def form_valid(self, form):&#10;        auto = form.save(commit=False)&#10;        auto.tipologia_possessore, auto.id_possessore = user_or_concessionaria(self.request.user)&#10;        auto.user_auto = self.request.user  # Associa l'utente autenticato&#10;        auto.save()&#10;        prezzo_vendita = form.cleaned_data.get('prezzo_vendita')&#10;        prezzo_affitto = form.cleaned_data.get('prezzo_affitto')&#10;        if prezzo_vendita:&#10;            AutoVendita.objects.create(auto=auto, prezzo_vendita=prezzo_vendita, venditore=auto.id_possessore)&#10;        if prezzo_affitto:&#10;            AutoAffitto.objects.create(auto=auto, prezzo_affitto=prezzo_affitto, affittante=auto.id_possessore)&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoDeleteView(UserIsOwnerMixin, DeleteView):&#10;    model = Auto&#10;    template_name = 'Autosalone/confirm_delete_popup.html'&#10;&#10;    def delete(self, request, *args, **kwargs):&#10;        auto = self.get_object()&#10;        # Elimina le istanze collegate in AutoVendita e AutoAffitto&#10;        AutoVendita.objects.filter(auto=auto).delete()&#10;        AutoAffitto.objects.filter(auto=auto).delete()&#10;        return super().delete(request, *args, **kwargs)&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoModifyView(UserIsOwnerMixin, UpdateView):&#10;    model = Auto&#10;    template_name = 'Auto/modify_auto.html'&#10;    form_class = ModifyAutoForm&#10;&#10;    def get_initial(self):&#10;        initial = super().get_initial()&#10;        auto = self.get_object()&#10;        vendita = AutoVendita.objects.filter(auto=auto).first()&#10;        affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;        # Imposta la disponibilità in base a cosa esiste&#10;        if vendita and affitto:&#10;            initial['disponibilita'] = '2'  # Vendita e Affitto&#10;        elif vendita:&#10;            initial['disponibilita'] = '0'  # Solo Vendita&#10;        elif affitto:&#10;            initial['disponibilita'] = '1'  # Solo Affitto&#10;        if vendita:&#10;            initial['prezzo_vendita'] = vendita.prezzo_vendita&#10;        if affitto:&#10;            initial['prezzo_affitto'] = affitto.prezzo_affitto&#10;        return initial&#10;&#10;    def form_valid(self, form):&#10;        auto = form.save(commit=False)&#10;        auto.tipologia_possessore, auto.id_possessore = user_or_concessionaria(self.request.user)&#10;        auto.save()&#10;        # Recupera i valori originali&#10;        original_auto = Auto.objects.get(pk=auto.id)&#10;        original_vendita = AutoVendita.objects.filter(auto=original_auto).first() or None&#10;        original_affitto = AutoAffitto.objects.filter(auto=original_auto).first() or None&#10;        # Nuovi valori dal form&#10;        prezzo_vendita = form.cleaned_data.get('prezzo_vendita')&#10;        prezzo_affitto = form.cleaned_data.get('prezzo_affitto')&#10;        # Gestione della logica di vendita e affitto&#10;        gestione_vendita_affitto(prezzo_vendita, prezzo_affitto, original_auto, original_vendita, original_affitto)&#10;        return super().form_valid(form)&#10;&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form, 'auto': self.get_object()})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoAffittoView(CreateView):&#10;    model = AutoListaAffitto&#10;    form_class = AffittoAutoForm&#10;    template_name = 'Auto/affitto_auto.html'&#10;&#10;    def form_valid(self, form):&#10;        auto_id = self.kwargs.get('pk')&#10;        auto = Auto.objects.get(pk=auto_id)&#10;        affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;        lista_affitto = form.save(commit=False)&#10;        print(&quot;Affitto auto:&quot;, affitto)&#10;        lista_affitto = AutoListaAffitto.objects.create(&#10;            lista_auto_affitto=affitto,&#10;            data_pubblicazione=datetime.now(),&#10;            prezzo_affitto=affitto.prezzo_affitto,&#10;            affittante = self.request.user.id,&#10;            affittante_tipologia = self.request.user.groups.first().name,&#10;            data_inizio = form.cleaned_data.get('data_inizio'),&#10;            data_fine = form.cleaned_data.get('data_fine'),&#10;        )&#10;        lista_affitto.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form, 'auto': self.get_object()})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoAcquistoView(UpdateView):&#10;    model = Auto&#10;    form_class = VenditaAutoForm  # Assuming the same form is used for both&#10;    template_name = 'Auto/acquisto_auto.html'&#10;&#10;    def form_valid(self, form):&#10;        auto = form.save(commit=False)&#10;        vendita = AutoVendita.objects.filter(auto=auto).first()&#10;        if vendita:&#10;            vendita.venditore = self.request.user.id&#10;            vendita.data_pubblicazione = datetime.now()&#10;        auto.tipologia_possessore, auto.id_possessore = user_or_concessionaria(self.request.user)&#10;        print(auto.id_possessore, auto.tipologia_possessore)&#10;        auto.user_auto_id = self.request.user.id  # Associa l'utente autenticato&#10;        auto_affitto = AutoAffitto.objects.filter(auto_id=auto.id).first()&#10;        if auto_affitto:&#10;            auto_affitto.affittuario_tipologia, auto_affitto.affittuario = user_or_concessionaria(self.request.user)&#10;            auto_affitto.affittante = None&#10;            auto_affitto.save()&#10;        auto.save()&#10;        if vendita:&#10;            vendita.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoPrenotaView(CreateView):&#10;    model = AutoPrenotazione&#10;    template_name = 'Auto/prenota_auto.html'&#10;    form_class = PrenotazioneAutoForm&#10;&#10;    def form_valid(self, form):&#10;        prenotazione = form.save(commit=False)&#10;        auto = Auto.objects.get(pk=self.kwargs['pk'])&#10;        prenotazione.auto = auto&#10;        prenotazione.data_inizio = datetime.now()&#10;        prenotazione.data_fine = prenotazione.data_inizio + timedelta(hours=24)&#10;        prenotazione.proprietario = auto.id_possessore&#10;        prenotazione.prenotante_id, prenotazione.prenotante_tipologia = user_or_concessionaria(self.request.user)&#10;        prenotazione.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoInContrattazioneView(UpdateView):&#10;    model = AutoContrattazione&#10;    template_name = 'Auto/contrattazione_auto.html'&#10;    form_class = ContrattoAutoForm&#10;&#10;    def form_valid(self, form):&#10;        contrattazione = form.save(commit=False)&#10;        auto = Auto.objects.get(pk=self.kwargs['pk'])&#10;        contrattazione.auto = auto&#10;        contrattazione.acquirente_id, contrattazione.acquirente_tipologia = user_or_concessionaria(self.request.user)&#10;        autovendita = AutoVendita.objects.filter(auto=auto).first()&#10;        if autovendita:&#10;            contrattazione.prezzo_iniziale = autovendita.prezzo_vendita&#10;        contrattazione.save()&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;&#10;&#10;@method_decorator(login_required, name='dispatch')&#10;class AutoFineContrattazioneView(UpdateView):&#10;    model = AutoContrattazione&#10;    template_name = 'Auto/fine_contrattazione_auto.html'&#10;    form_class = ContrattoAutoForm&#10;&#10;    def form_valid(self, form):&#10;        contrattazione = form.save(commit=False)&#10;        contrattazione.prezzo_finale = contrattazione.prezzo_attuale&#10;        contrattazione.data_fine = datetime.now(timezone.utc)&#10;        contrattazione.save()&#10;&#10;        # Trasferimento proprietà auto&#10;        auto = contrattazione.auto&#10;        auto.tipologia_possessore = contrattazione.acquirente_tipologia&#10;        auto.id_possessore = contrattazione.acquirente_id&#10;        auto_affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;        if auto_affitto:&#10;            auto_affitto.affittante_id, auto_affitto.affittante_tipologia = None, None&#10;            auto_affitto.affittuario_id, auto_affitto.affittuario_tipologia = contrattazione.acquirente_id, contrattazione.acquirente_tipologia&#10;            auto_affitto.save()&#10;        auto_vendita = AutoVendita.objects.filter(auto=auto).first()&#10;        if auto_vendita:&#10;            auto_vendita.venditore = contrattazione.venditore_id&#10;            auto_vendita.save()&#10;        auto.save()&#10;        # Rimuovi l'auto dalle vendite&#10;        AutoVendita.objects.filter(auto=auto).delete()&#10;&#10;        return super().form_valid(form)&#10;&#10;    def form_invalid(self, form):&#10;        return render(self.request, self.template_name, {'form': form})&#10;&#10;    def get_success_url(self):&#10;        return get_success_url_by_possessore(self.request)&#10;&#10;class AutoDetailView(DetailView):&#10;    model = Auto&#10;    template_name = 'Auto/auto_detail.html'&#10;    context_object_name = 'auto'&#10;&#10;    def get_context_data(self, **kwargs):&#10;        context = super().get_context_data(**kwargs)&#10;        user = self.request.user&#10;        context['is_utente'] = False&#10;        if user.is_authenticated:&#10;            try:&#10;                context['is_utente'] = user.groups.filter(name=&quot;utente&quot;).exists()&#10;            except Exception:&#10;                context['is_utente'] = False&#10;        # Aggiunta variabile per disponibilità&#10;        DISPONIBILITA_CODES = [0, 1, 2, 8]  # Sostituisci con i codici che vuoi considerare&#10;        context['is_in_disponibilita'] = self.object.disponibilita in DISPONIBILITA_CODES&#10;        return context&#10;&#10;&#10;@login_required&#10;def user_autos_view(request):&#10;    autos = Auto.objects.filter(user_auto=request.user)&#10;    # Filtri da GET&#10;    marca = request.GET.get('marca', '').strip()&#10;    modello = request.GET.get('modello', '').strip()&#10;    anno = request.GET.get('anno', '').strip()&#10;    chilometri = request.GET.get('chilometri', '').strip()&#10;    cilindrata = request.GET.get('cilindrata', '').strip()&#10;    carburante = request.GET.get('carburante', '').strip()&#10;    trazione = request.GET.get('trazione', '').strip()&#10;    disponibilita = request.GET.get('disponibilita', '').strip()&#10;&#10;    if marca:&#10;        autos = autos.filter(marca__icontains=marca)&#10;    if modello:&#10;        autos = autos.filter(modello__icontains=modello)&#10;    if anno:&#10;        autos = autos.filter(anno=anno)&#10;    if chilometri:&#10;        autos = autos.filter(chilometraggio=chilometri)&#10;    if cilindrata:&#10;        autos = autos.filter(cilindrata=cilindrata)&#10;    if carburante:&#10;        autos = autos.filter(carburante=carburante)&#10;    if trazione:&#10;        autos = autos.filter(trazione=trazione)&#10;    if disponibilita:&#10;        autos = autos.filter(disponibilita=disponibilita)&#10;&#10;    paginator = Paginator(autos, 9)  # 9 auto per pagina&#10;    page_number = request.GET.get('page')&#10;    autos_page = paginator.get_page(page_number)&#10;    is_utente = request.user.groups.filter(name='utente').exists()&#10;    is_concessionaria = request.user.groups.filter(name='concessionaria').exists()&#10;    form = AddAutoForm()&#10;    return render(request, 'Auto/user_autos.html', {&#10;        'autos': autos,&#10;        'is_utente': is_utente,&#10;        'is_concessionaria': is_concessionaria,&#10;        'form': form,&#10;        'TIPOLOGIE_CARBURANTE': TIPOLOGIE_CARBURANTE,&#10;        'TIPOLOGIE_TRAZIONE': TIPOLOGIE_TRAZIONE,&#10;        'DISPONIBILITA': DISPONIBILITA&#10;    })&#10;&#10;@login_required&#10;def AffittaAutoRiepilogoView(request, pk):&#10;    auto = get_object_or_404(Auto, pk=pk)&#10;    auto_affitto = AutoAffitto.objects.filter(auto=auto).first()&#10;    if is_possessore_auto(request.user, auto):&#10;        return HttpResponseForbidden(&quot;Non hai i permessi per affittare questa auto.&quot;)&#10;&#10;    data_inizio = request.POST.get('data_inizio') or request.GET.get('data_inizio')&#10;    data_fine = request.POST.get('data_fine') or request.GET.get('data_fine')&#10;    errore_date = None&#10;&#10;    # Controllo validità date&#10;    if data_inizio and data_fine:&#10;        try:&#10;            print(&quot;data_inizio:&quot;, data_inizio)&#10;            print(&quot;data_fine:&quot;, data_fine)&#10;            data_inizio_dt = datetime.strptime(data_inizio, &quot;%Y-%m-%d&quot;)&#10;            data_fine_dt = datetime.strptime(data_fine, &quot;%Y-%m-%d&quot;)&#10;            if data_fine_dt &lt; data_inizio_dt:&#10;                errore_date = &quot;La data di fine non può essere precedente alla data di inizio.&quot;&#10;            if check_affittata_in_periodo(auto_affitto, data_inizio, data_fine):&#10;                errore_date = &quot;L'auto è già affittata in questo periodo.&quot;&#10;        except Exception:&#10;            errore_date = &quot;Formato data non valido.&quot;&#10;&#10;    if errore_date:&#10;        return HttpResponseForbidden(f&quot;Errore: {errore_date}&quot;)&#10;&#10;    return render(request, 'Auto/affitta_auto.html', {&#10;        'object': auto,&#10;        'data_inizio': data_inizio,&#10;        'data_fine': data_fine,&#10;    })" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/apps/Concessionaria/forms.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/apps/Concessionaria/forms.py" />
              <option name="originalContent" value="from django import forms&#10;from django.contrib.auth import authenticate&#10;from django.contrib.auth.models import User&#10;from django.core.exceptions import ValidationError&#10;&#10;from .models import Concessionaria&#10;&#10;class ConcessionariaLoginForm(forms.Form):&#10;    email = forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}))&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}))&#10;&#10;    def clean(self):&#10;        cleaned_data = super().clean()&#10;        email = cleaned_data.get('email')&#10;        password = cleaned_data.get('password')&#10;        if email and password:&#10;            user = authenticate(email=email, password=password)&#10;            if user is None:&#10;                raise forms.ValidationError('Email o password non validi')&#10;            cleaned_data['user'] = user&#10;        return cleaned_data&#10;&#10;    def get_user(self):&#10;        return self.cleaned_data.get('user', None)&#10;&#10;class ConcessionariaForm(forms.ModelForm):&#10;    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;    username = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#10;&#10;    class Meta:&#10;        model = Concessionaria&#10;        fields = ['username', 'email', 'password', 'partita_iva', 'codice_fiscale']&#10;        widgets = {&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;    def save(self, commit=True):&#10;        user = User.objects.create_user(&#10;            username=self.cleaned_data['username'],&#10;            email=self.cleaned_data['email'],&#10;            password=self.cleaned_data['password']&#10;        )&#10;        concessionaria = super().save(commit=False)&#10;        concessionaria.user = user&#10;        if commit:&#10;            concessionaria.save()&#10;        return concessionaria&#10;&#10;class ConcessionariaUpdateForm(forms.ModelForm):&#10;    class Meta:&#10;        model = Concessionaria&#10;        fields = ['partita_iva', 'codice_fiscale']&#10;        widgets = {&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;class ConcessionariaCreateForm(forms.ModelForm):&#10;    password = forms.CharField(widget=forms.PasswordInput, label=&quot;Password&quot;)&#10;    conferma_password = forms.CharField(widget=forms.PasswordInput, label=&quot;Conferma Password&quot;)&#10;    partita_iva = forms.CharField(max_length=11, label=&quot;Partita IVA&quot;)&#10;    codice_fiscale = forms.CharField(max_length=16, label=&quot;Codice Fiscale&quot;)&#10;&#10;    class Meta:&#10;        model = User&#10;        fields = ['username', 'email', 'password']&#10;&#10;    def clean(self):&#10;        cleaned_data = super().clean()&#10;        password = cleaned_data.get('password')&#10;        conferma_password = cleaned_data.get('conferma_password')&#10;        if password != conferma_password:&#10;            raise ValidationError(&quot;Le password non corrispondono.&quot;)&#10;        return cleaned_data&#10;&#10;    def clean_username(self):&#10;        username = self.cleaned_data.get('username')&#10;        if User.objects.filter(username=username).exists():&#10;            raise ValidationError(&quot;Il nome utente è già in uso. Scegli un altro nome utente.&quot;)&#10;        return username&#10;&#10;    def save(self, commit=True):&#10;        user = super().save(commit=True)&#10;        Concessionaria.objects.create(&#10;            user=user,&#10;            partita_iva=self.cleaned_data['partita_iva'],&#10;            codice_fiscale=self.cleaned_data['codice_fiscale']&#10;        )&#10;        return user&#10;" />
              <option name="updatedContent" value="from django import forms&#13;&#10;from django.contrib.auth import authenticate&#13;&#10;from django.contrib.auth.models import User&#13;&#10;from django.core.exceptions import ValidationError&#13;&#10;&#13;&#10;from .models import Concessionaria&#13;&#10;&#13;&#10;class ConcessionariaLoginForm(forms.Form):&#13;&#10;    email = forms.EmailField(label='Email', widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;&#13;&#10;    def clean(self):&#13;&#10;        cleaned_data = super().clean()&#13;&#10;        email = cleaned_data.get('email')&#13;&#10;        password = cleaned_data.get('password')&#13;&#10;        if email and password:&#13;&#10;            user = authenticate(email=email, password=password)&#13;&#10;            if user is None:&#13;&#10;                raise forms.ValidationError('Email o password non validi')&#13;&#10;            cleaned_data['user'] = user&#13;&#10;        return cleaned_data&#13;&#10;&#13;&#10;    def get_user(self):&#13;&#10;        return self.cleaned_data.get('user', None)&#13;&#10;&#13;&#10;class ConcessionariaForm(forms.ModelForm):&#13;&#10;    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;    username = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}), required=True)&#13;&#10;&#13;&#10;    class Meta:&#13;&#10;        model = Concessionaria&#13;&#10;        fields = ['username', 'email', 'password', 'partita_iva', 'codice_fiscale']&#13;&#10;        widgets = {&#13;&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;    def save(self, commit=True):&#13;&#10;        user = User.objects.create_user(&#13;&#10;            username=self.cleaned_data['username'],&#13;&#10;            email=self.cleaned_data['email'],&#13;&#10;            password=self.cleaned_data['password']&#13;&#10;        )&#13;&#10;        concessionaria = super().save(commit=False)&#13;&#10;        concessionaria.user = user&#13;&#10;        if commit:&#13;&#10;            concessionaria.save()&#13;&#10;        return concessionaria&#13;&#10;&#13;&#10;class ConcessionariaUpdateForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = Concessionaria&#13;&#10;        fields = ['partita_iva', 'codice_fiscale']&#13;&#10;        widgets = {&#13;&#10;            'partita_iva': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'codice_fiscale': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class ConcessionariaCreateForm(forms.ModelForm):&#13;&#10;    password = forms.CharField(widget=forms.PasswordInput, label=&quot;Password&quot;)&#13;&#10;    conferma_password = forms.CharField(widget=forms.PasswordInput, label=&quot;Conferma Password&quot;)&#13;&#10;    partita_iva = forms.CharField(max_length=11, label=&quot;Partita IVA&quot;)&#13;&#10;    codice_fiscale = forms.CharField(max_length=16, label=&quot;Codice Fiscale&quot;)&#13;&#10;&#13;&#10;    class Meta:&#13;&#10;        model = User&#13;&#10;        fields = ['username', 'email', 'password']&#13;&#10;&#13;&#10;    def clean(self):&#13;&#10;        cleaned_data = super().clean()&#13;&#10;        password = cleaned_data.get('password')&#13;&#10;        conferma_password = cleaned_data.get('conferma_password')&#13;&#10;        if password != conferma_password:&#13;&#10;            raise ValidationError(&quot;Le password non corrispondono.&quot;)&#13;&#10;        return cleaned_data&#13;&#10;&#13;&#10;    def save(self, commit=True):&#13;&#10;        user = super().save(commit=True)  # Salva l'oggetto User prima&#13;&#10;&#13;&#10;        # Creazione del modello Concessionaria&#13;&#10;        Concessionaria.objects.create(&#13;&#10;            user=user,&#13;&#10;            partita_iva=self.cleaned_data['partita_iva'],&#13;&#10;            codice_fiscale=self.cleaned_data['codice_fiscale']&#13;&#10;        )&#13;&#10;        return user" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/apps/Utente/form.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/apps/Utente/form.py" />
              <option name="originalContent" value="from django import forms&#10;from django.contrib.auth.models import User&#10;from .models import UserExtendModel&#10;from apps.Auto.models import Commento, Risposta&#10;&#10;class UserCreateForm(forms.ModelForm):&#10;    class Meta:&#10;        model = User&#10;        fields = ['username', 'email', 'password', 'first_name', 'last_name']&#10;        widgets = {&#10;            'username': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'password': forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'first_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'last_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;class UserExtendForm(forms.ModelForm):&#10;    class Meta:&#10;        model = UserExtendModel&#10;        fields = ['data_nascita', 'indirizzo', 'telefono', 'immagine_profilo']&#10;        widgets = {&#10;            'data_nascita': forms.DateInput(attrs={'class': 'form-control', 'type': 'date', 'placeholder': ''}),&#10;            'indirizzo': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'telefono': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'immagine_profilo': forms.ClearableFileInput(attrs={'class': 'form-control'}),&#10;        }&#10;&#10;class UserUpdateForm(forms.ModelForm):&#10;    class Meta:&#10;        model = User&#10;        fields = ['email', 'first_name', 'last_name']&#10;        widgets = {&#10;            'email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'first_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;            'last_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;class UserDeleteForm(forms.Form):&#10;    confirm = forms.BooleanField(label='Conferma eliminazione utente', widget=forms.CheckboxInput(attrs={'class': 'form-check-input'}))&#10;&#10;# Placeholder per Commento, Risposta, Segnalazione&#10;class CommentoForm(forms.ModelForm):&#10;    class Meta:&#10;        model = Commento&#10;        fields = ['testo']&#10;        widgets = {&#10;            'testo': forms.Textarea(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;class RispostaForm(forms.ModelForm):&#10;    class Meta:&#10;        model = Risposta&#10;        fields = ['testo']&#10;        widgets = {&#10;            'testo': forms.Textarea(attrs={'class': 'form-control', 'placeholder': ''}),&#10;        }&#10;&#10;class SegnalazioneForm(forms.Form):&#10;    motivo = forms.CharField(widget=forms.Textarea(attrs={'class': 'form-control', 'placeholder': ''}))&#10;" />
              <option name="updatedContent" value="from django import forms&#13;&#10;from django.contrib.auth.models import User&#13;&#10;from .models import UserExtendModel, Segnalazione&#13;&#10;from apps.Auto.models import Commento, Risposta&#13;&#10;&#13;&#10;class UserCreateForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = User&#13;&#10;        fields = ['username', 'email', 'password', 'first_name', 'last_name']&#13;&#10;        widgets = {&#13;&#10;            'username': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'password': forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'first_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'last_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class UserExtendForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = UserExtendModel&#13;&#10;        fields = ['data_nascita', 'indirizzo', 'telefono', 'immagine_profilo']&#13;&#10;        widgets = {&#13;&#10;            'data_nascita': forms.DateInput(attrs={'class': 'form-control', 'type': 'date', 'placeholder': ''}),&#13;&#10;            'indirizzo': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'telefono': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'immagine_profilo': forms.ClearableFileInput(attrs={'class': 'form-control'}),&#13;&#10;        }&#13;&#10;&#13;&#10;class UserUpdateForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = User&#13;&#10;        fields = ['email', 'first_name', 'last_name']&#13;&#10;        widgets = {&#13;&#10;            'email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'first_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;            'last_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class UserDeleteForm(forms.Form):&#13;&#10;    confirm = forms.BooleanField(label='Conferma eliminazione utente', widget=forms.CheckboxInput(attrs={'class': 'form-check-input'}))&#13;&#10;&#13;&#10;# Placeholder per Commento, Risposta, Segnalazione&#13;&#10;class CommentoForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = Commento&#13;&#10;        fields = ['testo']&#13;&#10;        widgets = {&#13;&#10;            'testo': forms.Textarea(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class RispostaForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = Risposta&#13;&#10;        fields = ['testo']&#13;&#10;        widgets = {&#13;&#10;            'testo': forms.Textarea(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class SegnalazioneForm(forms.ModelForm):&#13;&#10;    class Meta:&#13;&#10;        model = Segnalazione&#13;&#10;        fields = ['motivo']&#13;&#10;        widgets = {&#13;&#10;            'motivo': forms.Textarea(attrs={'class': 'form-control', 'placeholder': ''}),&#13;&#10;        }&#13;&#10;&#13;&#10;class UserFullUpdateForm(forms.ModelForm):&#13;&#10;    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    first_name = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    last_name = forms.CharField(widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    data_nascita = forms.DateField(required=False, widget=forms.DateInput(attrs={'class': 'form-control', 'type': 'date', 'placeholder': ''}))&#13;&#10;    indirizzo = forms.CharField(required=False, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    telefono = forms.CharField(required=False, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': ''}))&#13;&#10;    immagine_profilo = forms.ImageField(required=False, widget=forms.ClearableFileInput(attrs={'class': 'form-control'}))&#13;&#10;&#13;&#10;    class Meta:&#13;&#10;        model = UserExtendModel&#13;&#10;        fields = ['email', 'first_name', 'last_name', 'data_nascita', 'indirizzo', 'telefono', 'immagine_profilo']&#13;&#10;&#13;&#10;    def __init__(self, *args, **kwargs):&#13;&#10;        instance = kwargs.get('instance')&#13;&#10;        initial = kwargs.get('initial', {})&#13;&#10;        if instance:&#13;&#10;            initial.update({&#13;&#10;                'email': instance.user.email,&#13;&#10;                'first_name': instance.user.first_name,&#13;&#10;                'last_name': instance.user.last_name,&#13;&#10;                'data_nascita': instance.data_nascita,&#13;&#10;                'indirizzo': instance.indirizzo,&#13;&#10;                'telefono': instance.telefono,&#13;&#10;                'immagine_profilo': instance.immagine_profilo,&#13;&#10;            })&#13;&#10;            kwargs['initial'] = initial&#13;&#10;        super().__init__(*args, **kwargs)&#13;&#10;&#13;&#10;    def save(self, commit=True):&#13;&#10;        user_extend = super().save(commit=False)&#13;&#10;        user = user_extend.user&#13;&#10;        user.email = self.cleaned_data['email']&#13;&#10;        user.first_name = self.cleaned_data['first_name']&#13;&#10;        user.last_name = self.cleaned_data['last_name']&#13;&#10;        if commit:&#13;&#10;            user.save()&#13;&#10;            user_extend.save()&#13;&#10;            if self.cleaned_data.get('immagine_profilo'):&#13;&#10;                user_extend.immagine_profilo = self.cleaned_data['immagine_profilo']&#13;&#10;                user_extend.save()&#13;&#10;        return user_extend" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/add_auto_form.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/add_auto_form.html" />
              <option name="updatedContent" value="{# Template parziale per il form di aggiunta auto #}&#10;{% for field in form %}&#10;  &lt;div class=&quot;mb-3&quot;&gt;&#10;    {{ field.label_tag }}&#10;    {{ field }}&#10;    {% if field.help_text %}&lt;small class=&quot;form-text text-muted&quot;&gt;{{ field.help_text }}&lt;/small&gt;{% endif %}&#10;    {% for error in field.errors %}&#10;      &lt;div class=&quot;text-danger small&quot;&gt;{{ error }}&lt;/div&gt;&#10;    {% endfor %}&#10;  &lt;/div&gt;&#10;{% endfor %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_confirm_delete.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Autosaloon_Modena/templates/Auto/auto_confirm_delete.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Drusi/Progetto_TecWeb/Autosaloon_Modena/apps/Auto/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Drusi/Progetto_TecWeb/Autosaloon_Modena/apps/Auto/views.py" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/Utente/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/Utente/views.py" />
              <option name="updatedContent" value="# ...existing code...&#10;class SegnalazioneCreateView(CreateView):&#10;    form_class = SegnalazioneForm&#10;    template_name = 'Auto/auto_detail.html'&#10;    success_url = reverse_lazy('home')&#10;&#10;    def dispatch(self, request, *args, **kwargs):&#10;        # ...existing code...&#10;        return super().dispatch(request, *args, **kwargs)&#10;&#10;    def get_context_data(self, **kwargs):&#10;        context = super().get_context_data(**kwargs)&#10;        commento_id = self.request.GET.get('commento_id') or self.request.POST.get('commento_id')&#10;        auto = None&#10;        if commento_id:&#10;            try:&#10;                commento = Commento.objects.get(id=commento_id)&#10;                auto = commento.auto&#10;            except Commento.DoesNotExist:&#10;                auto = None&#10;        context['auto'] = auto&#10;        return context&#10;&#10;    def form_valid(self, form):&#10;        commento_id = self.request.GET.get('commento_id') or self.request.POST.get('commento_id')&#10;        auto = None&#10;        if not commento_id:&#10;            messages.error(self.request, &quot;Segnalazione non valida: commento mancante.&quot;)&#10;            return redirect(self.success_url)&#10;        try:&#10;            commento = Commento.objects.get(id=commento_id)&#10;            segnalato = commento.user&#10;            auto = commento.auto&#10;            # Solo utenti normali possono essere segnalati&#10;            if hasattr(segnalato, 'concessionaria_profile'):&#10;                messages.error(self.request, &quot;Non puoi segnalare una concessionaria.&quot;)&#10;                return redirect(auto.get_absolute_url() if auto else self.success_url)&#10;            # Salva la segnalazione&#10;            segnalazione = form.save(commit=False)&#10;            segnalazione.segnalatore = self.request.user&#10;            segnalazione.segnalato = segnalato&#10;            segnalazione.motivo = form.cleaned_data['motivo']&#10;            segnalazione.save()&#10;            # Gestione ban&#10;            ban_profile, _ = UserModelBan.objects.get_or_create(user=segnalato)&#10;            ban_profile.segnalazioni = (ban_profile.segnalazioni or 0) + 1&#10;            if ban_profile.segnalazioni &gt;= 5:&#10;                now = timezone.now()&#10;                # Ban incrementale&#10;                if ban_profile.qnt_ban:&#10;                    ban_hours = 2 * (2 ** (ban_profile.qnt_ban - 1))&#10;                else:&#10;                    ban_hours = 2&#10;                ban_profile.data_inizio_ban = now&#10;                ban_profile.data_fine_ban = now + timezone.timedelta(hours=ban_hours)&#10;                ban_profile.qnt_ban = (ban_profile.qnt_ban or 0) + 1&#10;                ban_profile.segnalazioni = 0&#10;                messages.error(self.request, f&quot;Utente bannato per {ban_hours} ore!&quot;)&#10;            ban_profile.save()&#10;            messages.success(self.request, &quot;Segnalazione inviata correttamente.&quot;)&#10;        except Commento.DoesNotExist:&#10;            messages.error(self.request, &quot;Commento non trovato.&quot;)&#10;        return redirect(auto.get_absolute_url() if auto else self.success_url)&#10;&#10;    def form_invalid(self, form):&#10;        messages.error(self.request, &quot;Errore nell'invio della segnalazione.&quot;)&#10;        commento_id = self.request.GET.get('commento_id') or self.request.POST.get('commento_id')&#10;        auto = None&#10;        if commento_id:&#10;            try:&#10;                commento = Commento.objects.get(id=commento_id)&#10;                auto = commento.auto&#10;            except Commento.DoesNotExist:&#10;                auto = None&#10;        return redirect(auto.get_absolute_url() if auto else self.success_url)&#10;# ...existing code...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Auto/user_autos.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Auto/user_autos.html" />
              <option name="originalContent" value="&#10;&#10;&#10;" />
              <option name="updatedContent" value="{% extends 'base.html' %}&#10;&#10;{% block content %}&#10;&#10;                    &lt;a href=&quot;{% url 'Auto:edit_auto' auto.pk %}&quot; class=&quot;btn btn-primary btn-sm&quot;&gt;Modifica&lt;/a&gt;&#10;                    &lt;form method=&quot;post&quot; action=&quot;{% url 'Auto:delete_auto' auto.pk %}&quot; style=&quot;display:inline;&quot;&gt;&#10;                        {% csrf_token %}&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-danger btn-sm delete-auto-btn&quot;&gt;Elimina&lt;/button&gt;&#10;                    &lt;/form&gt;&#10;                &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;            {% endfor %}&#10;        &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;&lt;/div&gt;&#10;&#10;{% include 'Autosalone/confirm_delete_popup.html' %}&#10;&lt;script&gt;&#10;document.addEventListener('DOMContentLoaded', function() {&#10;    let formToDelete = null;&#10;    document.querySelectorAll('.delete-auto-btn').forEach(function(btn) {&#10;        btn.addEventListener('click', function(e) {&#10;            e.preventDefault();&#10;            formToDelete = btn.closest('form');&#10;            var modal = new bootstrap.Modal(document.getElementById('confirmDeleteModal'));&#10;            var confirmBtn = document.getElementById('confirmDeleteBtn');&#10;            confirmBtn.onclick = function() {&#10;                if(formToDelete) formToDelete.submit();&#10;                modal.hide();&#10;            };&#10;            modal.show();&#10;        });&#10;    });&#10;});&#10;&lt;/script&gt;&#10;{% endblock %}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Autosalone/confirm_delete_popup.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Autosalone/confirm_delete_popup.html" />
              <option name="updatedContent" value="&lt;!-- Popup di conferma eliminazione generico e riutilizzabile --&gt;&#10;&lt;div class=&quot;modal fade&quot; id=&quot;confirmDeleteModal&quot; tabindex=&quot;-1&quot; aria-labelledby=&quot;confirmDeleteModalLabel&quot; aria-hidden=&quot;true&quot;&gt;&#10;  &lt;div class=&quot;modal-dialog modal-dialog-centered&quot;&gt;&#10;    &lt;div class=&quot;modal-content&quot;&gt;&#10;      &lt;div class=&quot;modal-header&quot;&gt;&#10;        &lt;h5 class=&quot;modal-title&quot; id=&quot;confirmDeleteModalLabel&quot;&gt;Conferma eliminazione&lt;/h5&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;modal&quot; aria-label=&quot;Chiudi&quot;&gt;&lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;modal-body&quot;&gt;&#10;        Sei sicuro di voler eliminare questo elemento? Questa azione non può essere annullata.&#10;      &lt;/div&gt;&#10;      &lt;div class=&quot;modal-footer&quot;&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-bs-dismiss=&quot;modal&quot;&gt;Annulla&lt;/button&gt;&#10;        &lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot; id=&quot;confirmDeleteBtn&quot;&gt;Elimina&lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/div&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/Utente/impostazioni_utente_template.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/Utente/impostazioni_utente_template.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/base.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/base.html" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>